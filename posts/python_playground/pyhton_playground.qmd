---
title: "Python playground"
author: "sungil_park"
date: "2023/03/28"
date-modified: "2023/04/04"
description: "Datamining Basics"
categories: Python
image: "../../img/pythonkid.png"
editor_options: 
  chunk_output_type: console
---

```{r}

```

```{python}
import pandas as pd
pd.__version__
```

```{python}
s2 = pd.Series([68, 83, 112, 68], index=["alice", "bob", "charles", "darwin"])
s2
```

```{python}
s2['bob']
```

pandas can draw plot

```{python}
import matplotlib.pyplot as plt
temperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5]
s7 = pd.Series(temperatures, name="Temperature")
s7.plot()
plt.show()

plt.clf()
```

```{python}
dates = pd.date_range('2016/10/29 5:30pm', periods = 12, freq="H")
dates
```

```{python}
pd.date_range('2020-10-07', '2020-10-20', freq='3D')
```

```{python}
temp_series = pd.Series(temperatures, dates)
temp_series

temp_series.plot(kind="bar")

plt.grid(True)
plt.show()
```

리샘플링

```{python}
temp_series_freq_2H = temp_series.resample("2H")
temp_series_freq_2H

temp_series_freq_2H = temp_series.resample("2H").mean()
temp_series_freq_2H
```

업생플링& 보간

```{python}
temp_series_freq_15min = temp_series.resample("15Min").mean()
temp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다
```

```{python}
temp_series.plot(label="Period: 1 hour")
temp_series_freq_15min.plot(label="Period: 15 minutes")
plt.legend()
plt.show()
plt.clf()
```

## 파이썬 심화

```{python}
fruit = ["apple","banana", "cherry"]

upper_fruit = []

# for 루프를 사용하여 리스트의 각 요소를 대문자로 변환하여 빈 리스트에 추가
for x in fruit:
  upper_fruit.append(x.upper())


print(upper_fruit)
```

```{python}
total = []
for i in range(1, 1000):
    if i % 5 == 0 or i % 7 == 0:
        total.append(i)

print("list:", total)
```

### 죄수의 딜레마

나와 공범이 체포되었다.

서로 협조를 하면 각자 5년의 형량을 받는다.

한명만 협조를 하게 되면 협조한 자는 석방, 협조하지 않은 자는 10년의 형량을 받는다.

내가 협조를 하였을떄 상대방이 협조할 확률이 50%라면 내 형량의 기댓값은 얼마인가?

(1000번 반복한다.)

```{python}
me_decision=[]
me_term=[]
you_decision=[]
you_term=[]

import random

for k in range(1,1001):
  me=['협조']
  you=random.sample(['묵비권','협조'],1)
  me_decision.append(me)
  you_decision.append(you)
  
  if you==me:
    me_term.append(5)
    you_term.append(5)
    
  else:
    me_term.append(0)
    you_term.append(10)

    
print(me_decision, me_term, you_decision, you_term)
print('내형량',sum(me_term)/1000,'공범형량',sum(you_term)/1000)
```

```{python}
fruit = ["apple","banana", "cherry"]
age = [1,2,3]

for x in range(3):
  print("i'm",fruit[x],", my age",age[x])
```

```{python}
a = ([1,2,3],[4,5,6],[7,8])
b = []
for i in a:
  for x in i:
    b.append(x)
    
b
```

```{python}
import pandas as pd
mpg = pd.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv")
```

```{python}
mpg['hwy+displ'] = mpg.apply(lambda x: x["displ"]+x["hwy"],axis=1)
```

```{python}
mpg['hwy+displ']
```

## img

```{python}
import numpy as np
import cv2
import matplotlib.pyplot as plt
```

```{python}
img_raw = cv2.imread("lena_color.png")
```

```{python}
img_gray = cv2.cvtColor(img_raw,cv2.COLOR_BGR2GRAY)
```

```{python}
plt.imshow(img_gray,"gray")
plt.show()
```

## Geopandas

```{python}
import geopandas as gpd
```

```{python}
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
```

```{python}
type(full_data)
```

```{python}
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
```

### How many lands of each type are there?

```{python}
data.CLASS.value_counts()
```

```{python}
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
```

```{python}
wild_lands.plot()
```
