---
title: "training markdown & GGplot"
author: "sungil_park"
date: "2023/03/15"
date-modified: "2023/03/20"
description: "Data Visualization"
image: "vis.png"
categories: Rstudio
---

```{r}
#| warning: false
#| message: false
```

train markdown, ggplot
https://clauswilke.com/dataviz/

## library packages
```{r test}
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
```

## 2023/03/15
```{r import_data}
data_raw <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv")
data_raw %>% dim()
data_raw %>% head()
data_raw %>% summary()
```

```{r}
data_use <- data_raw %>% select(-1)
data_use %>% head()
```

```{r scatter_plot}
ggplot(data_use, aes(x=displ, y=hwy)) + geom_point()
```

```{r smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) + geom_smooth()
```

```{r scatter_and_smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) + 
  geom_point() +
  geom_smooth()
```

## 2023/03/20

load data

```{r}
data_file <- read.csv("ncdc_normals.csv")
```

```{r}
dim(data_file)
data_file %>% head()
data_file %>% sapply(class) # 날짜 형식 변경
```

```{r}
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")
```

```{r}
data_file$station_id %>% unique() %>% length()
```

4개 역만 정해서 `join()` 사용

```{r}
station_loc <- data.frame(station_id = c("USW00014819","USC00042319","USW00093107","USW00012918"),
                          location = c("Chicago","Death valley","San diego","Houston"))
```

```{r}
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+geom_line()
```

#x축에 표시할 눈금

```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
```

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()
```

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_y_continuous(name = "temp",
                     limits = c(0,100))+
  theme_light()
```

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  labs(title = "Fig 2.3", subtitle = "www", caption = "eee", tag = "rrr")
```

### 2021년 서울, 대전, 세종, 제주 기온 데이터

```{r}
data_2021 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
```

자료형 확인

```{r}
data_2021 %>% dim()
data_2021 %>% head()
data_2021 %>% sapply(class)
```

일시 자료형을 `date`형태로 바꾸기

```{r}
data_2021$일시 <-data_2021$일시 %>% as.Date("%Y-%m-%d")
data_2021 %>% sapply(class)
```

기초통계량 확인

```{r}
data_2021 %>% summary()
```

breaks 설정

```{r}
date_21s <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_21e <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_21 <- seq.Date(date_21s, date_21e, by = "3 month")
```

ploting

```{r}
#data_2021 %>% names()
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_21,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

### 2022년 서울, 대전, 세종, 제주 기온 데이터

```{r}
data_2022 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20230322080932.csv", fileEncoding = "euc-kr")
```

자료형 확인

```{r}
data_2022 %>% dim()
data_2022 %>% head()
data_2022 %>% sapply(class)
```

일시 자료형을 `date`형태로 바꾸기

```{r}
data_2022$일시 <-data_2022$일시 %>% as.Date("%Y-%m-%d")
data_2022 %>% sapply(class)
```

기초통계량 확인

```{r}
data_2022 %>% summary()
```

breaks 설정

```{r}
date_22s <- "2022-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_22e <- "2023-01-01" %>% as.Date("%Y-%m-%d")
break_date_22 <- seq.Date(date_22s, date_22e, by = "3 month")
```

```{r}
data_2022_2 <- data_2022 %>% filter(data_2022$지점명 %in% c("서울","대전","제주","세종"))
data_2022_2$지점명 %>% unique()
```

ploting

```{r}
#data_2021 %>% names()
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

```{r}
mean_temps <- temps_long %>% 
  group_by(month,location) %>% 
  summarise(mean = mean(temperature)) %>% 
  ungroup() %>% 
  mutate(month = factor(month %>% paste(),
                        levels = 1:12 %>% paste()))
```

## 2023/03/27
```{r}
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
  geom_tile(width = .95,height = 0.95)+
  scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.98,
                       name = "temperature")+
  coord_fixed(expand = FALSE)+
  ylab(NULL)
```

## 2023/03/29
```{r}
library(dplyr)
library(ggplot2)
```


```{r}
data_file <- read.csv("ncdc_normals.csv")
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")

houston <- data.frame(station_id = c("USW00012918"), location = c("Houston"))

houston_temps <- data_file %>% inner_join(houston,by="station_id")
houston_temps %>% head()
```


```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
```


```{r}
ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(size = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

```{r}
#install.packages("cowplot")
library(cowplot)
```

```{r}
houston_plot <- ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(size = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

arrange multiple plots into a grid
```{r}
plot_ab <- plot_grid(houston_plot,houston_plot,
                    nrow = 1,
                    rel_widths = c(1,2),
                    labels = c("a","b"))

plot_abc <- plot_grid(plot_ab, houston_plot,
                      ncol = 1,
                      rel_heights = c(1.5,2),
                      labels = c("","c"))

plot_abc
```

```{r}
texas_cnt <- read.csv("https://raw.githubusercontent.com/christianmendoza/texas-counties/main/data/texas-counties.csv")
texas_cnt %>% head()
```

```{r}
tx_counties <- texas_cnt %>% 
  select(county,population) %>% 
  mutate(county = gsub("county","",county),
         popratio = population/median(population)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),
         label = ifelse(index<=3|index>n()-3|runif(n())<.04, county, ""))
```
`runif(x)` x 0~1 사이의 난수 
```{r}
tx_counties
```

```{r}
#install.packages("ggrepel")
library(ggrepel)
```


```{r}
ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 0, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
  
```

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 0, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "popnumber/median",
                breaks = 10^(-2:2),
                labels = label_log10)+
  scale_x_continuous(name = "Texas counties",
                     breaks = NULL)+
  theme_light()+
  theme(panel.border = element_blank())
```



```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 1, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "popnum / med",
                breaks = 10^(-2:2),
                labels = label_log10)+
  theme_light()+
  theme(panel.border = element_blank())
```

```{r}
label_log10
```


## 2023/04/03
시군구 인구수 2023년
```{r}
data_202302 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/%ED%96%89%EC%A0%95%EA%B5%AC%EC%97%AD_%EC%8B%9C%EA%B5%B0%EA%B5%AC_%EB%B3%84_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%84%B8%EB%8C%80%EC%88%98_202302.csv",encoding = "utf-8")

data_202302 %>% head()

```

```{r}
d <- data_202302 %>% 
  filter(X2023.02>0) %>%  
  select(행정구역.시군구.별,X2023.02) %>%
  mutate(popratio = X2023.02/median(X2023.02)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),label = ifelse(index<=3|index>n()-3|runif(n())<.04, 행정구역.시군구.별, ""))
```



```{r}
d
```

```{r}
ggplot(d,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
```

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(d,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "인구수/중위수",
                breaks = 10^(-2:2),
                labels = label_log10,
                limits = c(10^-1.3,10^1.3))+
  theme_light()+
  theme(panel.border = element_blank())+
  scale_x_continuous(name = "행정구역 (시군구)별 주민등록세대수",
                     breaks = NULL)
```


## 2023/04/05

load data

```{r}
data_file <- read.csv("ncdc_normals.csv")
data_file %>% sapply(class) # 날짜 형식 변경
```

```{r}
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")
data_file$station_id %>% unique() %>% length()
```

```{r}
station_loc <- data.frame(station_id = c("USW00014819","USC00042319","USW00093107","USW00012918"),
                          location = c("Chicago","Death valley","San diego","Houston"))
```

```{r}
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```
```{r}
break_date
date_lab <- format(break_date,"%B")
```

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
  geom_line(linewidth = 1.1)+
  scale_x_date(name = "month",
               breaks = break_date,
               labels = date_lab)+
  scale_y_continuous(name = "temperature",
                     limits = c(0,105))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```

```{r}
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온",
                     limits = c(-20,35))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```


pt.4
```{r}
library(colorspace)
RColorBrewer::display.brewer.all()
```
```{r}
US_census <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_census.csv")

US_regions <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_regions.csv")
```


```{r}
popgrowth_df <- US_census %>% left_join(US_regions) %>% 
  group_by(region,division,state) %>% 
  summarize(pop2000 = sum(pop2000, na.rm = TRUE),
            pop2010 = sum(pop2010, na.rm = TRUE),
            popgrowth = (pop2010-pop2000)/pop2000,
            area = sum(area)) %>% 
  arrange(popgrowth) %>% 
  ungroup() %>%
  mutate(state = factor(state,levels = state),
         region = factor(region, levels = c("West","South","Midwest","Northwest")))
```
```{r}
popgrowth_df %>% head()
```
```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
state_colors <- region_colors[as.numeric(popgrowth_df$region)]
```

```{r}
state_colors_dark = colorspace::darken(state_colors,0.4)
```

```{r}
ggplot(popgrowth_df,aes(x = state, y = 100*popgrowth, fill = region))+
  geom_col()+
  scale_y_continuous(name = "population growth, 2000 to 2010",
                     labels = scales::percent_format(scale = 1),
                     expand = c(0,0))+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size=10,color = state_colors),
        legend.position = c(.58,.68),
        legend.background = element_rect(fill="#FFFFFFb0"))
```


```{r}
kor_202202 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202202_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9.csv")

kor_202202 %>% head()
kor_202202 %>% sapply(class)
kor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format()
```
```{r}
kor_202202_use <- kor_202202 %>% 
  filter(substr(행정구역,1,2) %in% c("서울","대전","대구","부산")) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  select(행정구역,총인구수) %>% 
  arrange(총인구수)
```

```{r}
kor_202202_use$시도 = sapply(kor_202202_use$행정구역,
                           function(x) strsplit(x, " ")[[1]][1])
kor_202202_use$시도 = factor(kor_202202_use$시도,
                           levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))
```

```{r}
kor_202202_use %>% head()
kor_202202_use %>% summary()
```
```{r}
state_colors <- region_colors[as.numeric(kor_202202_use$시도)]
state_colors_dark <- colorspace::darken(state_colors,0.4)
```

```{r}
ggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_x_discrete(aes(color=state_colors))+
  scale_color_manual(values = state_colors)+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 6,color = state_colors_dark),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```














