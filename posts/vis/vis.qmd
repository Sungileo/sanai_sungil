---
title: "ggplot, ggplot"
author: "sungil_park"
date: "2023/03/15"
date-modified: "2023/03/20"
description: "Data Visualization"
image: "vis.png"
categories: "R"
editor_options: 
  chunk_output_type: console
---

```{r}
#| warning: false
#| message: false
```

Train markdown, ggplot https://clauswilke.com/dataviz/

## library packages

```{r test}
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
library(forcats)
```

## mpg datasets

Read data, check dimension and data summary

```{r import_data}
data_raw <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv")
data_raw %>% dim()
data_raw %>% head()
data_raw %>% summary()
```

Drop index column followed during data load

```{r}
data_use <- data_raw %>% select(-1)
data_use %>% head()
```

### scatter plot

Use displ and hwy

displ : Displacement

hwy : Highway fuel economy

```{r scatter_plot}
ggplot(data_use, aes(x=displ, y=hwy)) +
  geom_point()
```

### smooth line

```{r smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) +
  geom_smooth()
```

### scatter & smooth line

```{r scatter_and_smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) + 
  geom_point() +
  geom_smooth()
```

### Boxplot example

hwy average per class

```{r}
mpg %>% 
  ggplot(mapping = aes(x=class, y=hwy, fill=class))+
  geom_boxplot()
```

### Group_by, errorbar example

```{r}
mpg %>% 
  group_by(class) %>%
  summarize(mean = mean(hwy), sd = sd(hwy)) %>% 
  ggplot(aes(x=class, y=mean, fill=class))+
  geom_bar(stat = "identity")+ 
  geom_errorbar(
    aes(ymin=mean-sd, ymax=mean+sd),
                width = 0.5,
                position = position_dodge(width = 0.9))
```

## ncdc_normals

The U.S. Climate Normals are a large suite of data products that provide information about typical climate conditions for thousands of locations across the United States.

Load data

```{r}
data_file <- read.csv("C:/sanai_sungil/posts/vis/ncdc_normals.csv")
```

Check data information

```{r}
dim(data_file)
data_file %>% head()
data_file %>% sapply(class) # 날짜 형식 변경
```

Convert date format (character -\> date)

```{r}
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")
```

There are 7501 measurement locations

```{r}
data_file$station_id %>% unique() %>% length()
```

Specifying 4 Station and use `join()` function

```{r}
station_loc <- data.frame(station_id = c("USW00014819","USC00042319","USW00093107","USW00012918"),
                          location = c("Chicago","Death valley","San diego","Houston"))
```

```{r}
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```

### Line plot by location

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
  geom_line()
```

Create a scale to display on the x-axis.

```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
```

### Line plot, date x scale

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()
```

### Line plot, date x scale, y limits, labs variable

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  scale_y_continuous(name = "temp",
                     limits = c(20,105))+
  theme_light()+
  labs(title = "title", subtitle = "subtitle", caption = "caption", tag = "tag")
```

### Tile plot, mean temperature by month, location

```{r}
mean_temps <- temps_long %>% 
  group_by(month,location) %>% 
  summarize(mean = mean(temperature)) %>% 
  ungroup() %>% 
  mutate(month = factor(month %>% paste(),
                        levels = 1:12 %>% paste()))
```

`Viridis` is Color Palette

```{r}
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
  geom_tile(width = .95,height = 0.95)+
  scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.98,
                       name = "temperature")+
  coord_fixed(expand = FALSE)+
  ylab(NULL)
```

### Pie chart, Polar coordinates

The polar coordinate system is most commonly used for pie charts, which are a stacked bar chart in polar coordinates.

`format(x,"%B")` Outputs unabbreviated month

```{r}
date_lab <- format(break_date,"%B")
date_lab
```

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
  geom_line(linewidth = 1.1)+
  scale_x_date(name = "month",
               breaks = break_date,
               labels = date_lab)+
  scale_y_continuous(name = "temperature",
                     limits = c(0,105))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```

## OBS ASOS 2021 Korea

Observations Automated Surface Observing System

Average, minimum, and maximum temperatures by region(서울, 대전, 세종, 제주)

Load data

```{r}
data_2021 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
```

Check data information

```{r}
data_2021 %>% dim()
data_2021 %>% head()
data_2021 %>% sapply(class)
```

Convert date format (character -\> date)

```{r}
data_2021$일시 <-data_2021$일시 %>% as.Date("%Y-%m-%d")
data_2021 %>% sapply(class)
```

Summary data

```{r}
data_2021 %>% summary()
```

Create a scale to display on the x-axis.

```{r}
date_21s <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_21e <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_21 <- seq.Date(date_21s, date_21e, by = "3 month")
```

### Ploting

```{r}
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_21,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

## OBS ASOS 2022 Korea

Same process

```{r}
data_2022 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20230322080932.csv", fileEncoding = "euc-kr")
data_2022$일시 <-data_2022$일시 %>% as.Date("%Y-%m-%d")
```

```{r}
data_2022 %>% summary()
```

```{r}
date_22s <- "2022-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_22e <- "2023-01-01" %>% as.Date("%Y-%m-%d")
break_date_22 <- seq.Date(date_22s, date_22e, by = "3 month")
```

```{r}
data_2022$지점명 %>% unique()
```

Filter only 서울, 대전, 제주, 세종

```{r}
data_2022_2 <- data_2022 %>% filter(data_2022$지점명 %in% c("서울","대전","제주","세종"))
data_2022_2$지점명 %>% unique()
```

### ploting

```{r}
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

### Tile plot, mean temperature by month, location

```{r}
d <- data_2022_2 %>% 
  mutate(month = 일시 %>% format("%B")) %>% 
  group_by(month,지점명) %>% 
  summarize(mean = mean(평균기온..C.)) %>% 
  ungroup()


ggplot(d,aes(x = month, y = 지점명, fill = mean))+
  geom_tile(width = .95,height = 0.95)+
  scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.99,
                       name = "temperature")+
  coord_fixed(expand = FALSE)+
  ylab(NULL)
```

### Pie chart, Polar coordinates

```{r}
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온",
                     limits = c(-20,35))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```

## ncdc normals Houston

Load & filter only Houston temperature

```{r}
data_file <- read.csv("C:/sanai_sungil/posts/vis/ncdc_normals.csv")
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")

houston <- data.frame(station_id = c("USW00012918"), location = c("Houston"))

houston_temps <- data_file %>% inner_join(houston,by="station_id")
houston_temps %>% head()
```

### Set X scale breaks, Plot

```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")

ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(linewidth = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

Use `cowplot` package to arrange multiple plots into a grid

```{r}
library(cowplot)
```

Specify plot as a object `houston_plot`

```{r}
houston_plot <- ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(linewidth = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

### arrange multiple plots into a grid

```{r}
plot_ab <- plot_grid(houston_plot,houston_plot,
                    nrow = 1,
                    rel_widths = c(1,2),
                    labels = c("a","b"))

plot_abc <- plot_grid(plot_ab, houston_plot,
                      ncol = 1,
                      rel_heights = c(1.5,2),
                      labels = c("","c"))

plot_abc
```

## Texas counties

Texas counties by land area, population, and population density

```{r}
texas_cnt <- read.csv("https://raw.githubusercontent.com/christianmendoza/texas-counties/main/data/texas-counties.csv")
texas_cnt %>% head()
```

Select county, population columns

remove "county" word in county columns ex) "sungil county" -\> "sungil"

calculate popratio = population/ meadian of total population

list in order of highest population

Create an index column with a number, Add labels to the top 3, bottom 3, and randomly determined values

`runif(x)` Outputs a random number between 0 and 1

```{r}
tx_counties <- texas_cnt %>% 
  select(county,population) %>% 
  mutate(county = gsub("county","",county),
         popratio = population/median(population)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),
         label = ifelse(index<=3|index>n()-3|runif(n())<.04, county, ""))

tx_counties %>% head()
```

ggrepel provides geoms for ggplot2 to repel overlapping text labels

```{r}
library(ggrepel)
```

### point plot, overlapped text label

```{r}
ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 0, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
  
```

### Point plot, y log scale

There are two main reasons to use logarithmic scales in charts and graphs. The first is to respond to skewness towards large values; i.e., cases in which one or a few points are much larger than the bulk of the data. The second is to show percent change or multiplicative factors.

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 1, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "popnumber/median",
                breaks = 10^(-2:2),
                labels = label_log10)+
  scale_x_continuous(name = "Texas counties",
                     breaks = NULL)+
  theme_light()+
  theme(panel.border = element_blank())
```

## 시군구 인구수 2023년 2월

```{r}
data_pop <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/%ED%96%89%EC%A0%95%EA%B5%AC%EC%97%AD_%EC%8B%9C%EA%B5%B0%EA%B5%AC_%EB%B3%84_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%84%B8%EB%8C%80%EC%88%98_202302.csv",encoding = "utf-8")

data_pop %>% head()

```

Same process

```{r}
data_202302 <- data_pop %>% 
  filter(X2023.02>0) %>%  
  select(행정구역.시군구.별,X2023.02) %>%
  mutate(popratio = X2023.02/median(X2023.02)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),label = ifelse(index<=3|index>n()-3|runif(n())<.04, 행정구역.시군구.별, ""))
```

```{r}
data_202302 %>% head()
```

### Point plot

```{r}
ggplot(data_202302,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
```

### Point plot, y log scale

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(data_202302,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "인구수/중위수",
                breaks = 10^(-2:2),
                labels = label_log10,
                limits = c(10^-1.3,10^1.3))+
  theme_light()+
  theme(panel.border = element_blank())+
  scale_x_continuous(name = "행정구역 (시군구)별 주민등록세대수",
                     breaks = NULL)
```

## RColorBrewer

```{r}
library(colorspace)
RColorBrewer::display.brewer.all()
```

## US census , US regions

US_census is dataset of population per region, age, human race

US_region is dataset of State informations

Load data

```{r}
US_census <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_census.csv")

US_regions <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_regions.csv")
```

Join & group by State

summaise 2000 population, 2010 population, population growth, total area size

```{r}
popgrowth_df <- US_census %>% left_join(US_regions) %>% 
  group_by(region,division,state) %>% 
  summarize(pop2000 = sum(pop2000, na.rm = TRUE),
            pop2010 = sum(pop2010, na.rm = TRUE),
            popgrowth = (pop2010-pop2000)/pop2000,
            area = sum(area)) %>% 
  arrange(popgrowth) %>% 
  ungroup() %>%
  mutate(state = factor(state,levels = state),
         region = factor(region, levels = c("West","South","Midwest","Northeast")))
```

```{r}
popgrowth_df %>% head()
```

### Plot with color

Set Colorspace

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
state_colors <- region_colors[as.numeric(popgrowth_df$region)]
state_colors_dark = colorspace::darken(state_colors,0.4)

ggplot(popgrowth_df,aes(x = state, y = 100*popgrowth, fill = region))+
  geom_col()+
  scale_y_continuous(name = "population growth, 2000 to 2010",
                     labels = scales::percent_format(scale = 1),
                     expand = c(0,0))+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size=10,color = state_colors),
        legend.position = c(.6,.5),
        legend.background = element_rect(fill="#FFFFFFb0"))
```

### Plot lighten

highlightinh Texas, Louisiana, NA

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)

popgrowth_df_2 <- popgrowth_df %>% 
  mutate(region_highlight = ifelse(state %in% c("Texas","Louisiana"), NA, region %>% paste()))
popgrowth_df_2 %>% head()

ggplot(popgrowth_df_2, aes(x = state, y= 100*popgrowth, fill = region_highlight))+
  geom_col()+
  scale_y_continuous(name = "Population growth, 2000to 2010",
                     labels = scales::percent_format(scale=1),
                     expand = c(0,0))+
  scale_fill_manual(values = region_colors,
                    breaks = c("West","South","Midwest","Northeast"),
                    na.value = "#56B4E9")+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size=10),
        legend.position = c(.58,.68),
        legend.background = element_rect(fill="#FFFFFFb0"))
```

## 2022 02 주민등록인구 및 세대 현황

Load & change type

```{r}
kor_202202 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202202_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9.csv")

kor_202202 %>% head()
kor_202202 %>% sapply(class)
kor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format() #numeric to string
```

filter 서울, 대전 ,대구, 부산

```{r}
kor_202202_use <- kor_202202 %>% 
  filter(substr(행정구역,1,2) %in% c("서울","대전","대구","부산")) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  select(행정구역,총인구수) %>% 
  arrange(총인구수)
```

```{r}
kor_202202_use$시도 = sapply(kor_202202_use$행정구역,
                           function(x) strsplit(x, " ")[[1]][1])
kor_202202_use$시도 = factor(kor_202202_use$시도,
                           levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))

#kor_202202_use %>% View()
```

```{r}
kor_202202_use %>% head()
kor_202202_use %>% summary()
```

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
region_colors_2 <- RColorBrewer::brewer.pal(4,"Set2")
```

### Plot with colors, Korea

```{r}
ggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors_2)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```

### Highlight Daejeon (1)

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)
region_colors[2] <- "#56b4e9" %>% darken(0.3)

ggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```

### Highlight Daejeon (2)

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)

kor_202202_use_2 <- kor_202202_use %>% mutate(region_highlight = ifelse(시도 %in% c("대전광역시"),NA,시도 %>% paste()))



ggplot(kor_202202_use_2,aes(x = reorder(행정구역,총인구수),y= 총인구수, fill = region_highlight))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors,
                    breaks = c("서울특별시","대전광역시","대구광역시","부산광역시"),
                    na.value = "#56B4E9")+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0")
        )
```

## Map Korea

### library packages, load `.json`

```{r}
#install.packages("geojsonsf")
library(geojsonsf)
library(sf)

kor_sido <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIDO.json")
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
```

### Merge data by 행정구역_코드

```{r}
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "")
use_map <- use_map %>% merge(kor_202202,by = "행정구역_코드", all.x=T)
```

### Plot

```{r}
use_map %>% ggplot(aes(fill=총인구수))+
  geom_sf(color = "grey90")+
  coord_sf(datum = NA)+
  scale_fill_distiller(
    name = "인구수",
    palette = "Blues", type = "seq", na.value = "grey60",
    direction = 1,
    breaks = seq(0,10,2) * 1e+5,
    labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
  theme_minimal()+
  theme(
    legend.title.align = 0.5,
    legend.text.align = 1.0,
    legend.position = c(0.85,0.2)
  )
```

### Plot Daejeon

```{r}
daejeon_map <-  use_map %>% filter(행정구역 %>% substr(1,5) == "대전광역시")

daejeon_map %>% ggplot(aes(fill=총인구수))+
  geom_sf(color = "grey90")+
  coord_sf(datum = NA)+
  scale_fill_distiller(
    name = "인구수",
    palette = "Blues", type = "seq", na.value = "grey60",
    direction = 1,
    breaks = seq(0,10,2) * 1e+5,
    labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
  theme_minimal()+
  theme(
    legend.title.align = 0.5,
    legend.text.align = 1.0,
    legend.position = c(0.85,0.2)
  )
```

### Plot Gender_ratio

```{r}
use_map %>% ggplot(aes(fill = 남여_비율))+
  geom_sf()+
  scale_fill_continuous_diverging(
    name = "남자/여자",
    palette = "BLue-Red",
    mid=1,
  limits = 1 + c(-1,+1)*0.35,
  rev = T)+
  theme_minimal()+
  theme(
    legend.title.align = 0.5,
    legend.text.align = 1.0,
    legend.position = c(0.85,0.2)
  )
```

## 2023년 3월 시군구 인구수

시군구 지도 데이터, 행정구역 코드 10자리로 만들기

```{r}
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "")
```

### 데이터 로드

2023년 3월 주민등록 인구통계 데이터, 행정안전부

```{r}
data_pop <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202303_202303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "utf-8")
data_pop %>% head() 
```

### 전처리

1.  인구수0명 출장소 제외

2.  행정구역 코드 10자리 추출

3.  인구수 숫자형으로 변환

4.  시 단위 제외, 정렬

```{r}
data_202303 <- data_pop %>% 
  filter(X2023년03월_총인구수>0) %>%  
  select(행정구역,X2023년03월_총인구수) %>% 
  mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
         X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric()) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  arrange(desc(X2023년03월_총인구수))

data_202303 %>% head()
```

### 지도 데이터와 병합

```{r}
use_map <- use_map %>% merge(data_202303,by = "행정구역_코드", all.x=T)
```

### Plot

```{r}
use_map %>% ggplot(aes(fill=X2023년03월_총인구수))+
  geom_sf(color = "grey90")+
  coord_sf(datum = NA)+
  scale_fill_distiller(
    name = "2023년 3월 인구수",
    palette = "Blues", type = "seq", na.value = "grey60",
    direction = 1,
    breaks = seq(0,10,2) * 1e+5,
    labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
  theme_minimal()+
  theme(
    legend.title.align = 0.5,
    legend.text.align = 1.0,
    legend.position = c(0.85,0.2))+
  labs(title = "2023년 3월")
```

## 인구수 증가율

```{r}
file_2023 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202303_202303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "utf-8")

file_2013 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/201303_201303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "UTF-8")
```

### 전처리

1.  인구수 0명 이상 필터

2.  행정구역(지역코드), 총인구수 열만 선택

3.  행정구역(지역코드)에서 지역코드와 행정구역 분리

4.  시 단위 제외, 인구수 기준 정렬

```{r}
data_2023 <- file_2023 %>%
  filter(X2023년03월_총인구수>0) %>%  
  select(행정구역,X2023년03월_총인구수) %>% 
  mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
         X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric(),
         행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
         행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  arrange(desc(X2023년03월_총인구수))

data_2013 <- file_2013 %>% 
  filter(X2013년03월_총인구수>0) %>%  
  select(행정구역,X2013년03월_총인구수) %>% 
  mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
         X2013년03월_총인구수 = gsub(",","",X2013년03월_총인구수) %>% as.numeric(),
         행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
         행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  arrange(desc(X2013년03월_총인구수))
```

### 병합

1.  지역코드 기준 병합

2.  인구성장률 열 추가

3.  중복 열 제거, 인구성장률 기준 정렬

4.  서울, 대전, 대구, 부산지역만 필터

5.  시도 추출, factor 변환

```{r}
kor_census <- data_2013 %>% 
  merge(data_2023,by = "행정구역_코드", all.x=T) %>%  
  mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>% 
  select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>% 
  filter(substr(행정구역.x,1,2) %in% c("서울","대전","대구","부산")) %>%
  arrange(desc(성장률))

names(kor_census) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")

kor_census$시도 = sapply(kor_census$행정구역,
                           function(x) strsplit(x, " ")[[1]][1])
kor_census$시도 = factor(kor_census$시도,
                           levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))

```

### Plot

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")


ggplot(kor_census,aes(x = reorder(행정구역,성장률),y= 성장률, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "인구성장률",
                     expand = c(0,0),
                     labels = scales::percent_format(scale = 100))+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```

### Map plot

```{r}
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
kor_map <- kor_sigu
kor_map$행정구역_코드 <- paste(kor_map$SIG_CD,"00000",sep="")
```

```{r}
kor_census_2 <- data_2013 %>% 
  merge(data_2023,by = "행정구역_코드", all.x=T) %>%  
  mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>% 
  select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>% 
  arrange(desc(성장률))

names(kor_census_2) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")


kor_map <- kor_map %>% left_join(kor_census_2, by="행정구역_코드")
```

```{r}
kor_map %>% ggplot(aes(fill=성장률))+
  geom_sf()+
  scale_fill_continuous_diverging(
    name = "인구성장률",
    palette = "BLue-Red",
    limits = c(-0.4,2.4))+
  theme_minimal()+
  theme(legend.title.align = 0.5,
        legend.text.align = 1.0,
        legend.position = c(0.85,0.2))
  
```

## 인구증감

```{r}
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
data <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor_census_2013_2023.csv",encoding = "utf-8")

data <- data %>% mutate(인구증감 = 총인구수_2023-총인구수_2013)

use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "") %>% as.numeric()
use_map <- use_map %>% merge(data,by = "행정구역_코드")

use_map %>% ggplot(aes(fill = 인구증감))+
  geom_sf()+
  coord_sf(datum = NA)+
  scale_fill_continuous_diverging(
    name = "인구증감",
    palette = "BLue-Red",
    na.value = "grey40",
    mid=0,
    rev = T,
    limits = c(-4,4)*100000,
    labels = format(seq(-4,4,2) * 1e+5, big.mark = ",",scientific = FALSE))+
  theme_minimal()+
  theme(legend.position = c(0.85,0.2))
```

## Random p-value

```{r}
set.seed(100)
df <- data.frame(p = runif(1000)) %>% 
  mutate(idx = 1:n(),
         p_log10 = -log10(p))

df <- df %>% 
  arrange(p) %>%
  mutate(idx_2 = 1:n(),
         label = ifelse(idx_2<=3,p,""))


ggplot(df, aes(x=idx, y=p_log10)) +
  geom_point(color = "darkblue") +
  geom_hline(yintercept = -log10(0.05),
             linetype = 2,
             linewidth = 0.8,
             color = "darkred") +
  scale_y_continuous(name = expression(-log[10](italic(p)))) +
  scale_x_continuous(name = "",
                     breaks = NULL) +
  theme_minimal()+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)
```

## Visualizing amounts: 수량 데이터의 시각화

```{r}
boxoffice <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/boxoffice.csv")

boxoffice %>% ggplot(aes(x=fct_reorder(title,rank),y=amount))+
  geom_col(fill="#56b4e9",width = 0.6,alpha = 0.9)+
  scale_y_continuous(expand = c(0,0),
                     breaks = c(0,2e7,4e7,6e7),
                     labels = c(0,20,40,60),
                     name = "Weekend gross(million USD)")+
  xlab("")+
  theme_minimal()+
  theme(
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.text.x = element_text(angle=45,hjust = 1)
  )+
  coord_flip()
```

```{r}
kobis <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/KOBIS_%EC%8B%A4%EC%8B%9C%EA%B0%84_%EC%98%88%EB%A7%A4%EC%9C%A8_2023-04-26.csv")

kobis %>% filter(누적매출액>0) %>% head(5) %>% 
  ggplot(aes(x=reorder(영화명,-예매매출액),y=예매매출액))+
  geom_col(fill="#56b4e9",width = 0.6,alpha = 0.9)+
  scale_y_continuous(expand = c(0,0),
                     breaks = c(0,5e8,1e9,1.5e9),
                     labels = c(0,5,10,15),
                     name = "에매매출액(억원)")+
  xlab("")+
  theme_minimal()+
  theme(
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank())
```

```{r}
income_by_age <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/income_by_age.csv")

income_by_age <- income_by_age %>% 
  mutate(age = age %>% factor(levels = c("15 to 24",
                                         "25 to 34",
                                         "35 to 44",
                                         "45 to 54",
                                         "55 to 64",
                                         "65 to 74",
                                         "> 74")))
income_df <- income_by_age %>% 
  filter(race %in% c("white","asian","black","hispanic")) %>% 
  mutate(race = fct_relevel(race,c("asian","white","hispanic","black")),
         race = fct_recode(race,"Asian"="asian","Hispanic"="hispanic"),
         age = fct_recode(age,">= 75" = "> 74"))

colors_four <- RColorBrewer::brewer.pal(5,"PuBu")[5:2]

income_df %>% ggplot(aes(x=age,y=median_income,fill=race))+
  geom_col(position = "dodge",alpha = 0.9)+
  scale_fill_manual(values = colors_four,name=NULL)+
  xlab("age (years)")+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()
```

```{r}
colors_seven <- RColorBrewer::brewer.pal(8,"PuBu")[2:8]

income_df %>% ggplot(aes(x=race,y=median_income,fill=age))+
  geom_col(position = "dodge",alpha=0.9)+
  scale_fill_manual(values = colors_seven,name=NULL)+
  xlab(NULL)+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()
```

```{r}
income_df %>% ggplot(aes(x=age,y=median_income))+
  geom_col(fill = "#56b4e9",alpha = 0.9)+
  xlab("age (years)")+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()+
  theme(panel.grid.major.x = element_blank(),
        axis.ticks.x = element_blank())+
  facet_wrap(~race, scales ="free_x")
```
