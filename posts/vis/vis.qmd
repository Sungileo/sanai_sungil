---
title: "ggplot, ggplot"
author: "sungil_park"
date: "2023/03/15"
date-modified: "2023/03/20"
description: "Data Visualization"
image: "vis.png"
categories: "R"
editor_options: 
  chunk_output_type: inline
---

```{r}
#| warning: false
#| message: false
```

Train markdown, ggplot https://clauswilke.com/dataviz/

## library packages

```{r test}
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
library(forcats)
library(tidyr)
```

## mpg datasets

Read data, check dimension and data summary

```{r import_data}
data_raw <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv")
data_raw %>% dim()
data_raw %>% head()
data_raw %>% summary()
```

Drop index column followed during data load

```{r}
data_use <- data_raw %>% select(-1)
data_use %>% head()
```

### scatter plot

Use displ and hwy

displ : Displacement

hwy : Highway fuel economy

```{r scatter_plot}
ggplot(data_use, aes(x=displ, y=hwy)) +
  geom_point()
```

### smooth line

```{r smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) +
  geom_smooth()
```

### scatter & smooth line

```{r scatter_and_smooth_line}
ggplot(data_use, aes(x=displ, y=hwy)) + 
  geom_point() +
  geom_smooth()
```

### Boxplot example

hwy average per class

```{r}
mpg %>% 
  ggplot(mapping = aes(x=class, y=hwy, fill=class))+
  geom_boxplot()
```

### Group_by, errorbar example

```{r}
mpg %>% 
  group_by(class) %>%
  summarize(mean = mean(hwy), sd = sd(hwy)) %>% 
  ggplot(aes(x=class, y=mean, fill=class))+
  geom_bar(stat = "identity")+ 
  geom_errorbar(
    aes(ymin=mean-sd, ymax=mean+sd),
                width = 0.5,
                position = position_dodge(width = 0.9))
```

## ncdc_normals

The U.S. Climate Normals are a large suite of data products that provide information about typical climate conditions for thousands of locations across the United States.

Load data

```{r}
data_file <- read.csv("C:/sanai_sungil/posts/vis/ncdc_normals.csv")
```

Check data information

```{r}
dim(data_file)
data_file %>% head()
data_file %>% sapply(class) # 날짜 형식 변경
```

Convert date format (character -\> date)

```{r}
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")
```

There are 7501 measurement locations

```{r}
data_file$station_id %>% unique() %>% length()
```

Specifying 4 Station and use `join()` function

```{r}
station_loc <- data.frame(station_id = c("USW00014819","USC00042319","USW00093107","USW00012918"),
                          location = c("Chicago","Death valley","San diego","Houston"))
```

```{r}
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```

### Line plot by location

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
  geom_line()
```

Create a scale to display on the x-axis.

```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
```

### Line plot, date x scale

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()
```

### Line plot, date x scale, y limits, labs variable

```{r}
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
  geom_line()+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  scale_y_continuous(name = "temp",
                     limits = c(20,105))+
  theme_light()+
  labs(title = "title", subtitle = "subtitle", caption = "caption", tag = "tag")
```

### Tile plot, mean temperature by month, location

```{r}
mean_temps <- temps_long %>% 
  group_by(month,location) %>% 
  summarize(mean = mean(temperature)) %>% 
  ungroup() %>% 
  mutate(month = factor(month %>% paste(),
                        levels = 1:12 %>% paste()))
```

`Viridis` is Color Palette

```{r}
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
  geom_tile(width = .95,height = 0.95)+
  scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.98,
                       name = "temperature")+
  coord_fixed(expand = FALSE)+
  ylab(NULL)
```

### Pie chart, Polar coordinates

The polar coordinate system is most commonly used for pie charts, which are a stacked bar chart in polar coordinates.

`format(x,"%B")` Outputs unabbreviated month

```{r}
date_lab <- format(break_date,"%B")
date_lab
```

```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
  geom_line(linewidth = 1.1)+
  scale_x_date(name = "month",
               breaks = break_date,
               labels = date_lab)+
  scale_y_continuous(name = "temperature",
                     limits = c(0,105))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```

## OBS ASOS 2021 Korea

Observations Automated Surface Observing System

Average, minimum, and maximum temperatures by region(서울, 대전, 세종, 제주)

Load data

```{r}
data_2021 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
```

Check data information

```{r}
data_2021 %>% dim()
data_2021 %>% head()
data_2021 %>% sapply(class)
```

Convert date format (character -\> date)

```{r}
data_2021$일시 <-data_2021$일시 %>% as.Date("%Y-%m-%d")
data_2021 %>% sapply(class)
```

Summary data

```{r}
data_2021 %>% summary()
```

Create a scale to display on the x-axis.

```{r}
date_21s <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_21e <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_21 <- seq.Date(date_21s, date_21e, by = "3 month")
```

### Ploting

```{r}
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_21,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

## OBS ASOS 2022 Korea

Same process

```{r}
data_2022 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20230322080932.csv", fileEncoding = "euc-kr")
data_2022$일시 <-data_2022$일시 %>% as.Date("%Y-%m-%d")
```

```{r}
data_2022 %>% summary()
```

```{r}
date_22s <- "2022-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_22e <- "2023-01-01" %>% as.Date("%Y-%m-%d")
break_date_22 <- seq.Date(date_22s, date_22e, by = "3 month")
```

```{r}
data_2022$지점명 %>% unique()
```

Filter only 서울, 대전, 제주, 세종

```{r}
data_2022_2 <- data_2022 %>% filter(data_2022$지점명 %in% c("서울","대전","제주","세종"))
data_2022_2$지점명 %>% unique()
```

### ploting

```{r}
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온")+
  theme_light()
```

### Tile plot, mean temperature by month, location

```{r}
d <- data_2022_2 %>% 
  mutate(month = 일시 %>% format("%B")) %>% 
  group_by(month,지점명) %>% 
  summarize(mean = mean(평균기온..C.)) %>% 
  ungroup()


ggplot(d,aes(x = month, y = 지점명, fill = mean))+
  geom_tile(width = .95,height = 0.95)+
  scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.99,
                       name = "temperature")+
  coord_fixed(expand = FALSE)+
  ylab(NULL)
```

### Pie chart, Polar coordinates

```{r}
ggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+
  geom_line(linewidth = 1) +
  scale_x_date(name ="월", 
               breaks = break_date_22,
               labels = c("1월","4월","7월","10월","1월")) +
  scale_y_continuous(name = "평균기온",
                     limits = c(-20,35))+
  coord_polar(theta = "x",
              start = pi,
              direction = 1)+
  theme_light()+
  theme(panel.border = element_blank())
```

## ncdc normals Houston

Load & filter only Houston temperature

```{r}
data_file <- read.csv("C:/sanai_sungil/posts/vis/ncdc_normals.csv")
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")

houston <- data.frame(station_id = c("USW00012918"), location = c("Houston"))

houston_temps <- data_file %>% inner_join(houston,by="station_id")
houston_temps %>% head()
```

### Set X scale breaks, Plot

```{r}
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")

ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(linewidth = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

Use `cowplot` package to arrange multiple plots into a grid

```{r}
library(cowplot)
```

Specify plot as a object `houston_plot`

```{r}
houston_plot <- ggplot(houston_temps, aes(x=date, y=temperature,color = location))+
  geom_line(linewidth = 1,color = "royalblue")+
  scale_x_date(name="month", 
               breaks = break_date,
               labels = c("jan", "apr", "jul", "oct", "jan"))+
  theme_light()+
  ylab("Temperature(℉)")
```

### arrange multiple plots into a grid

```{r}
plot_ab <- plot_grid(houston_plot,houston_plot,
                    nrow = 1,
                    rel_widths = c(1,2),
                    labels = c("a","b"))

plot_abc <- plot_grid(plot_ab, houston_plot,
                      ncol = 1,
                      rel_heights = c(1.5,2),
                      labels = c("","c"))

plot_abc
```

## Texas counties

Texas counties by land area, population, and population density

```{r}
texas_cnt <- read.csv("https://raw.githubusercontent.com/christianmendoza/texas-counties/main/data/texas-counties.csv")
texas_cnt %>% head()
```

Select county, population columns

remove "county" word in county columns ex) "sungil county" -\> "sungil"

calculate popratio = population/ meadian of total population

list in order of highest population

Create an index column with a number, Add labels to the top 3, bottom 3, and randomly determined values

`runif(x)` Outputs a random number between 0 and 1

```{r}
tx_counties <- texas_cnt %>% 
  select(county,population) %>% 
  mutate(county = gsub("county","",county),
         popratio = population/median(population)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),
         label = ifelse(index<=3|index>n()-3|runif(n())<.04, county, ""))

tx_counties %>% head()
```

ggrepel provides geoms for ggplot2 to repel overlapping text labels

```{r}
library(ggrepel)
```

### point plot, overlapped text label

```{r}
ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 0, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
  
```

### Point plot, y log scale

There are two main reasons to use logarithmic scales in charts and graphs. The first is to respond to skewness towards large values; i.e., cases in which one or a few points are much larger than the bulk of the data. The second is to show percent change or multiplicative factors.

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(tx_counties,aes(x=index,y=popratio))+
  geom_hline(yintercept = 1, linetype = 2, color = "grey40")+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "popnumber/median",
                breaks = 10^(-2:2),
                labels = label_log10)+
  scale_x_continuous(name = "Texas counties",
                     breaks = NULL)+
  theme_light()+
  theme(panel.border = element_blank())
```

## 시군구 인구수 2023년 2월

```{r}
data_pop <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/%ED%96%89%EC%A0%95%EA%B5%AC%EC%97%AD_%EC%8B%9C%EA%B5%B0%EA%B5%AC_%EB%B3%84_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%84%B8%EB%8C%80%EC%88%98_202302.csv",encoding = "utf-8")

data_pop %>% head()

```

Same process

```{r}
data_202302 <- data_pop %>% 
  filter(X2023.02>0) %>%  
  select(행정구역.시군구.별,X2023.02) %>%
  mutate(popratio = X2023.02/median(X2023.02)) %>% 
  arrange(desc(popratio)) %>% 
  mutate(index = 1:n(),label = ifelse(index<=3|index>n()-3|runif(n())<.04, 행정구역.시군구.별, ""))
```

```{r}
data_202302 %>% head()
```

### Point plot

```{r}
ggplot(data_202302,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  theme_light()+
  theme(panel.border = element_blank())
```

### Point plot, y log scale

```{r}
label_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))

ggplot(data_202302,aes(x=index,y=popratio))+
  geom_point(size = 1, color = "royalblue")+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)+
  scale_y_log10(name = "인구수/중위수",
                breaks = 10^(-2:2),
                labels = label_log10,
                limits = c(10^-1.3,10^1.3))+
  theme_light()+
  theme(panel.border = element_blank())+
  scale_x_continuous(name = "행정구역 (시군구)별 주민등록세대수",
                     breaks = NULL)
```

\## RColorBrewer

```{r}
library(colorspace)
RColorBrewer::display.brewer.all()
```

## US census , US regions

US_census is dataset of population per region, age, human race

US_region is dataset of State informations

Load data

```{r}
US_census <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_census.csv")

US_regions <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_regions.csv")
```

Join & group by State

summaise 2000 population, 2010 population, population growth, total area size

```{r}
popgrowth_df <- US_census %>% left_join(US_regions) %>% 
  group_by(region,division,state) %>% 
  summarize(pop2000 = sum(pop2000, na.rm = TRUE),
            pop2010 = sum(pop2010, na.rm = TRUE),
            popgrowth = (pop2010-pop2000)/pop2000,
            area = sum(area)) %>% 
  arrange(popgrowth) %>% 
  ungroup() %>%
  mutate(state = factor(state,levels = state),
         region = factor(region, levels = c("West","South","Midwest","Northeast")))
```

```{r}
popgrowth_df %>% head()
```

### Plot with color

Set Colorspace

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
state_colors <- region_colors[as.numeric(popgrowth_df$region)]
state_colors_dark = colorspace::darken(state_colors,0.4)

ggplot(popgrowth_df,aes(x = state, y = 100*popgrowth, fill = region))+
  geom_col()+
  scale_y_continuous(name = "population growth, 2000 to 2010",
                     labels = scales::percent_format(scale = 1),
                     expand = c(0,0))+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size=10,color = state_colors),
        legend.position = c(.6,.5),
        legend.background = element_rect(fill="#FFFFFFb0"))
```

### Plot lighten

highlightinh Texas, Louisiana, NA

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)

popgrowth_df_2 <- popgrowth_df %>% 
  mutate(region_highlight = ifelse(state %in% c("Texas","Louisiana"), NA, region %>% paste()))
popgrowth_df_2 %>% head()

ggplot(popgrowth_df_2, aes(x = state, y= 100*popgrowth, fill = region_highlight))+
  geom_col()+
  scale_y_continuous(name = "Population growth, 2000to 2010",
                     labels = scales::percent_format(scale=1),
                     expand = c(0,0))+
  scale_fill_manual(values = region_colors,
                    breaks = c("West","South","Midwest","Northeast"),
                    na.value = "#56B4E9")+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size=10),
        legend.position = c(.58,.68),
        legend.background = element_rect(fill="#FFFFFFb0"))
```

## 2022 02 주민등록인구 및 세대 현황

Load & change type

```{r}
kor_202202 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202202_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9.csv")

kor_202202 %>% head()
kor_202202 %>% sapply(class)
kor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format() #numeric to string
```

filter 서울, 대전 ,대구, 부산

```{r}
kor_202202_use <- kor_202202 %>% 
  filter(substr(행정구역,1,2) %in% c("서울","대전","대구","부산")) %>% 
  filter(substr(행정구역_코드,3,4)!="00") %>% 
  select(행정구역,총인구수) %>% 
  arrange(총인구수)
```

```{r}
kor_202202_use$시도 = sapply(kor_202202_use$행정구역,
                           function(x) strsplit(x, " ")[[1]][1])
kor_202202_use$시도 = factor(kor_202202_use$시도,
                           levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))

#kor_202202_use %>% View()
```

```{r}
kor_202202_use %>% head()
kor_202202_use %>% summary()
```

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
region_colors_2 <- RColorBrewer::brewer.pal(4,"Set2")
```

### Plot with colors, Korea

```{r}
ggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors_2)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```

### Highlight Daejeon (1)

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)
region_colors[2] <- "#56b4e9" %>% darken(0.3)

ggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors)+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
```

### Highlight Daejeon (2)

```{r}
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442") %>% 
  lighten(0.4) %>% desaturate(0.8)

kor_202202_use_2 <- kor_202202_use %>% mutate(region_highlight = ifelse(시도 %in% c("대전광역시"),NA,시도 %>% paste()))



ggplot(kor_202202_use_2,aes(x = reorder(행정구역,총인구수),y= 총인구수, fill = region_highlight))+
  geom_col()+
  scale_y_continuous(name = "총인구수, 2022년 2월",
                     expand = c(0,0),
                     labels = scales::comma)+
  scale_fill_manual(values = region_colors,
                    breaks = c("서울특별시","대전광역시","대구광역시","부산광역시"),
                    na.value = "#56B4E9")+
  coord_flip()+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.y = element_blank())+
  theme(axis.title.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.length = unit(0,"pt"),
        axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0")
        )
```

## Random p-value

```{r}
set.seed(100)
df <- data.frame(p = runif(1000)) %>% 
  mutate(idx = 1:n(),
         p_log10 = -log10(p))

df <- df %>% 
  arrange(p) %>%
  mutate(idx_2 = 1:n(),
         label = ifelse(idx_2<=3,p,""))


ggplot(df, aes(x=idx, y=p_log10)) +
  geom_point(color = "darkblue") +
  geom_hline(yintercept = -log10(0.05),
             linetype = 2,
             linewidth = 0.8,
             color = "darkred") +
  scale_y_continuous(name = expression(-log[10](italic(p)))) +
  scale_x_continuous(name = "",
                     breaks = NULL) +
  theme_minimal()+
  geom_text_repel(aes(label = label),
                  min.segment.length = 0,
                  max.overlaps = 100)
```

## Visualizing amounts: 수량 데이터의 시각화

```{r}
boxoffice <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/boxoffice.csv")

boxoffice %>% ggplot(aes(x=fct_reorder(title,rank),y=amount))+
  geom_col(fill="#56b4e9",width = 0.6,alpha = 0.9)+
  scale_y_continuous(expand = c(0,0),
                     breaks = c(0,2e7,4e7,6e7),
                     labels = c(0,20,40,60),
                     name = "Weekend gross(million USD)")+
  xlab("")+
  theme_minimal()+
  theme(
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.text.x = element_text(angle=45,hjust = 1)
  )+
  coord_flip()
```

```{r}
kobis <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/KOBIS_%EC%8B%A4%EC%8B%9C%EA%B0%84_%EC%98%88%EB%A7%A4%EC%9C%A8_2023-04-26.csv")

kobis %>% filter(누적매출액>0) %>% head(5) %>% 
  ggplot(aes(x=reorder(영화명,-예매매출액),y=예매매출액))+
  geom_col(fill="#56b4e9",width = 0.6,alpha = 0.9)+
  scale_y_continuous(expand = c(0,0),
                     breaks = c(0,5e8,1e9,1.5e9),
                     labels = c(0,5,10,15),
                     name = "에매매출액(억원)")+
  xlab("")+
  theme_minimal()+
  theme(
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank())
```

```{r}
income_by_age <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/income_by_age.csv")

income_by_age <- income_by_age %>% 
  mutate(age = age %>% factor(levels = c("15 to 24",
                                         "25 to 34",
                                         "35 to 44",
                                         "45 to 54",
                                         "55 to 64",
                                         "65 to 74",
                                         "> 74")))
income_df <- income_by_age %>% 
  filter(race %in% c("white","asian","black","hispanic")) %>% 
  mutate(race = fct_relevel(race,c("asian","white","hispanic","black")),
         race = fct_recode(race,"Asian"="asian","Hispanic"="hispanic"),
         age = fct_recode(age,">= 75" = "> 74"))

colors_four <- RColorBrewer::brewer.pal(5,"PuBu")[5:2]

income_df %>% ggplot(aes(x=age,y=median_income,fill=race))+
  geom_col(position = "dodge",alpha = 0.9)+
  scale_fill_manual(values = colors_four,name=NULL)+
  xlab("age (years)")+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()
```

```{r}
colors_seven <- RColorBrewer::brewer.pal(8,"PuBu")[2:8]

income_df %>% ggplot(aes(x=race,y=median_income,fill=age))+
  geom_col(position = "dodge",alpha=0.9)+
  scale_fill_manual(values = colors_seven,name=NULL)+
  xlab(NULL)+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()
```

```{r}
income_df %>% ggplot(aes(x=age,y=median_income))+
  geom_col(fill = "#56b4e9",alpha = 0.9)+
  xlab("age (years)")+
  scale_y_continuous(expand = c(0,0),
                     name = "Median income (USD)",
                     breaks = c(seq(0,100,20)*1000),
                     labels = c(seq(0,100,20)*1000) %>% paste())+
  theme_minimal()+
  theme(panel.grid.major.x = element_blank(),
        axis.ticks.x = element_blank())+
  facet_wrap(~race, scales ="free_x")
```

## Dot plot & Heatmap

important limitation of bars is that they need to start at zero, so that the bar length is proportional to the amount shown.

막대는 금액을 시각화하는 유일한 옵션이 아닙니다. 막대의 한 가지 중요한 제한 사항은 막대 길이가 표시된 양에 비례하도록 0에서 시작해야 한다는 것입니다. 일부 데이터 세트의 경우 이는 비실용적이거나 주요 기능을 모호하게 할 수 있습니다. 이 경우 x 축 또는 y 축을 따라 적절한 위치에 점을 배치하여 금액을 표시할 수 있습니다.

### Dot plot(gapminder)

```{r}
library(gapminder)

df_america <- gapminder %>% filter(year == 2007,continent == "Americas")

df_america %>% ggplot(aes(x=lifeExp,y=reorder(country,lifeExp)))+
  geom_point(color = "#0073b2",size = 3)+
  scale_x_continuous(
    name = "Life expectancy(years)",
    limits = c(59,82),
    expand = c(0,0))+
  scale_y_discrete(name = NULL,expand = c(0,0.5))+
  theme_minimal()+
  theme(plot.margin = margin(18,6,3,1.5))
```

### Dot plot(SW기술자 평균연봉)

```{r}
data_sw_raw <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/SW%EA%B8%B0%EC%88%A0%EC%9E%90_%ED%8F%89%EA%B7%A0%EC%9E%84%EA%B8%88_20220412145301.csv")

data_sw_21 <- data_sw_raw %>% 
  select(직무별,X2021) %>% 
  drop_na()

data_sw_21 %>% ggplot(aes(x=X2021,y=reorder(직무별,X2021)))+
  geom_point(color = "#0073b2",size = 3)+
  scale_x_continuous(
    name = "평균임금",
    limits = c(14.6e4,65e4),
    expand = c(0,0),
    labels = format(seq(2,6,1)*1e5,big.mark = ",",scientific = FALSE))+
  scale_y_discrete(name = NULL,expand = c(0,0.5))+
  theme_minimal()+
  theme(plot.margin = margin(18,6,3,1.5))
```

### Tile plot(internet prevalce)

```{r}
internet <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets_2/main/internet.csv')

country_list <- c("United States","China","India","Japan","Algeria","Brazil","Germany","France","United Kingdom","Italy","New Zealand","Canada","Mexico","Chile","Argentina","Norway","South Africa","Kenya","Israel","Iceland")

internet_short <- internet %>% 
  filter(country %in% country_list) %>% 
  mutate(users = ifelse(is.na(users),0,users))
  
internet_summary <- internet_short %>% 
  filter(year == 2016) %>% 
  arrange(users)

internet_short <- internet_short %>% 
  filter(year > 1993) %>% 
  mutate(country = factor(country,levels = internet_summary$country))

internet_short %>% ggplot(aes(x=year,y=country,fill=users))+
  geom_tile(color = "white",linewidth = 0.25)+
  scale_fill_viridis_c(
    option = "A", begin = 0.05, end = 0.98,
    limits = c(0,100), name = "Internet users / 100 people",
    guide = guide_colorbar(
      direction = "horizontal",
      label.position = "bottom",
      title.position = "top",
      ticks = FALSE,
      barwidth = grid::unit(3.5,"in"),
      barheight = grid::unit(0.2,"in")))+
  scale_x_continuous(expand = c(0,0),name = NULL)+
  scale_y_discrete(name = NULL,position = "right")+
  theme_minimal()+
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.title.align = 0.5,
    legend.title = element_text(size = 10))
```

### Tile plot(연령집단별 자살률)

```{r}
data_rate_raw <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/%EC%97%B0%EB%A0%B9%EC%A7%91%EB%8B%A8%EB%B3%84_%EC%9E%90%EC%82%B4%EB%A5%A0.csv")

data_rate_melt <- data_rate_raw %>% 
  reshape2::melt(id.vars = c("연령집단"),
                 variable.name = "년도",
                 value.name = "자살률") %>% 
  mutate(년도 = gsub("\\D","",년도) %>% as.integer())

data_rate_melt %>% ggplot(aes(x=년도,y=연령집단,fill=자살률))+
  geom_tile(color = "white",linewidth = 0.25)+
  scale_fill_viridis_c(
    option = "A", begin = 0.05, end = 0.98,
    limits = c(0,130), name = "연령집단(인구 십만 명당)",
    guide = guide_colorbar(
      direction = "horizontal",
      label.position = "bottom",
      title.position = "top",
      ticks = FALSE,
      barwidth = grid::unit(3.5,"in"),
      barheight = grid::unit(0.2,"in")))+
  scale_x_continuous(expand = c(0,0),name = NULL)+
  scale_y_discrete(name = NULL,position = "right")+
  theme_minimal()+
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.title.align = 0.5,
    legend.title = element_text(size = 10))
```

## Histogram & Density plot

### Single Distribution

```{r}
titanic_all <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/titanic_all.csv")

titanic_all <- titanic_all %>% 
  mutate(sex = factor(sex,levels = c("male","female"))) 

titanic_all %>% 
  filter(!is.na(age)) %>% 
  ggplot(aes(x=age))+
  geom_histogram(breaks = seq(0,75,5),
                 color = "white",
                 fill="#56b4e9")+
  scale_y_continuous(expand = c(0,0),
                     breaks = 25*(0:5))+
  scale_x_continuous(expand = c(0,0),
                     limits = c(0,75),
                     name = "age (years)")+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line.x = element_blank(),
        plot.margin = margin(3,7,3,1.5))

```

```{r}
titanic_all %>% ggplot(aes(x=age))+
  geom_density(fill = "#56b4e9",
               color = "#01587a",
               bw=2,
               kernel = "gaussian")
```

### Multiple Distributions

```{r}
titanic_all %>% ggplot(aes(x=age,
                       y=after_stat(count),
                       fill=sex))+
  geom_density(bw=2,
               kernel="gaussian",
               alpha=0.5)+
  scale_y_continuous(expand = c(0,0),
                     name = "Scaled Density")+
  scale_x_continuous(name = "Age (years)",
                     limits = c(0,75),
                     expand = c(0,0))+
  scale_fill_manual(values = c("#0072b2","#d55e00"),
                    name = "Gender")+
  scale_color_manual(values = colorspace::darken(c("#0072b2","#d55e00"),0.5),
                     name = "Gender")+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = c(0.8,0.8),
        plot.margin = margin(3,7,3,1.5))
```

```{r}
titanic_all %>% ggplot(aes(x=age,
                       y=after_stat(count)))+
  geom_density(data = select(titanic_all,-sex),
               aes(fill="all passengers"),
               color = "transparent")+
  geom_density(aes(fill=sex),bw=2,color="transparent")+
  facet_wrap(~sex)+
  scale_y_continuous(expand = c(0,0),
                     name = "Scaled Density")+
  scale_x_continuous(name = "Age (years)",
                     limits = c(0,75),
                     expand = c(0,0))+
  scale_fill_manual(
    values = c("#b3b3b3a0","#d55e00","#0072b2"),
    breaks = c("all passengers","male","female"),
    labels = c("all passengers","males","females"),
    name = NULL,
    guide = guide_legend(direction = "horizontal"))+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "bottom",
        strip.background = element_rect(fill="white"),
        strip.text.x = element_text(colour = "black"))
```

```{r}
gender_counts <- data.frame(
  age = (1:25)*3 - 1.5,
  male = hist(filter(titanic_all,sex == "male")$age,
              breaks = (0:25)*3+0.01,
              plot = FALSE)$counts,
  female = hist(filter(titanic_all,sex == "female")$age,
              breaks = (0:25)*3+0.01,
              plot = FALSE)$counts) %>% 
  reshape2::melt("age", 
                 variable.name = "gender",
                 value.name = "count")

gender_counts %>% ggplot(aes(x=age,
                             y=ifelse(gender=="male",-1,1)*count,
                             fill=gender))+
  geom_col()+
  scale_x_continuous(name = "Age (years)",
                     limits = c(0,75),
                     expand = c(0,0))+
  scale_y_continuous(name = "Count",
                     breaks = 20*(-2:1),
                     labels = c('40','20','0','20'))+
  scale_fill_manual(values = c("#d55e00","#0072b2"),
                    guide = "none")+
  coord_flip()+
  cowplot::draw_text(x = 70, y = -39, "Male",hjust = 0)+
  cowplot::draw_text(x = 70, y = 21, "Female",hjust = 0)+
  theme_light()+
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_text(hjust = 0.61))
```

```{r}
iris %>% ggplot(aes(x=Sepal.Length, color = Species, fill=Species))+
  geom_density(alpha = 0.3)+
  xlab("Sepal Length (cm)")+
  ylab("Density")+
  ggtitle("Iris Density Plot")+
  theme_minimal()+
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = c(.82,.78))
```

```{r}
data_age_raw <- read.csv("C:/trainsets_2/행정안전부_지역별(법정동) 성별 연령별 주민등록 인구수_20230430.csv",fileEncoding = "CP949")

data_age_raw$법정동코드 <- data_age_raw$법정동코드 %>% as.character()
measure_col <- names(data_age_raw)[10:ncol(data_age_raw)]

data_age_melt <- data_age_raw %>% 
  select(-기준연월,-(시군구명:여자)) %>% 
  filter(시도명=="대전광역시") %>% 
  reshape2::melt(id.vars = c("법정동코드","시도명"),
                 measure.vars = measure_col,
                 variable.name = "나이_성별",
                 value.name = "인구수") %>% 
  mutate(나이_성별 = as.character(나이_성별))

data_age_melt <- data_age_melt %>% 
  mutate(age = gsub('\\D','',나이_성별) %>% as.integer(),
         sex = substring(나이_성별,nchar(나이_성별)-1,nchar(나이_성별)))

age_len <- 5
data_age_cat <- data_age_melt %>% 
  mutate(age_cat = cut(age+0.1,breaks = seq(0,120,age_len),
                       labels = F)) %>% 
  group_by(age_cat) %>% 
  summarize(count = sum(인구수))

data_age_cat$age_cat <- age_len*(data_age_cat$age_cat-1)+age_len/2 
```

```{r}
data_age_cat %>% ggplot(aes(x=age_cat,y=count/1000))+
  geom_col(fill="#56b4e9")+
  scale_y_continuous(expand = c(0,0),name = "인구 (천)")+
  scale_x_continuous(expand = c(0,0),name = "연령 (세)")+
  theme_minimal()+
  theme(panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line.x = element_blank(),
        plot.margin = margin(3,7,3,1.5))
```

```{r}
data_age_cat %>% ggplot(aes(x=age_cat,weight = count))+
  geom_density(fill="#56b4e9",bw=3)+
  scale_y_continuous(expand = c(0,0),name = "인구 (밀도)")+
  scale_x_continuous(expand = c(0,0),name = "연령 (세)")+
  theme_minimal()+
  theme(panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line.x = element_blank(),
        plot.margin = margin(3,7,3,1.5))
```

## Visualizing distributions

Empirical cumulative distribution functions, and Q-Q plots

```{r}
set.seed(4211)
points <- round(c(rnorm(47,mean=82,sd=10),45,51,67))
points[points>100] <- 100
student_data <- data.frame(points,rank=rank(points,ties.method = "random"))

student_data %>% ggplot(aes(x=points,y=50*after_stat(y)))+
  stat_ecdf(geom = "step",color="#0072b2")+
  geom_point(aes(y=rank),color = "#0072b2")+
  scale_x_continuous(limits = c(40,102),
                     expand = c(0,0),
                     breaks = 10*(4:10))+
  scale_y_continuous(limits = c(-5,55),
                     expand = c(0,0),
                     name="Student Rank (ascending)")+
  theme_minimal()
```

### Figure 9.3

```{r}
library(ggridges)
data(lincoln_weather)
lincoln_weather %>% sapply (class)

lincoln_df <- lincoln_weather %>%
  mutate(month_short = fct_recode(
    Month,
    Jan = "January",
    Feb = "February",
    Mar = "March",
    Apr = "April",
    May = "May",
    Jun = "June",
    Jul = "July",
    Aug = "August",
    Sep = "September",
    Oct = "October",
    Nov = "November",
    Dec = "December")) %>%
      mutate (month_short = fct_rev (month_short))

lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
  geom_boxplot(fill = "grey90")+
  xlab("month")+
  ylab("Mean Temperature [F]")+
  theme_classic()
```

```{r}
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
  geom_violin(fill = "grey90")+
  xlab("month")+
  ylab("Mean Temperature [F]")+
  theme_classic()

lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
  geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
  xlab("month")+
  ylab("Mean Temperature [F]")+
  theme_classic()

lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
  geom_violin(color = "transparent",fill = "grey90")+
  geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
  xlab("month")+
  ylab("Mean Temperature [F]")+
  theme_classic()
```

### Figure 9.9

```{r}
ggplot(lincoln_df, aes(x = `Mean Temperature [F]`, y = `Month`)) + 
  geom_density_ridges (
    scale = 3, 
    rel_min_height = 0.01,
    bandwidth = 3.4, 
    fill="skyblue", 
    color="white") +
  scale_x_continuous (
  name = "mean temperature (°F)",
  expand = c(0, 0), breaks = c(0, 25, 50, 75)) + 
  scale_y_discrete (name= NULL) +
  theme_minimal() +
  theme (
  axis.text.y = element_text(vjust = 0),
  plot.margin = margin (3, 7, 3, 1.5))
```

### Figure 9.11

```{r}
movie_length <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/movie_lengths.csv")



movie_length %>% ggplot(aes(x = length, y = year, group = year)) +
  geom_density_ridges (scale = 10, size = 0.25, rel_min_height = 0.03, 
                       fill = "grey85", na.rm = TRUE) +
  scale_x_continuous (limits = c(0, 200), expand = c(0, 0), name = "length (minutes)") + 
  scale_y_reverse(
    breaks = c(2000, 1980, 1960, 1940, 1920),
    limits = c(2005, 1903), expand = c(0, 0)) +
  theme_light() +
  theme (
    panel.border = element_blank(),
    plot.margin = margin (3, 14, 3, 1.5))
```

### Figure 9.12

```{r}


### Figure 9.12 - data
all_house_88_113 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/all_house_88_113.csv")

all_house_88_113 %>% ggplot(aes(x = dim_1,
                                y = year1,
                                group = interaction(party_code, factor(year1)), 
                                fill = interaction (party_code, factor (year1))))+
  geom_density_ridges (scale = 5, size = 0.25, rel_min_height = 0.01, 
                       alpha=0.9, color = "white") +
  scale_x_continuous (name = "DW-NOMINATE score", 
                      limits = c(-.8, 1.3),
                      breaks = seq(-1, 1, 0.25)) +
  scale_y_reverse(name = "year",
                  expand = c(0, 0), 
                  breaks = c(seq(2013, 1963, -10))) + 
  scale_fill_cyclical(
    breaks = c("100.1963", "200.1963"),
    labels = c(`100.1963` = "Democrats", `200.1963` = "Republicans"), 
    values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
    name = NULL,
    guide = "legend") + 
  theme_light() +
  theme (panel.border = element_blank(), 
         axis.text.y = element_text(vjust = 0),
         legend.position = c(1, 1),
         legend.justification = c(1, 1),
         legend.direction = "horizontal",
         legend.background = element_rect (fill = "white"))
```

## 국내 기온

```{r}
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")

air$일시 <- lubridate::ymd(air$일시)
air$월 <- lubridate::month(air$일시,label = T)
air %>% head()

air_dj <- air %>% filter(지점명=="대전")

air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
  geom_boxplot(fill = "grey90")+
  xlab("월")+
  ylab("평균기온")+
  theme_classic()

air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
  geom_violin(fill = "grey90")+
  xlab("월")+
  ylab("평균기온")+
  theme_classic()

air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
  geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
  xlab("월")+
  ylab("평균기온")+
  theme_classic()

air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
  geom_violin(color="transparent",fill = "grey90")+
  geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
  xlab("월")+
  ylab("평균기온")+
  theme_classic()

air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월 %>% fct_rev())) + 
  geom_density_ridges (
    scale = 3, 
    rel_min_height = 0.01,
    bandwidth = 3.4, 
    fill="skyblue", 
    color="white") +
  scale_x_continuous (
  name = "평균기온",
  expand = c(0, 0), breaks = c(0, 25, 50, 75)) + 
  scale_y_discrete(name = "월")+
  theme_minimal() +
  theme (
  axis.text.y = element_text(vjust = 0),
  plot.margin = margin (3, 7, 3, 1.5))

```

```{r}
air_dj_jj <- air %>% filter(지점명 %in% c("대전","제주"))

air_dj_jj %>% ggplot(aes(x = `평균기온..C.`,
                                y = 월 %>% fct_rev(),
                                group = interaction(지점명, factor(월)), 
                                fill = interaction (지점명, factor(월))))+
  geom_density_ridges (rel_min_height = 0.01, 
                       alpha=0.9, color = "white") +
  scale_x_continuous (name = "평균기온") +
  scale_y_discrete(name = "월") + 
  scale_fill_cyclical(
    breaks = c("대전.1", "제주.1"),
    labels = c(`대전.1` = "대전", `제주.1` = "제주"), 
    values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
    name = NULL,
    guide = "legend") + 
  theme_light() +
  theme (panel.border = element_blank(), 
         axis.text.y = element_text(vjust = 0),
         legend.position = c(1, 1),
         legend.justification = c(1, 1),
         legend.direction = "horizontal",
         legend.background = element_rect (fill = "white"))
```





