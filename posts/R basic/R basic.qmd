---
title: "R basics"
author: "Sungil Park"
date: "2023/04/11"
description: "R basics"
category: R
image: "../../img/rkid.png"
---

R basics

## 데이터 로드

```{r}
employtable <- read.csv("https://gist.githubusercontent.com/kevin336/acbb2271e66c10a5b73aacf82ca82784/raw/e38afe62e088394d61ed30884dd50a6826eee0a8/employees.csv")

head(employtable)
```

## 차원 확인 `dim()`

```{r}
dim(employtable)
```

## 행 개수 `nrow()`

```{r}
nrow(employtable)
```

## 열 개수 `ncol()`

```{r}
ncol(employtable)
```

## 기초통계량

```{r}
summary(employtable)
```

## 원하는 컬럼(열) 뽑기 `$` 기호 사용

```{r}
employtable$EMAIL
```

## 인덱싱 `df[행,열]`

R에서 데이터의 일부분을 선택/선별하는 작업을 Indexing 한다고 합니다.

R로 데이터 전처리, 분석을 하다보면 R Indexing을 부지기수로 사용하게 되니 R Indexing은 제대로 알고 넘어가야할 매우 중요한 부분입니다.

특히, R에서는 벡터 Indexing 후 연산하는게 매우 큰 강점이고 유용한 기능이랍니다. \### 파이썬과 달리 1부터 시작 \### 행 인덱싱

```{r}
employtable[1,]
```

```{r}
employtable[1:5,]
```

### 열 인덱싱

```{r}
employtable[,2]
```

```{r}
employtable[,1:5]
```

### 벡터 넣어도 됨

```{r}
employtable[,c(2,3,5)]
```

### 행, 열 인덱싱

```{r}
employtable[1:5,c(2,3,5)]
```

## Employtable의 JOB_ID 종류 확인 `unique()`

```{r}
unique(employtable$JOB_ID)
```

## 기존 데이터로 새로운 열 만들기

### 문자열

first_name, last_name 를 합치기

문자열을 합칠때는 `paste()` 사용

```{r}
employtable_2 = employtable

employtable_2$FULL_NAME <- paste(employtable_2$FIRST_NAME,employtable_2$LAST_NAME)
head(employtable_2)
```

### 숫자

예시 데이터

```{r}
name <- c("david","johns","yoon","michael")
math <- c(90,85,70,80)
art <- c(60,70,80,90)

ex <- data.frame(name,math,art)
ex
```

```{r}
ex$Total <- ex$math + ex$art
ex
```

## 조건에 맞는 데이터 추출

JOB_ID가 ST_CLERK인 행 추출

1.  조건을 치면 불리언 타입으로 추출됨

```{r}
employtable$JOB_ID == "ST_CLERK"
```

2.  인덱싱

```{r}
employtable[employtable$JOB_ID == "ST_CLERK",]
```

SALARY가 5000 이상인 행 추출

```{r}
employtable[employtable$SALARY > 5000,]
```

## 조건에 맞는 데이터 추출(2)

# dplyr 패키지 사용

R의 기본적인 data.frame에서 자료를 조건에 따라 선택하고, 배열하고, 결합하고, 요약하는데 편리한 함수을 제공하는 패키지이다.

### 설치, 적용

```{r}
#install.packages("dplyr")   설치는 한번만
library(dplyr)
```

## 파이프 연산자

파이프 연산자는 이름 그대로 어떤 값들이 파이프를 통과하는 것처럼 함수와 함수들을 타고다닐 수 있게 해줍니다.

가독성이 좋음

단축키 `ctrl + shift + M`

```{r}
#head(employtable) 과 동일
employtable %>% head()
```

## 조건에 맞는 열 추출

`filter()` 사용

```{r}
head(filter(employtable,JOB_ID == "ST_CLERK"))

employtable %>% filter(JOB_ID == "ST_CLERK") %>% head()
```

```{r}
filter(employtable,SALARY > 5000) %>% head()
```

## 정렬

`arrange()` 사용

SALARY 순으로 정렬

```{r}
head(arrange(employtable,SALARY))

employtable %>% arrange(SALARY) %>% head()
```

역순으로 할때는 `desc()` 사용

```{r}
head(arrange(employtable,desc(SALARY)))

employtable %>% arrange(desc(SALARY)) %>% head()
```

1.  인덱싱
2.  조건에 맞는 데이터 추출
3.  파이프 연산자에 익숙해지기

# 사망사고 데이터

다음은 2021년 일년동안 전국에서 사망사고가 발생한 교통사고 데이터입니다.

## 가) 작업경로 확인 및 불러오기

```{r}
library(dplyr)
acc_death = read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/acc_death.csv")
acc_death %>% head()
```

## 나) 데이터 확인

### a. 데이터의 상위6개, 하위 6개 관측치를 미리보기 하시오

```{r}
acc_death %>% head(6)
acc_death %>% tail(6)
```

### b. 데이터 구조, 변수개수, 변수 명, 관측치 개수를 학인하시오

```{r}
acc_death %>% str()
```

### c. 데이터 객체의 차원(행, 열) 을 확인하시오

```{r}
acc_death %>% dim()
```

## 다) 데이터 전처리

"발생년월일시" 열을 활용하여 년월일"yyyymmdd" (numeric) 와 시분"hhmm" (numeric) 을 나타내는 새로운 열을 추가하시오

```{r}
acc_death$yyyymmdd <- acc_death$발생년월일시 %>% 
  as.POSIXct() %>% 
  as.character("%Y%m%d") %>% 
  as.numeric()


acc_death$hhmm <- acc_death$발생년월일시 %>% 
  as.POSIXct(format = "%Y-%m-%d %H:%M") %>% 
  as.character("%H%M") %>% 
  as.numeric()
```

```{r}
acc_death %>% str()
```

## 라) 데이터 분석

### a. 2021년에 "사망자수", "부상자수", "중상자수", "경상자수", "부상신고자수" 각 열의 총 합을 계산하시오

```{r}
lapply(acc_death[,5:9],sum)
```

### b. 사망사고가 가장 많이 발생한 날짜는 몇월 몇일인가

```{r}
acc_death %>% group_by(yyyymmdd) %>% 
  summarize(death_count = n()) %>% 
  arrange(desc(death_count))
```

### c. 사망사고는 주간, 야간 중 언제 많이 발생하였는가

```{r}
table(acc_death$주야)
```

### d. 대전 지역의 사망사고 건수는 몇건인가

```{r}
acc_death %>% 
  filter(발생지시도=="대전") %>% 
  count()
```

### e. 발생지시도 열을 기준으로 지역별 사망사고 건수를 계산하시오, 대전은 몇 위인가

```{r}
acc_death %>% 
  group_by(발생지시도) %>% 
  summarize(death_count = n()) %>% 
  arrange(desc(death_count))
```

### f. 요일별로 사망사고 건수를 계산하시오

```{r}
acc_death$요일 %>% table()
```

### g. 월별 사망사고 건수를 계산하시오

```{r}
table(substr(acc_death$yyyymmdd,5,6))
```

### h. "사고유형"별 발생 비율을 계산하시오

```{r}
acc_death %>% group_by(사고유형) %>% 
  summarize(건수 = n()) %>% 
  mutate(비율 = 건수/sum(건수)*100)
```

### i. "도로형태"의 "교차로내" 에서 발생한 사고는 몇건인가

```{r}
acc_death %>% filter(도로형태=="교차로내") %>% count()
```

## 마) 1. 화물차

화물차는 일반승용차에 비해서 사고 발생시 사망사고를 일으킬 위험성이 큽니 다. 정부는 화물차 사고의 심각성을 깨닫고 화물차로 인한 사망사고 줄이기 캠 페인을 펼칠 예정입니다. 이에 앞서, 화물차 사망사고의 심각성을 데이터에 기 반하여 살펴보고 대책을 마련하고자 합니다. 아래에 해당되는 답을 데이터를 활용하여 찾아보세요. \### a. 화물차가 일으킨(가해자_당사자종별) 사망사고는 몇% 인가

```{r}
count(filter(acc_death,가해자_당사자종별=="화물차"))/nrow(acc_death) * 100
```

### b. 화물차가 일으킨 사망사고 중, "가해자법규위반" 별로 사고 건수를 계산하시오

```{r}
acc_death %>% 
  filter(가해자_당사자종별=="화물차") %>% 
  group_by(가해자법규위반) %>% 
  summarize(건수= n()) %>% 
  arrange(desc(건수))
```

### c. 화물차가 일으킨 사고의 시간대별 사고건수를 계산하시오

```{r}
acc_death %>% 
  filter(가해자_당사자종별=="화물차") %>% 
  group_by(hhmm) %>% 
  summarize(건수= n()) %>% 
  arrange(desc(건수))
```

### d. 화물차(가해자)와 보행자(피해자)인 사망사고 건수는 몇건인가

```{r}
acc_death %>% 
  filter(가해자_당사자종별=="화물차" & 피해자_당사자종별=="보행자") %>% 
  count()
```

## 바) 2. 이륜차

1인가구 증가와 배달문화의 확대로 이륜차 사고가 증가하고 있다. 정부에서는 이륜차 사고의 심각성을 파악하고자 한다. 아래의 물음에 답하세요. \### a. 이륜차와 연관된 사망사고는 몇건인가(가해자 or 피해자)

```{r}
acc_death %>% 
  filter(가해자_당사자종별=="이륜차"|피해자_당사자종별=="이륜차") %>% 
  count()
```

### b. 월별 이륜차 사고 건수를 계산한 뒤 그래프를 그리시오

``` plot()``{base} ```

```{r}
acc_death %>% 
  filter(가해자_당사자종별=="이륜차"|피해자_당사자종별=="이륜차") %>% 
  group_by(substr(yyyymmdd,5,6)) %>% 
  summarize(n=n()) %>% 
  plot(main = "월별 이륜차 사고 건수",
       xlab = "2021년 월",
       ylab = "이륜차 사고 건수(월별)",
       ylim = c(0,80),
       type = "o",
       col = "red")
```

`ggplot()`

```{r}
library(ggplot2)


d <- acc_death %>% 
  filter(가해자_당사자종별=="이륜차"|피해자_당사자종별=="이륜차") %>% 
  group_by(substr(yyyymmdd,5,6)) %>% 
  summarize(n=n())
 
colnames(d) <- c("month", "n")
d$month <- d$month %>% as.numeric()

d %>% ggplot(aes(month,n))+
  geom_point()+
  geom_line(color = "red")+
  scale_x_continuous(breaks = seq(1,12,1),
                     name = "2021년 월")+
  scale_y_continuous(limits = c(10,80),
                     breaks = seq(10,80,5),
                     name = "이륜차 사고 건수(월별)")+
  theme_light()+
  theme(panel.grid = element_blank())
```
