---
title: "Geocomputation with R"
description: Creative & Experimental geography
categories: R
date: 2023/03/22
date-modified: 2023/04/22
image: "geo.png"
---
```{r}
#|wattr-warning: False
```

## Packages
```{r}
library(sf)
library(raster)
library(spData)
library(spDataLarge)
```
# 벡터 데이터

R class츼 벡터 데이터와 다른 의미의, 공간 위치데이터의 점,선,면을 나타내는 데이터

```{r}
vignette(package = "sf") 
```

## World dataset from spData Package

```{r}
world %>% head()
names(world)
plot(world)
```
sp 데이터는 `st_as_sf()`로 sf 형식으로 변환

```{r}
library(sp)

world_sp = as(world, Class = "Spatial")

world_sf = st_as_sf(world_sp)
```

## Plot map

```{r}
plot(world["continent"])
```

### `st_union()` 공간정보 합치기

```{r}
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)

plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
```

### `st_centroid()`공간정보의 중심점 계산

cex : symbol size = sqrt(인구수)/1000

```{r}
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000  
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
```
### Highlight
```{r}
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
```

## Geometry types

```{r}
st_point(c(5, 2, 3, 1)) %>% plot()

multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
st_multipoint(multipoint_matrix) %>% plot()


linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
st_linestring(linestring_matrix) %>% plot()


polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
st_polygon(polygon_list) %>% plot()


polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list) %>% plot()


multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), 
                            rbind(c(1, 2), c(2, 4)))
st_multilinestring((multilinestring_list)) %>% plot()


multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
                         list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
st_multipolygon(multipolygon_list) %>% plot()


gemetrycollection_list = list(st_multipoint(multipoint_matrix),
                              st_linestring(linestring_matrix))
st_geometrycollection(gemetrycollection_list) %>% plot()
```

## Simple feature columns (sfc)

### `st_sfc()` 지리 특성을 하나의 컬럼 객체로 합침

point
```{r}
point1 = st_point(c(5, 2))
point2 = st_point(c(1, 3))
points_sfc = st_sfc(point1, point2)
points_sfc %>% plot()
```

polygon
```{r}
polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
polygon1 = st_polygon(polygon_list1)
polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
polygon2 = st_polygon(polygon_list2)
polygon_sfc = st_sfc(polygon1, polygon2)
polygon_sfc %>% plot()
```
multilinestring
```{r}
multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), 
                             rbind(c(1, 2), c(2, 4)))
multilinestring1 = st_multilinestring((multilinestring_list1))
multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)), 
                             rbind(c(1, 7), c(3, 8)))
multilinestring2 = st_multilinestring((multilinestring_list2))
multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
multilinestring_sfc %>% plot()
```
geometry
```{r}
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
```
### sfc 객체는 CRS에 대한 정보를 추가로 저장할 수 있음

CRS(coordinate reference systems, 좌표계시스템)

EPSG : European Petroleum Survey Group, 지도 투영과 datums 에 대한 좌표계 정보 데이터베이스를 제공


```{r}
st_crs(points_sfc)

points_sfc_wgs = st_sfc(point1, point2, crs = 4326)
st_crs(points_sfc_wgs)
```
## 위치데이터 + 속성데이터

`st_sf()` 를 이용하여 sfc와 class sf의 객체들을 하나로 통합할 수 있음
```{r}
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
  name = "London",
  temperature = 25,
  date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
lnd_sf
```

# Raster 데이터 


```{r}
#install.packages("rgdal") 
library(rgdal)

raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge") 
new_raster = raster(raster_filepath)

new_raster

plot(new_raster)
```
### RasterLayer class 

한개의 층

Default CRS = WGS84 (resolution scale = degrees)

8*8 Raster data
```{r}
my_raster = raster(nrows = 8, ncols = 8, res = 0.5, 
                   xmn = -2.0, xmx = 2.0, ymn = -2.0, ymx = 2.0, vals = 1:64)
nlayers(my_raster)
## plotting 
plot(my_raster)
```
### RasterBrick class

muliple layers

단일 다중 스펙트럼 위성 파일 (a single multispectral satellite file) 
```{r}
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
r_brick = brick(multi_raster_file)

nlayers(r_brick)

plot(r_brick)
```

### RasterStack class

multiple layer

메모리의 단일 다층 객체 (a single multilayer object in memory)
```{r}
raster_on_disk = raster(r_brick, layer = 1)
raster_in_memory = raster(xmn = 301905, xmx = 335745,
                          ymn = 4111245, ymx = 4154085, 
                          res = 30)
values(raster_in_memory) = sample(seq_len(ncell(raster_in_memory)))
crs(raster_in_memory) = crs(raster_on_disk) #같은 좌표 입력

r_stack = stack(raster_in_memory, raster_on_disk)
r_stack

plot(r_stack)
```

## CRS
지리좌표계

- 위,경도

- 각도로거리 측정

투영좌표계

- "평평한 표면"위의 데카르트 좌표 기반

- 원점, x,y축

- m와 같은 선형 측정 단위






