[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sungil_Park",
    "section": "",
    "text": "Hello, I am Park Sung-il, majoring in Big-data application and Statistics at Hannam University in South Korea.\n\n\nThis is a quarto blog created with Rstudio.\n\n\nCreated for publishing my project and records about me.\n\n\nSoftware Environments\n\nR 4.2.3\nPython 3.11.2\n\n\n\nHardware Environments\n\nSamsung Galaxybook 2 pro 360 i7\nDesktop\n\nRyzen 5600X\nRadeon RX570\nG.SKILL DDR4 8G 25600 CL16 *2"
  },
  {
    "objectID": "posts/datamining/datamining.html",
    "href": "posts/datamining/datamining.html",
    "title": "Datamining",
    "section": "",
    "text": "import pandas as pd\npd.__version__\n\n'1.5.3'\n\n\n\ns2 = pd.Series([68, 83, 112, 68], index=[\"alice\", \"bob\", \"charles\", \"darwin\"])\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n\ns2['bob']\n\n83\n\n\npandas can draw plot\n\nimport matplotlib.pyplot as plt\ntemperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5]\ns7 = pd.Series(temperatures, name=\"Temperature\")\ns7.plot()\nplt.show()\n\n\n\nplt.clf()\n\n\ndates = pd.date_range('2016/10/29 5:30pm', periods = 12, freq=\"H\")\ndates\n\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n\npd.date_range('2020-10-07', '2020-10-20', freq='3D')\n\nDatetimeIndex(['2020-10-07', '2020-10-10', '2020-10-13', '2020-10-16',\n               '2020-10-19'],\n              dtype='datetime64[ns]', freq='3D')\n\n\n\ntemp_series = pd.Series(temperatures, dates)\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\ntemp_series.plot(kind=\"bar\")\n\nplt.grid(True)\nplt.show()\n\n\n\n\n리샘플링\n\ntemp_series_freq_2H = temp_series.resample(\"2H\")\ntemp_series_freq_2H\n\n<pandas.core.resample.DatetimeIndexResampler object at 0x0000019738B92050>\n\ntemp_series_freq_2H = temp_series.resample(\"2H\").mean()\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n업생플링& 보간\n\ntemp_series_freq_15min = temp_series.resample(\"15Min\").mean()\ntemp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다\n\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n\n\n\ntemp_series.plot(label=\"Period: 1 hour\")\ntemp_series_freq_15min.plot(label=\"Period: 15 minutes\")\nplt.legend()\nplt.show()\n\n\n\nplt.clf()"
  },
  {
    "objectID": "posts/detect_line/detect_line.html",
    "href": "posts/detect_line/detect_line.html",
    "title": "Traffic line detection using CV2",
    "section": "",
    "text": "1.주제 선정\n주제는 ’CV2 활용 차선 탐지’로 최근 자율주행 자동차의 눈이 되는 부분을 이미지분석 수업과정으로 배운 CV2를 활용해 구현할 수 있어 선정하였다.\n\n\n2.이미지 로드 전처리\n프로젝트에 사용한 이미지는 인천대교를 건너는 자동차의 블랙박스 영상이다.\n\n2-1. 원근변환\n\n적색 네 점을 위에서 본 시점으로 변환한다.\ngetPerspectiveTransform함수와, warpPerspective함수를 사용해 원근 변환된 이미지와, 다시 원상복귀시키기 위한 getPerspectiveTransform함수를 역으로 적용시킨 값을 출력한다.\n\n\n2-2 색 범위 탐색\n\n이미지에서 흰색 차선이 있는 곳을 찾기 위해 이미지를 HSV(색상,채도,명도) 형식으로 변환 후 흰색 구간에 부합하는 값을 출력한다.\n\n\n2-3. 관심지역 설정\n\n색 구간으로 흰색을 탐지한 결과 좌상단에 노이즈가 있는 것을 볼 수 있다. 노이즈를 없애기 위해 차선이 있는 구간을 관심지역으로 정해 관심지역 안에서만 탐지하게 한다.\n원본 이미지와 해상도가 동일한 0으로 이루어진 1차원 이미지에 fillpoly함수를 사용하여 관심구간 좌표를 흰색으로 칠한다. 후에 bitwise_and 연산을 이용해 겹치는 구간만을 출력한다.\n\n\n2-4. 흑백화, threshold 연산\n185를 기준으로 threshold 연산을 한 이미지를 출력한다.\n\n\n\n3.탐지구간 분할\n\n3-1. 차선 히스토그램\n전처리 된 1차원 이미지를 행 기준으로 더하여 출력된 리스트를 히스토그램으로 그린후, 히스토그램의 좌측과 우측에서의 최댓값을 가지는 점을 출력한다.\n\n예시 사진에서는 (270,1082) 점에서 최댓값을 가졌다.\n\n\n3-2. 구간 분할 및 탐색\n각 차선을 n개의 구간으로 나누어 좌,우로 125의 마진을 갖는 상자를 그린다. 동영상의 각 프레임에서 상자안에 드는 차선들의 평균값을 리턴한다. 리턴된 값에 Polyfit연산을 사용해 차선의 예측선을 출력한다.\n\n\n\n\n4. 결과 도출\n차선의 예측선 사이를 fillpoly함수를 통해 칠한후, 2-1에서 출력한 원근변환을 이용해 원본 크기로 돌린다. 투명도를 위해 원본 동영상에 addWeighted 연산을 통해 결과 동영상을 출력한다.\n\n\n\n5. 응용 방안\n\n차선의 곡률, 이탈률을 계산하여 차선이탈 경고시스템에 적용 가능하다. 더 나아가 고속도로처럼 차선이 명확한 부분에서는 간단한 자율주행기능에도 적용할 수 있다.\n유사한 방식으로 주차선을 탐지한다면 주차보조 시스템에적용할 수 있다.\n\n\n\n6. 보완해야 할 점\n\n커브길을 진입할 경우에 2-3에서 지정한 관심지역 밖으로 차선이 나가는 경우에는 탐지를 하지 못한다. \n원근변환, 관심지역의 값을 변경해 보완해야 함\n\n\n\n\n그림자가 있거나 갑자기 밝아지는 상황에서 탐지율이 떨어진다. 주변의 밝기를 기준으로 threshold연산을 유동적으로 하여 보완할 필요가 있다.\n\n코드:\nhttps://drive.google.com/drive/folders/1Jfc9HOaVIaTQ48MsyXwG79ePtQIfflnl?usp=sharing\n소스 출처: https://github.com/sidroopdaska/SelfDrivingCar/tree/master/AdvancedLaneLinesDetection\n영상 출처:\nhttps://youtu.be/aItuTJYMj28"
  },
  {
    "objectID": "posts/penguin/penguin.html",
    "href": "posts/penguin/penguin.html",
    "title": "Tensorflow ex",
    "section": "",
    "text": "import seaborn as sns\n\npeng = sns.load_dataset(\"penguins\")          # data 불러오기\npeng = peng.dropna()     \npeng\n\n    species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n0    Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n1    Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n2    Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n4    Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n5    Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n..      ...        ...             ...  ...                ...          ...     ...\n338  Gentoo     Biscoe            47.2  ...              214.0       4925.0  Female\n340  Gentoo     Biscoe            46.8  ...              215.0       4850.0  Female\n341  Gentoo     Biscoe            50.4  ...              222.0       5750.0    Male\n342  Gentoo     Biscoe            45.2  ...              212.0       5200.0  Female\n343  Gentoo     Biscoe            49.9  ...              213.0       5400.0    Male\n\n[333 rows x 7 columns]\n\n\n\npeng.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 333 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            333 non-null    object \n 1   island             333 non-null    object \n 2   bill_length_mm     333 non-null    float64\n 3   bill_depth_mm      333 non-null    float64\n 4   flipper_length_mm  333 non-null    float64\n 5   body_mass_g        333 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 20.8+ KB\n\n\n\npeng.groupby('species').mean()\n\n           bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g\nspecies                                                                 \nAdelie          38.823973      18.347260         190.102740  3706.164384\nChinstrap       48.833824      18.420588         195.823529  3733.088235\nGentoo          47.568067      14.996639         217.235294  5092.436975\n\n<string>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n#!pip install tensorflow\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n\npeng_dum = pd.get_dummies(peng,columns=['species','island','sex'])\npeng_dum\n\n     bill_length_mm  bill_depth_mm  ...  sex_Female  sex_Male\n0              39.1           18.7  ...           0         1\n1              39.5           17.4  ...           1         0\n2              40.3           18.0  ...           1         0\n4              36.7           19.3  ...           1         0\n5              39.3           20.6  ...           0         1\n..              ...            ...  ...         ...       ...\n338            47.2           13.7  ...           1         0\n340            46.8           14.3  ...           1         0\n341            50.4           15.7  ...           0         1\n342            45.2           14.8  ...           1         0\n343            49.9           16.1  ...           0         1\n\n[333 rows x 12 columns]\n\n\n\ntrain_set = peng_dum.sample(frac=0.8, random_state=0)\ntest_set = peng_dum.drop(train_set.index)\n\n\nlen(train_set),len(test_set)\n\n(266, 67)\n\n\n\nX_train = train_set.drop(['body_mass_g'],axis = 1)\ny_train = train_set['body_mass_g']\nX_test = test_set.drop(['body_mass_g'],axis = 1)\ny_test = test_set['body_mass_g']\n\n\nX_train\n\n     bill_length_mm  bill_depth_mm  ...  sex_Female  sex_Male\n62             37.6           17.0  ...           1         0\n60             35.7           16.9  ...           1         0\n283            54.3           15.7  ...           0         1\n107            38.2           20.0  ...           0         1\n65             41.6           18.0  ...           0         1\n..              ...            ...  ...         ...       ...\n149            37.8           18.1  ...           0         1\n186            49.7           18.6  ...           0         1\n137            40.2           20.1  ...           0         1\n303            50.0           15.9  ...           0         1\n342            45.2           14.8  ...           1         0\n\n[266 rows x 11 columns]\n\n\n\nnormalizer = tf.keras.layers.Normalization(axis=-1)\n\nnormalizer.adapt(np.array(X_train))\n\nprint(normalizer.mean.numpy())\n\n[[4.3782330e+01 1.7148497e+01 2.0074435e+02 4.5112786e-01 1.9548874e-01\n  3.5338345e-01 5.0000000e-01 3.4962410e-01 1.5037596e-01 5.0375938e-01\n  4.9624062e-01]]\n\n\n\nfirst = np.array(X_train[:1])\n\nwith np.printoptions(precision=2, suppress=True):\n    print('First example:', first)\n    print()\n    print('Normalized:', normalizer(first).numpy())\n\nFirst example: [[ 37.6  17.  185.    1.    0.    0.    1.    0.    0.    1.    0. ]]\n\nNormalized: [[-1.13 -0.08 -1.09  1.1  -0.49 -0.74  1.   -0.73 -0.42  0.99 -0.99]]"
  },
  {
    "objectID": "posts/pizza/pizza.html",
    "href": "posts/pizza/pizza.html",
    "title": "pizza",
    "section": "",
    "text": "Let the radius of the pizza be ‘z’ and the depth be ‘a’.\n\n\nThe volume of the pizza is π * z**2 * a.\npi z z a\ndelicious pizza"
  },
  {
    "objectID": "posts/tests/Issue_report.html#section",
    "href": "posts/tests/Issue_report.html#section",
    "title": "Issue Report",
    "section": "2023/03/27",
    "text": "2023/03/27\nQuarto markdown의 코드 청크가 전부 파이썬으로 구성되면 같은 디렉토리에 .ipynb가 생성된다.\nRstudio ipykernel에는 .ipynb를 렌더링 할 수 없기에 에러가 발생한다.\n이에 Quarto markdown 에 비어있는 R코드청크를 넣어두면 .ipynb가 생성되지 않고 렌더링 할 수 있다."
  },
  {
    "objectID": "posts/tests/Issue_report.html#section-1",
    "href": "posts/tests/Issue_report.html#section-1",
    "title": "Issue Report",
    "section": "2023/04/04",
    "text": "2023/04/04\n.ipynb 파일 위에 --- title --- 생성해보기\n\n#!pip install matplotlib\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na = np.arange(-1,1,0.01)\nb = a**2\nplt.plot(a,b)"
  },
  {
    "objectID": "posts/vis/vis.html",
    "href": "posts/vis/vis.html",
    "title": "training markdown & GGplot",
    "section": "",
    "text": "Train markdown, ggplot https://clauswilke.com/dataviz/"
  },
  {
    "objectID": "posts/vis/vis.html#library-packages",
    "href": "posts/vis/vis.html#library-packages",
    "title": "training markdown & GGplot",
    "section": "library packages",
    "text": "library packages\n\nrm(list = ls())\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n다음의 패키지를 부착합니다: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggrepel)\nlibrary(cowplot)"
  },
  {
    "objectID": "posts/vis/vis.html#mpg-datasets",
    "href": "posts/vis/vis.html#mpg-datasets",
    "title": "training markdown & GGplot",
    "section": "mpg datasets",
    "text": "mpg datasets\nRead data, check dimension and data summary\n\ndata_raw <- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv\")\ndata_raw %>% dim()\n\n[1] 234  12\n\ndata_raw %>% head()\n\n  X manufacturer model displ year cyl      trans drv cty hwy fl   class\n1 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact\n2 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact\n3 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact\n4 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact\n5 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact\n6 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact\n\ndata_raw %>% summary()\n\n       X          manufacturer          model               displ      \n Min.   :  1.00   Length:234         Length:234         Min.   :1.600  \n 1st Qu.: 59.25   Class :character   Class :character   1st Qu.:2.400  \n Median :117.50   Mode  :character   Mode  :character   Median :3.300  \n Mean   :117.50                                         Mean   :3.472  \n 3rd Qu.:175.75                                         3rd Qu.:4.600  \n Max.   :234.00                                         Max.   :7.000  \n      year           cyl           trans               drv           \n Min.   :1999   Min.   :4.000   Length:234         Length:234        \n 1st Qu.:1999   1st Qu.:4.000   Class :character   Class :character  \n Median :2004   Median :6.000   Mode  :character   Mode  :character  \n Mean   :2004   Mean   :5.889                                        \n 3rd Qu.:2008   3rd Qu.:8.000                                        \n Max.   :2008   Max.   :8.000                                        \n      cty             hwy             fl               class          \n Min.   : 9.00   Min.   :12.00   Length:234         Length:234        \n 1st Qu.:14.00   1st Qu.:18.00   Class :character   Class :character  \n Median :17.00   Median :24.00   Mode  :character   Mode  :character  \n Mean   :16.86   Mean   :23.44                                        \n 3rd Qu.:19.00   3rd Qu.:27.00                                        \n Max.   :35.00   Max.   :44.00                                        \n\n\nDrop index column followed during data load\n\ndata_use <- data_raw %>% select(-1)\ndata_use %>% head()\n\n  manufacturer model displ year cyl      trans drv cty hwy fl   class\n1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact\n2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact\n3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact\n4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact\n5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact\n6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact\n\n\n\nscatter plot\nUse displ and hwy\ndispl : Displacement\nhwy : Highway fuel economy\n\nggplot(data_use, aes(x=displ, y=hwy)) + geom_point()\n\n\n\n\n\n\nsmooth line\n\nggplot(data_use, aes(x=displ, y=hwy)) + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nscatter & smooth line\n\nggplot(data_use, aes(x=displ, y=hwy)) + \n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "posts/vis/vis.html#ncdc_normals",
    "href": "posts/vis/vis.html#ncdc_normals",
    "title": "training markdown & GGplot",
    "section": "ncdc_normals",
    "text": "ncdc_normals\nThe U.S. Climate Normals are a large suite of data products that provide information about typical climate conditions for thousands of locations across the United States.\nLoad data\n\ndata_file <- read.csv(\"ncdc_normals.csv\")\n\nCheck data information\n\ndim(data_file)\n\n[1] 2745366       6\n\ndata_file %>% head()\n\n   station_id month day temperature flag       date\n1 AQW00061705     1   1        82.4    C 0000-01-01\n2 AQW00061705     1   2        82.4    C 0000-01-02\n3 AQW00061705     1   3        82.4    C 0000-01-03\n4 AQW00061705     1   4        82.4    C 0000-01-04\n5 AQW00061705     1   5        82.4    C 0000-01-05\n6 AQW00061705     1   6        82.4    C 0000-01-06\n\ndata_file %>% sapply(class) # 날짜 형식 변경\n\n station_id       month         day temperature        flag        date \n\"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\" \n\n\nConvert date format (character -> date)\n\ndata_file$date <- data_file$date %>% as.Date(\"%Y-%m-%d\")\n\nThere are 7501 measurement locations\n\ndata_file$station_id %>% unique() %>% length()\n\n[1] 7501\n\n\nSpecifying 4 Station and use join() function\n\nstation_loc <- data.frame(station_id = c(\"USW00014819\",\"USC00042319\",\"USW00093107\",\"USW00012918\"),\n                          location = c(\"Chicago\",\"Death valley\",\"San diego\",\"Houston\"))\n\n\ntemps_long <- data_file %>% inner_join(station_loc,by=\"station_id\")\ntemps_long %>% head()\n\n   station_id month day temperature flag       date     location\n1 USC00042319     1   1        51.0    S 0000-01-01 Death valley\n2 USC00042319     1   2        51.2    S 0000-01-02 Death valley\n3 USC00042319     1   3        51.3    S 0000-01-03 Death valley\n4 USC00042319     1   4        51.4    S 0000-01-04 Death valley\n5 USC00042319     1   5        51.6    S 0000-01-05 Death valley\n6 USC00042319     1   6        51.7    S 0000-01-06 Death valley\n\n\n\nLine plot by location\n\nggplot(temps_long, aes(x=date,y=temperature,color=location))+\n  geom_line()\n\n\n\n\nCreate a scale to display on the x-axis.\n\ndate_s <- \"0000-01-01\" %>% as.Date(\"%Y-%m-%d\")  #Y는 대문자\ndate_e <- \"0001-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date <- seq.Date(date_s, date_e, by = \"3 month\")\n\n\n\nLine plot, date x scale\n\nggplot(temps_long, aes(x=date, y=temperature, color=location))+\n  geom_line()+\n  scale_x_date(name=\"month\", \n               breaks = break_date,\n               labels = c(\"jan\", \"apr\", \"jul\", \"oct\", \"jan\"))+\n  theme_light()\n\n\n\n\n\n\nLine plot, date x scale, y limits, labs variable\n\nggplot(temps_long, aes(x=date, y=temperature, color=location))+\n  geom_line()+\n  scale_x_date(name=\"month\", \n               breaks = break_date,\n               labels = c(\"jan\", \"apr\", \"jul\", \"oct\", \"jan\"))+\n  scale_y_continuous(name = \"temp\",\n                     limits = c(20,105))+\n  theme_light()+\n  labs(title = \"title\", subtitle = \"subtitle\", caption = \"caption\", tag = \"tag\")\n\n\n\n\n\n\nTile plot, mean temperature by month, location\n\nmean_temps <- temps_long %>% \n  group_by(month,location) %>% \n  summarize(mean = mean(temperature)) %>% \n  ungroup() %>% \n  mutate(month = factor(month %>% paste(),\n                        levels = 1:12 %>% paste()))\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nViridis is Color Palette\n\nggplot(mean_temps,aes(x = month, y = location, fill = mean))+\n  geom_tile(width = .95,height = 0.95)+\n  scale_fill_viridis_c(option = \"B\",begin = 0.15, end = 0.98,\n                       name = \"temperature\")+\n  coord_fixed(expand = FALSE)+\n  ylab(NULL)\n\n\n\n\n\n\nPie chart, Polar coordinates\nThe polar coordinate system is most commonly used for pie charts, which are a stacked bar chart in polar coordinates.\nformat(x,\"%B\") Outputs unabbreviated month\n\ndate_lab <- format(break_date,\"%B\")\ndate_lab\n\n[1] \"1월\"  \"4월\"  \"7월\"  \"10월\" \"1월\" \n\n\n\nggplot(temps_long, aes(x=date,y=temperature,color=location))+\n  geom_line(linewidth = 1.1)+\n  scale_x_date(name = \"month\",\n               breaks = break_date,\n               labels = date_lab)+\n  scale_y_continuous(name = \"temperature\",\n                     limits = c(0,105))+\n  coord_polar(theta = \"x\",\n              start = pi,\n              direction = 1)+\n  theme_light()+\n  theme(panel.border = element_blank())"
  },
  {
    "objectID": "posts/vis/vis.html#obs-asos-2021-korea",
    "href": "posts/vis/vis.html#obs-asos-2021-korea",
    "title": "training markdown & GGplot",
    "section": "OBS ASOS 2021 Korea",
    "text": "OBS ASOS 2021 Korea\nObservations Automated Surface Observing System\nAverage, minimum, and maximum temperatures by region(서울, 대전, 세종, 제주)\nLoad data\n\ndata_2021 <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv\", fileEncoding = \"euc-kr\")\n\nCheck data information\n\ndata_2021 %>% dim()\n\n[1] 1460    6\n\ndata_2021 %>% head()\n\n  지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n1  108   서울 2021-01-01         -4.2         -9.8          1.6\n2  108   서울 2021-01-02         -5.0         -8.4         -1.4\n3  108   서울 2021-01-03         -5.6         -9.1         -2.0\n4  108   서울 2021-01-04         -3.5         -8.4          0.3\n5  108   서울 2021-01-05         -5.5         -9.9         -2.1\n6  108   서울 2021-01-06         -7.4        -12.0         -1.9\n\ndata_2021 %>% sapply(class)\n\n        지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n   \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\" \n\n\nConvert date format (character -> date)\n\ndata_2021$일시 <-data_2021$일시 %>% as.Date(\"%Y-%m-%d\")\ndata_2021 %>% sapply(class)\n\n        지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n   \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\" \n\n\nSummary data\n\ndata_2021 %>% summary()\n\n      지점          지점명               일시             평균기온..C.   \n Min.   :108.0   Length:1460        Min.   :2021-01-01   Min.   :-14.90  \n 1st Qu.:126.8   Class :character   1st Qu.:2021-04-02   1st Qu.:  7.90  \n Median :158.5   Mode  :character   Median :2021-07-02   Median : 15.00  \n Mean   :166.0                      Mean   :2021-07-02   Mean   : 14.77  \n 3rd Qu.:197.8                      3rd Qu.:2021-10-01   3rd Qu.: 23.10  \n Max.   :239.0                      Max.   :2021-12-31   Max.   : 31.70  \n  최저기온..C.     최고기온..C.   \n Min.   :-19.10   Min.   :-10.70  \n 1st Qu.:  3.10   1st Qu.: 13.18  \n Median : 11.10   Median : 20.15  \n Mean   : 10.69   Mean   : 19.56  \n 3rd Qu.: 19.60   3rd Qu.: 27.70  \n Max.   : 28.10   Max.   : 36.50  \n\n\nCreate a scale to display on the x-axis.\n\ndate_21s <- \"2021-01-01\" %>% as.Date(\"%Y-%m-%d\")  #Y는 대문자\ndate_21e <- \"2022-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date_21 <- seq.Date(date_21s, date_21e, by = \"3 month\")\n\n\nPloting\n\nggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+\n  geom_line(linewidth = 1) +\n  scale_x_date(name =\"월\", \n               breaks = break_date_21,\n               labels = c(\"1월\",\"4월\",\"7월\",\"10월\",\"1월\")) +\n  scale_y_continuous(name = \"평균기온\")+\n  theme_light()"
  },
  {
    "objectID": "posts/vis/vis.html#obs-asos-2022-korea",
    "href": "posts/vis/vis.html#obs-asos-2022-korea",
    "title": "training markdown & GGplot",
    "section": "OBS ASOS 2022 Korea",
    "text": "OBS ASOS 2022 Korea\nSame process\n\ndata_2022 <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20230322080932.csv\", fileEncoding = \"euc-kr\")\ndata_2022$일시 <-data_2022$일시 %>% as.Date(\"%Y-%m-%d\")\n\n\ndata_2022 %>% summary()\n\n      지점          지점명               일시             평균기온..C.   \n Min.   :108.0   Length:2555        Min.   :2022-01-01   Min.   :-11.80  \n 1st Qu.:133.0   Class :character   1st Qu.:2022-04-02   1st Qu.:  8.20  \n Median :185.0   Mode  :character   Median :2022-07-02   Median : 16.40  \n Mean   :175.1                      Mean   :2022-07-02   Mean   : 15.27  \n 3rd Qu.:189.0                      3rd Qu.:2022-10-01   3rd Qu.: 23.00  \n Max.   :239.0                      Max.   :2022-12-31   Max.   : 32.20  \n                                                         NA's   :2       \n  최저기온..C.      최고기온..C.  \n Min.   :-13.800   Min.   :-8.60  \n 1st Qu.:  4.225   1st Qu.:12.30  \n Median : 12.600   Median :20.75  \n Mean   : 11.626   Mean   :19.49  \n 3rd Qu.: 19.800   3rd Qu.:27.20  \n Max.   : 28.900   Max.   :37.50  \n NA's   :1         NA's   :1      \n\n\n\ndate_22s <- \"2022-01-01\" %>% as.Date(\"%Y-%m-%d\")  #Y는 대문자\ndate_22e <- \"2023-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date_22 <- seq.Date(date_22s, date_22e, by = \"3 month\")\n\n\ndata_2022$지점명 %>% unique()\n\n[1] \"서울\"   \"대전\"   \"제주\"   \"고산\"   \"성산\"   \"서귀포\" \"세종\"  \n\n\nFilter only 서울, 대전, 제주, 세종\n\ndata_2022_2 <- data_2022 %>% filter(data_2022$지점명 %in% c(\"서울\",\"대전\",\"제주\",\"세종\"))\ndata_2022_2$지점명 %>% unique()\n\n[1] \"서울\" \"대전\" \"제주\" \"세종\"\n\n\n\nploting\n\nggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+\n  geom_line(linewidth = 1) +\n  scale_x_date(name =\"월\", \n               breaks = break_date_22,\n               labels = c(\"1월\",\"4월\",\"7월\",\"10월\",\"1월\")) +\n  scale_y_continuous(name = \"평균기온\")+\n  theme_light()\n\n\n\n\n\n\nTile plot, mean temperature by month, location\n\nd <- data_2022_2 %>% \n  mutate(month = 일시 %>% format(\"%B\")) %>% \n  group_by(month,지점명) %>% \n  summarize(mean = mean(평균기온..C.)) %>% \n  ungroup()\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\nggplot(d,aes(x = month, y = 지점명, fill = mean))+\n  geom_tile(width = .95,height = 0.95)+\n  scale_fill_viridis_c(option = \"B\",begin = 0.15, end = 0.99,\n                       name = \"temperature\")+\n  coord_fixed(expand = FALSE)+\n  ylab(NULL)\n\n\n\n\n\n\nPie chart, Polar coordinates\n\nggplot(data_2022_2,aes(x = 일시,y = 평균기온..C., color = 지점명))+\n  geom_line(linewidth = 1) +\n  scale_x_date(name =\"월\", \n               breaks = break_date_22,\n               labels = c(\"1월\",\"4월\",\"7월\",\"10월\",\"1월\")) +\n  scale_y_continuous(name = \"평균기온\",\n                     limits = c(-20,35))+\n  coord_polar(theta = \"x\",\n              start = pi,\n              direction = 1)+\n  theme_light()+\n  theme(panel.border = element_blank())"
  },
  {
    "objectID": "posts/vis/vis.html#ncdc-normals-houston",
    "href": "posts/vis/vis.html#ncdc-normals-houston",
    "title": "training markdown & GGplot",
    "section": "ncdc normals Houston",
    "text": "ncdc normals Houston\nLoad & filter only Houston temperature\n\ndata_file <- read.csv(\"ncdc_normals.csv\")\ndata_file$date <- data_file$date %>% as.Date(\"%Y-%m-%d\")\n\nhouston <- data.frame(station_id = c(\"USW00012918\"), location = c(\"Houston\"))\n\nhouston_temps <- data_file %>% inner_join(houston,by=\"station_id\")\nhouston_temps %>% head()\n\n   station_id month day temperature flag       date location\n1 USW00012918     1   1        53.9    S 0000-01-01  Houston\n2 USW00012918     1   2        53.8    S 0000-01-02  Houston\n3 USW00012918     1   3        53.8    S 0000-01-03  Houston\n4 USW00012918     1   4        53.8    S 0000-01-04  Houston\n5 USW00012918     1   5        53.8    S 0000-01-05  Houston\n6 USW00012918     1   6        53.7    S 0000-01-06  Houston\n\n\n\nSet X scale breaks, Plot\n\ndate_s <- \"0000-01-01\" %>% as.Date(\"%Y-%m-%d\")  #Y는 대문자\ndate_e <- \"0001-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date <- seq.Date(date_s, date_e, by = \"3 month\")\n\nggplot(houston_temps, aes(x=date, y=temperature,color = location))+\n  geom_line(linewidth = 1,color = \"royalblue\")+\n  scale_x_date(name=\"month\", \n               breaks = break_date,\n               labels = c(\"jan\", \"apr\", \"jul\", \"oct\", \"jan\"))+\n  theme_light()+\n  ylab(\"Temperature(℉)\")\n\n\n\n\nUse cowplot package to arrange multiple plots into a grid\n\nlibrary(cowplot)\n\nSpecify plot as a object houston_plot\n\nhouston_plot <- ggplot(houston_temps, aes(x=date, y=temperature,color = location))+\n  geom_line(linewidth = 1,color = \"royalblue\")+\n  scale_x_date(name=\"month\", \n               breaks = break_date,\n               labels = c(\"jan\", \"apr\", \"jul\", \"oct\", \"jan\"))+\n  theme_light()+\n  ylab(\"Temperature(℉)\")\n\n\n\narrange multiple plots into a grid\n\nplot_ab <- plot_grid(houston_plot,houston_plot,\n                    nrow = 1,\n                    rel_widths = c(1,2),\n                    labels = c(\"a\",\"b\"))\n\nplot_abc <- plot_grid(plot_ab, houston_plot,\n                      ncol = 1,\n                      rel_heights = c(1.5,2),\n                      labels = c(\"\",\"c\"))\n\nplot_abc"
  },
  {
    "objectID": "posts/vis/vis.html#texas-counties",
    "href": "posts/vis/vis.html#texas-counties",
    "title": "training markdown & GGplot",
    "section": "Texas counties",
    "text": "Texas counties\nTexas counties by land area, population, and population density\n\ntexas_cnt <- read.csv(\"https://raw.githubusercontent.com/christianmendoza/texas-counties/main/data/texas-counties.csv\")\ntexas_cnt %>% head()\n\n     county fips_code population area_sq_mi pop_per_sq_mi\n1  Anderson     48001      58402       1071         54.53\n2   Andrews     48003      18440       1501         12.29\n3  Angelina     48005      86506        802        107.86\n4   Aransas     48007      24510        252         97.26\n5    Archer     48009       8681        910          9.54\n6 Armstrong     48011       1839        914          2.01\n\n\nSelect county, population columns\nremove “county” word in county columns ex) “sungil county” -> “sungil”\ncalculate popratio = population/ meadian of total population\nlist in order of highest population\nCreate an index column with a number, Add labels to the top 3, bottom 3, and randomly determined values\nrunif(x) Outputs a random number between 0 and 1\n\ntx_counties <- texas_cnt %>% \n  select(county,population) %>% \n  mutate(county = gsub(\"county\",\"\",county),\n         popratio = population/median(population)) %>% \n  arrange(desc(popratio)) %>% \n  mutate(index = 1:n(),\n         label = ifelse(index<=3|index>n()-3|runif(n())<.04, county, \"\"))\n\ntx_counties %>% head()\n\n   county population  popratio index   label\n1  Harris    4728030 256.42857     1  Harris\n2  Dallas    2586050 140.25654     2  Dallas\n3 Tarrant    2126477 115.33122     3 Tarrant\n4   Bexar    2028236 110.00304     4        \n5  Travis    1305154  70.78609     5        \n6  Collin    1109462  60.17258     6        \n\n\nggrepel provides geoms for ggplot2 to repel overlapping text labels\n\nlibrary(ggrepel)\n\n\npoint plot, overlapped text label\n\nggplot(tx_counties,aes(x=index,y=popratio))+\n  geom_hline(yintercept = 0, linetype = 2, color = \"grey40\")+\n  geom_point(size = 1, color = \"royalblue\")+\n  geom_text_repel(aes(label = label),\n                  min.segment.length = 0,\n                  max.overlaps = 100)+\n  theme_light()+\n  theme(panel.border = element_blank())\n\n\n\n\n\n\nPoint plot, y log scale\nThere are two main reasons to use logarithmic scales in charts and graphs. The first is to respond to skewness towards large values; i.e., cases in which one or a few points are much larger than the bulk of the data. The second is to show percent change or multiplicative factors.\n\nlabel_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))\n\nggplot(tx_counties,aes(x=index,y=popratio))+\n  geom_hline(yintercept = 1, linetype = 2, color = \"grey40\")+\n  geom_point(size = 1, color = \"royalblue\")+\n  geom_text_repel(aes(label = label),\n                  min.segment.length = 0,\n                  max.overlaps = 100)+\n  scale_y_log10(name = \"popnumber/median\",\n                breaks = 10^(-2:2),\n                labels = label_log10)+\n  scale_x_continuous(name = \"Texas counties\",\n                     breaks = NULL)+\n  theme_light()+\n  theme(panel.border = element_blank())"
  },
  {
    "objectID": "posts/vis/vis.html#시군구-인구수-2023년-2월",
    "href": "posts/vis/vis.html#시군구-인구수-2023년-2월",
    "title": "training markdown & GGplot",
    "section": "시군구 인구수 2023년 2월",
    "text": "시군구 인구수 2023년 2월\n\ndata_pop <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/%ED%96%89%EC%A0%95%EA%B5%AC%EC%97%AD_%EC%8B%9C%EA%B5%B0%EA%B5%AC_%EB%B3%84_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%84%B8%EB%8C%80%EC%88%98_202302.csv\",encoding = \"utf-8\")\n\ndata_pop %>% head()\n\n  행정구역.시군구.별 X2022.11 X2022.12 X2023.01 X2023.02\n1             종로구    72666    72524    72479    72773\n2               중구    63167    63139    63123    63492\n3             용산구   109905   109805   109734   109778\n4             성동구   133435   133305   133293   133517\n5             광진구   169376   169291   169416   169648\n6           동대문구   170154   169873   169716   170766\n\n\nSame process\n\ndata_202302 <- data_pop %>% \n  filter(X2023.02>0) %>%  \n  select(행정구역.시군구.별,X2023.02) %>%\n  mutate(popratio = X2023.02/median(X2023.02)) %>% \n  arrange(desc(popratio)) %>% \n  mutate(index = 1:n(),label = ifelse(index<=3|index>n()-3|runif(n())<.04, 행정구역.시군구.별, \"\"))\n\n\ndata_202302 %>% head()\n\n  행정구역.시군구.별 X2023.02 popratio index  label\n1             수원시   530462 6.043498     1 수원시\n2             고양시   462873 5.273464     2 고양시\n3             창원시   456357 5.199228     3 창원시\n4             용인시   432476 4.927154     4       \n5             성남시   409466 4.665003     5       \n6             청주시   394735 4.497175     6       \n\n\n\nPoint plot\n\nggplot(data_202302,aes(x=index,y=popratio))+\n  geom_point(size = 1, color = \"royalblue\")+\n  geom_text_repel(aes(label = label),\n                  min.segment.length = 0,\n                  max.overlaps = 100)+\n  theme_light()+\n  theme(panel.border = element_blank())\n\n\n\n\n\n\nPoint plot, y log scale\n\nlabel_log10 <- sapply(-2:2,function(i) as.expression(bquote(10^ .(i))))\n\nggplot(data_202302,aes(x=index,y=popratio))+\n  geom_point(size = 1, color = \"royalblue\")+\n  geom_text_repel(aes(label = label),\n                  min.segment.length = 0,\n                  max.overlaps = 100)+\n  scale_y_log10(name = \"인구수/중위수\",\n                breaks = 10^(-2:2),\n                labels = label_log10,\n                limits = c(10^-1.3,10^1.3))+\n  theme_light()+\n  theme(panel.border = element_blank())+\n  scale_x_continuous(name = \"행정구역 (시군구)별 주민등록세대수\",\n                     breaks = NULL)"
  },
  {
    "objectID": "posts/vis/vis.html#rcolorbrewer",
    "href": "posts/vis/vis.html#rcolorbrewer",
    "title": "training markdown & GGplot",
    "section": "RColorBrewer",
    "text": "RColorBrewer\n\nlibrary(colorspace)\nRColorBrewer::display.brewer.all()"
  },
  {
    "objectID": "posts/vis/vis.html#us-census-us-regions",
    "href": "posts/vis/vis.html#us-census-us-regions",
    "title": "training markdown & GGplot",
    "section": "US census , US regions",
    "text": "US census , US regions\nUS_census is dataset of population per region, age, human race\nUS_region is dataset of State informations\nLoad data\n\nUS_census <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_census.csv\")\n\nUS_regions <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/drive-download-20230405T011215Z-001/US_regions.csv\")\n\nJoin & group by State\nsummaise 2000 population, 2010 population, population growth, total area size\n\npopgrowth_df <- US_census %>% left_join(US_regions) %>% \n  group_by(region,division,state) %>% \n  summarize(pop2000 = sum(pop2000, na.rm = TRUE),\n            pop2010 = sum(pop2010, na.rm = TRUE),\n            popgrowth = (pop2010-pop2000)/pop2000,\n            area = sum(area)) %>% \n  arrange(popgrowth) %>% \n  ungroup() %>%\n  mutate(state = factor(state,levels = state),\n         region = factor(region, levels = c(\"West\",\"South\",\"Midwest\",\"Northwest\")))\n\nJoining with `by = join_by(state)`\n`summarise()` has grouped output by 'region', 'division'. You can override\nusing the `.groups` argument.\n\n\n\npopgrowth_df %>% head()\n\n# A tibble: 6 × 7\n  region  division           state          pop2000  pop2010 popgrowth   area\n  <fct>   <chr>              <fct>            <int>    <int>     <dbl>  <dbl>\n1 Midwest East North Central Michigan       9938444  9883640  -0.00551 56539.\n2 <NA>    New England        Rhode Island   1048319  1052567   0.00405  1034.\n3 South   West South Central Louisiana      4468976  4533372   0.0144  43204.\n4 Midwest East North Central Ohio          11353140 11536504   0.0162  40861.\n5 <NA>    Middle Atlantic    New York      18976457 19378102   0.0212  47126.\n6 South   South Atlantic     West Virginia  1808344  1852994   0.0247  24038.\n\n\nSet Colorspace\n\nregion_colors <- c(\"#E69F00\",\"#56B4E9\",\"#009E73\",\"#F0E442\")\nstate_colors <- region_colors[as.numeric(popgrowth_df$region)]\nstate_colors_dark = colorspace::darken(state_colors,0.4)\n\n\nPlot with color\n\nggplot(popgrowth_df,aes(x = state, y = 100*popgrowth, fill = region))+\n  geom_col()+\n  scale_y_continuous(name = \"population growth, 2000 to 2010\",\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0,0))+\n  scale_fill_manual(values = region_colors)+\n  coord_flip()+\n  theme_light()+\n  theme(panel.border = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.length = unit(0,\"pt\"),\n        axis.text.y = element_text(size=10,color = state_colors),\n        legend.position = c(.58,.68),\n        legend.background = element_rect(fill=\"#FFFFFFb0\"))\n\nWarning: Vectorized input to `element_text()` is not officially supported.\nℹ Results may be unexpected or may change in future versions of ggplot2."
  },
  {
    "objectID": "posts/vis/vis.html#주민등록인구-및-세대-현황",
    "href": "posts/vis/vis.html#주민등록인구-및-세대-현황",
    "title": "training markdown & GGplot",
    "section": "2022 02 주민등록인구 및 세대 현황",
    "text": "2022 02 주민등록인구 및 세대 현황\nLoad & change type\n\nkor_202202 <- read.csv(\"https://raw.githubusercontent.com/Sungileo/trainsets/main/202202_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9.csv\")\n\nkor_202202 %>% head()\n\n           행정구역 행정구역_코드 총인구수  세대수 세대당_인구 남자_인구수\n1       서울특별시     1100000000  9508451 4442586        2.14     4615823\n2 서울특별시 종로구    1111000000   144575   73763        1.96       70092\n3   서울특별시 중구    1114000000   122167   63644        1.92       59446\n4 서울특별시 용산구    1117000000   222413  111134        2.00      106881\n5 서울특별시 성동구    1120000000   285137  134286        2.12      138866\n6 서울특별시 광진구    1121500000   340494  168975        2.02      164226\n  여자_인구수 남여_비율\n1     4892628      0.94\n2       74483      0.94\n3       62721      0.95\n4      115532      0.93\n5      146271      0.95\n6      176268      0.93\n\nkor_202202 %>% sapply(class)\n\n     행정구역 행정구역_코드      총인구수        세대수   세대당_인구 \n  \"character\"     \"numeric\"     \"numeric\"     \"numeric\"     \"numeric\" \n  남자_인구수   여자_인구수     남여_비율 \n    \"numeric\"     \"numeric\"     \"numeric\" \n\nkor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format()\n\nfilter 서울, 대전 ,대구, 부산\n\nkor_202202_use <- kor_202202 %>% \n  filter(substr(행정구역,1,2) %in% c(\"서울\",\"대전\",\"대구\",\"부산\")) %>% \n  filter(substr(행정구역_코드,3,4)!=\"00\") %>% \n  select(행정구역,총인구수) %>% \n  arrange(총인구수)\n\n\nkor_202202_use$시도 = sapply(kor_202202_use$행정구역,\n                           function(x) strsplit(x, \" \")[[1]][1])\nkor_202202_use$시도 = factor(kor_202202_use$시도,\n                           levels = c(\"서울특별시\",\"대전광역시\",\"대구광역시\",\"부산광역시\"))\n\n\nkor_202202_use %>% head()\n\n           행정구역 총인구수       시도\n1   부산광역시 중구    40582 부산광역시\n2   대구광역시 중구    74710 대구광역시\n3   부산광역시 동구    88245 부산광역시\n4   부산광역시 서구   104618 부산광역시\n5 부산광역시 영도구   109991 부산광역시\n6   서울특별시 중구   122167 서울특별시\n\nkor_202202_use %>% summary()\n\n   행정구역            총인구수              시도   \n Length:54          Min.   : 40582   서울특별시:25  \n Class :character   1st Qu.:207148   대전광역시: 5  \n Mode  :character   Median :305946   대구광역시: 8  \n                    Mean   :309033   부산광역시:16  \n                    3rd Qu.:407067                  \n                    Max.   :661452                  \n\n\n\nstate_colors <- region_colors[as.numeric(kor_202202_use$시도)]\nstate_colors_dark <- colorspace::darken(state_colors,0.4)\n\n\nPlot with colors, Korea\n\nggplot(kor_202202_use,aes(x = reorder(행정구역, 총인구수),y= 총인구수, fill = 시도))+\n  geom_col()+\n  scale_y_continuous(name = \"총인구수, 2022년 2월\",\n                     expand = c(0,0),\n                     labels = scales::comma)+\n  scale_x_discrete(aes(color=state_colors))+\n  scale_color_manual(values = state_colors)+\n  scale_fill_manual(values = region_colors)+\n  coord_flip()+\n  theme_light()+\n  theme(panel.border = element_blank(),\n        panel.grid.major.y = element_blank())+\n  theme(axis.title.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.ticks.length = unit(0,\"pt\"),\n        axis.text.y = element_text(size = 6,color = state_colors_dark),legend.position = c(.78,.28),legend.background = element_rect(fill = \"#FFFFFFB0\"))\n\nWarning: Vectorized input to `element_text()` is not officially supported.\nℹ Results may be unexpected or may change in future versions of ggplot2."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.zeros",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.zeros",
    "title": "week_1a_numpy",
    "section": "np.zeros",
    "text": "np.zeros\nzeros 함수는 0으로 채워진 배열을 만듭니다:\n\nnp.zeros(5)\n\narray([0., 0., 0., 0., 0.])\n\n\n2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 \\(3 \\times 4\\) 크기의 행렬입니다:\n\nnp.zeros((3,4))\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#용어",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#용어",
    "title": "week_1a_numpy",
    "section": "용어",
    "text": "용어\n\n넘파이에서 각 차원을 축(axis) 이라고 합니다\n축의 개수를 랭크(rank) 라고 합니다.\n\n예를 들어, 위의 \\(3 \\times 4\\) 행렬은 랭크 2인 배열입니다(즉 2차원입니다).\n첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.\n\n배열의 축 길이를 배열의 크기(shape)라고 합니다.\n\n예를 들어, 위 행렬의 크기는 (3, 4)입니다.\n랭크는 크기의 길이와 같습니다.\n\n배열의 사이즈(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(가령, \\(3 \\times 4=12\\)).\n\n\na = np.zeros((3,4))\na\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\na.shape\n\n(3, 4)\n\n\n\na.ndim  # len(a.shape)와 같습니다\n\n2\n\n\n\na.size\n\n12"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#n-차원-배열",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#n-차원-배열",
    "title": "week_1a_numpy",
    "section": "N-차원 배열",
    "text": "N-차원 배열\n임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 (2,3,4)인 3D 배열(랭크=3)입니다:\n\nnp.zeros((2,3,4))\n\narray([[[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]],\n\n       [[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#배열-타입",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#배열-타입",
    "title": "week_1a_numpy",
    "section": "배열 타입",
    "text": "배열 타입\n넘파이 배열의 타입은 ndarray입니다:\n\ntype(np.zeros((3,4)))\n\n<class 'numpy.ndarray'>"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.ones",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.ones",
    "title": "week_1a_numpy",
    "section": "np.ones",
    "text": "np.ones\nndarray를 만들 수 있는 넘파이 함수가 많습니다.\n다음은 1로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다:\n\nnp.ones((3,4))\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.full",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.full",
    "title": "week_1a_numpy",
    "section": "np.full",
    "text": "np.full\n주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 π로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다.\n\nnp.full((3,4), np.pi)\n\narray([[3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.empty",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.empty",
    "title": "week_1a_numpy",
    "section": "np.empty",
    "text": "np.empty\n초기화되지 않은 \\(2 \\times 3\\) 크기의 배열을 만듭니다(배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다):\n\nnp.empty((2,3))\n\narray([[8.76212408e+164, 8.76209793e+164, 1.33554846e+185],\n       [4.98131536e+151, 4.63456076e+228, 4.94065646e-322]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.array",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.array",
    "title": "week_1a_numpy",
    "section": "np.array",
    "text": "np.array\narray 함수는 파이썬 리스트를 사용하여 ndarray를 초기화합니다:\n\nnp.array([[1,2,3,4], [10, 20, 30, 40]])\n\narray([[ 1,  2,  3,  4],\n       [10, 20, 30, 40]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.arange",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.arange",
    "title": "week_1a_numpy",
    "section": "np.arange",
    "text": "np.arange\n파이썬의 기본 range 함수와 비슷한 넘파이 arange 함수를 사용하여 ndarray를 만들 수 있습니다:\n\nnp.arange(1, 5)\n\narray([1, 2, 3, 4])\n\n\n부동 소수도 가능합니다:\n\nnp.arange(1.0, 5.0)\n\narray([1., 2., 3., 4.])\n\n\n파이썬의 기본 range 함수처럼 건너 뛰는 정도를 지정할 수 있습니다:\n\nnp.arange(1, 5, 0.5)\n\narray([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])\n\n\n부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다:\n\nprint(np.arange(0, 5/3, 1/3)) # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n\nprint(np.arange(0, 5/3, 0.333333333))\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n\nprint(np.arange(0, 5/3, 0.333333334))\n\n[0.         0.33333333 0.66666667 1.         1.33333334]\n\n\nfor loops를 사용하지 않고 전체 array에 대한 연산 수행이 가능합니다.\n평균적으로 Numpy-based 알고리즘은 10~100배정도 속도가 더 빠르고 적은 메모리를 사용합니다.\n\nmy_arr = np.arange(1000000)\nmy_list = list(range(1000000))\n\n#%time for _ in range(10): my_arr2 = my_arr * 2\n#%time for _ in range(10): my_list2 = [x * 2 for x in my_list]\n\nFor loop를 돌릴 때의 속도 비교\n\nsize = 10\nfor x in range(size): x ** 2\n\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n\n\n\nimport sys\n\nsize = 10\n\n#%timeit for x in range(size): x ** 2\n# out: 10 loops, best of 3: 136 ms per loop\n\n# avoid this\n#%timeit for x in np.arange(size): x ** 2\n#out: 1 loops, best of 3: 1.16 s per loop\n\n# use this\n#%timeit np.arange(size) ** 2\n#out: 100 loops, best of 3: 19.5 ms per loop"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.linspace",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.linspace",
    "title": "week_1a_numpy",
    "section": "np.linspace",
    "text": "np.linspace\n이런 이유로 부동 소수를 사용할 땐 arange 대신에 linspace 함수를 사용하는 것이 좋습니다. linspace 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다(arange와는 다르게 최댓값이 포함됩니다):\n\nprint(np.linspace(0, 5/3, 6))\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.rand와-np.randn",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.rand와-np.randn",
    "title": "week_1a_numpy",
    "section": "np.rand와 np.randn",
    "text": "np.rand와 np.randn\n넘파이의 random 모듈에는 ndarray를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다. 예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 \\(3 \\times 4\\) 행렬을 초기화합니다:\n\nnp.random.rand(3,4)\n\narray([[3.05617089e-01, 7.04223127e-01, 5.32036414e-01, 5.44560618e-04],\n       [1.91143446e-01, 5.07251668e-01, 4.91666929e-01, 4.16974838e-01],\n       [1.29705501e-01, 6.40840013e-01, 7.02595060e-02, 7.44257619e-01]])\n\n\n다음은 평균이 0이고 분산이 1인 일변량 정규 분포(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 \\(3 \\times 4\\) 행렬입니다:\n\nnp.random.randn(3,4)\n\narray([[ 1.25394248,  0.83753495,  0.4752588 ,  0.24964861],\n       [-0.45375287, -0.03451802,  0.07850288,  0.60483508],\n       [ 0.01294737, -2.6349046 ,  0.53159123, -0.29404472]])\n\n\n이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다(더 자세한 것은 맷플롯립 튜토리얼을 참고하세요):\n\n#%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nplt.hist(np.random.rand(100000), density=True, bins=100, histtype=\"step\", color=\"blue\", label=\"rand\")\n\n(array([1.0470063 , 1.01200609, 0.9800059 , 1.01200609, 0.9470057 ,\n       1.0140061 , 1.02600617, 1.0130061 , 1.00100602, 1.04400628,\n       0.96700582, 0.9810059 , 0.94300568, 0.95600575, 1.0300062 ,\n       1.02600617, 1.0140061 , 0.95500575, 1.01200609, 0.9800059 ,\n       1.01700612, 1.00300604, 1.03600624, 0.96600581, 0.93400562,\n       0.95700576, 1.05200633, 1.06000638, 0.96700582, 0.94800571,\n       1.05400634, 0.96900583, 1.00000602, 1.0460063 , 0.94300568,\n       1.04400628, 0.97200585, 1.03300622, 0.9810059 , 1.01500611,\n       0.94000566, 0.98900595, 0.96100578, 1.00000602, 1.01600611,\n       0.98800595, 0.98700594, 1.03700624, 0.96500581, 1.01500611,\n       1.02100614, 0.99100596, 0.94100566, 0.99400598, 0.95400574,\n       1.02600617, 1.02300616, 1.01700612, 1.01800613, 1.01600611,\n       1.01500611, 0.99000596, 0.98800595, 0.99800601, 0.97500587,\n       0.96900583, 0.96800583, 1.00500605, 1.00800607, 0.91000548,\n       1.01800613, 1.02800619, 1.02800619, 1.02700618, 0.98200591,\n       0.94600569, 0.94500569, 0.94900571, 1.03400622, 1.03200621,\n       1.04000626, 1.04100627, 1.0140061 , 1.00600605, 1.0310062 ,\n       1.03900625, 1.08600654, 0.997006  , 1.01900613, 1.02600617,\n       0.97100584, 1.02500617, 0.9800059 , 1.01700612, 1.02300616,\n       0.96700582, 1.0130061 , 1.0130061 , 0.97800589, 1.04300628]), array([4.46744825e-07, 1.00003866e-02, 2.00003264e-02, 3.00002662e-02,\n       4.00002060e-02, 5.00001458e-02, 6.00000856e-02, 7.00000255e-02,\n       7.99999653e-02, 8.99999051e-02, 9.99998449e-02, 1.09999785e-01,\n       1.19999725e-01, 1.29999664e-01, 1.39999604e-01, 1.49999544e-01,\n       1.59999484e-01, 1.69999424e-01, 1.79999363e-01, 1.89999303e-01,\n       1.99999243e-01, 2.09999183e-01, 2.19999123e-01, 2.29999063e-01,\n       2.39999002e-01, 2.49998942e-01, 2.59998882e-01, 2.69998822e-01,\n       2.79998762e-01, 2.89998701e-01, 2.99998641e-01, 3.09998581e-01,\n       3.19998521e-01, 3.29998461e-01, 3.39998401e-01, 3.49998340e-01,\n       3.59998280e-01, 3.69998220e-01, 3.79998160e-01, 3.89998100e-01,\n       3.99998039e-01, 4.09997979e-01, 4.19997919e-01, 4.29997859e-01,\n       4.39997799e-01, 4.49997738e-01, 4.59997678e-01, 4.69997618e-01,\n       4.79997558e-01, 4.89997498e-01, 4.99997438e-01, 5.09997377e-01,\n       5.19997317e-01, 5.29997257e-01, 5.39997197e-01, 5.49997137e-01,\n       5.59997076e-01, 5.69997016e-01, 5.79996956e-01, 5.89996896e-01,\n       5.99996836e-01, 6.09996776e-01, 6.19996715e-01, 6.29996655e-01,\n       6.39996595e-01, 6.49996535e-01, 6.59996475e-01, 6.69996414e-01,\n       6.79996354e-01, 6.89996294e-01, 6.99996234e-01, 7.09996174e-01,\n       7.19996114e-01, 7.29996053e-01, 7.39995993e-01, 7.49995933e-01,\n       7.59995873e-01, 7.69995813e-01, 7.79995752e-01, 7.89995692e-01,\n       7.99995632e-01, 8.09995572e-01, 8.19995512e-01, 8.29995452e-01,\n       8.39995391e-01, 8.49995331e-01, 8.59995271e-01, 8.69995211e-01,\n       8.79995151e-01, 8.89995090e-01, 8.99995030e-01, 9.09994970e-01,\n       9.19994910e-01, 9.29994850e-01, 9.39994789e-01, 9.49994729e-01,\n       9.59994669e-01, 9.69994609e-01, 9.79994549e-01, 9.89994489e-01,\n       9.99994428e-01]), [<matplotlib.patches.Polygon object at 0x0000021D06202D90>])\n\nplt.hist(np.random.randn(100000), density=True, bins=100, histtype=\"step\", color=\"red\", label=\"randn\")\n\n(array([1.18308755e-04, 0.00000000e+00, 0.00000000e+00, 1.18308755e-04,\n       3.54926264e-04, 3.54926264e-04, 3.54926264e-04, 1.18308755e-04,\n       1.77463132e-03, 8.28161283e-04, 1.41970506e-03, 2.01124883e-03,\n       2.24786634e-03, 1.06477879e-03, 2.95771887e-03, 4.37742392e-03,\n       5.32389396e-03, 7.33514279e-03, 1.04111704e-02, 1.02928617e-02,\n       1.52618294e-02, 1.90477095e-02, 2.68560873e-02, 2.82757924e-02,\n       3.58475527e-02, 4.25911517e-02, 4.55488705e-02, 6.06923911e-02,\n       6.79092252e-02, 8.43541421e-02, 9.52385475e-02, 1.10382068e-01,\n       1.23987575e-01, 1.35581833e-01, 1.66815344e-01, 1.78646220e-01,\n       1.94026358e-01, 2.09998040e-01, 2.30820380e-01, 2.58386320e-01,\n       2.76842486e-01, 2.96718357e-01, 3.06774601e-01, 3.39072891e-01,\n       3.41675683e-01, 3.56464278e-01, 3.69833167e-01, 3.73500738e-01,\n       3.89354112e-01, 4.00120208e-01, 3.89827347e-01, 3.96452637e-01,\n       3.85804849e-01, 3.88171024e-01, 3.80599264e-01, 3.77050001e-01,\n       3.49247444e-01, 3.45934799e-01, 3.27360324e-01, 2.99202841e-01,\n       2.80510057e-01, 2.60042643e-01, 2.39575228e-01, 2.34014717e-01,\n       2.08933261e-01, 1.78172985e-01, 1.60663289e-01, 1.43271902e-01,\n       1.28364999e-01, 1.08844054e-01, 1.03520160e-01, 8.43541421e-02,\n       7.12218703e-02, 6.10473174e-02, 5.19375433e-02, 4.46024005e-02,\n       3.83320365e-02, 3.69123315e-02, 2.60279260e-02, 2.03491058e-02,\n       1.64449169e-02, 1.23041105e-02, 1.08844054e-02, 9.34639162e-03,\n       7.57176030e-03, 4.73235019e-03, 5.56051147e-03, 2.95771887e-03,\n       2.12955758e-03, 2.01124883e-03, 1.30139630e-03, 5.91543773e-04,\n       8.28161283e-04, 1.18308755e-04, 5.91543773e-04, 2.36617509e-04,\n       2.36617509e-04, 2.36617509e-04, 1.18308755e-04, 2.36617509e-04]), array([-4.28134894, -4.19682434, -4.11229975, -4.02777515, -3.94325055,\n       -3.85872595, -3.77420135, -3.68967675, -3.60515215, -3.52062756,\n       -3.43610296, -3.35157836, -3.26705376, -3.18252916, -3.09800456,\n       -3.01347996, -2.92895537, -2.84443077, -2.75990617, -2.67538157,\n       -2.59085697, -2.50633237, -2.42180777, -2.33728318, -2.25275858,\n       -2.16823398, -2.08370938, -1.99918478, -1.91466018, -1.83013558,\n       -1.74561099, -1.66108639, -1.57656179, -1.49203719, -1.40751259,\n       -1.32298799, -1.23846339, -1.15393879, -1.0694142 , -0.9848896 ,\n       -0.900365  , -0.8158404 , -0.7313158 , -0.6467912 , -0.5622666 ,\n       -0.47774201, -0.39321741, -0.30869281, -0.22416821, -0.13964361,\n       -0.05511901,  0.02940559,  0.11393018,  0.19845478,  0.28297938,\n        0.36750398,  0.45202858,  0.53655318,  0.62107778,  0.70560237,\n        0.79012697,  0.87465157,  0.95917617,  1.04370077,  1.12822537,\n        1.21274997,  1.29727457,  1.38179916,  1.46632376,  1.55084836,\n        1.63537296,  1.71989756,  1.80442216,  1.88894676,  1.97347135,\n        2.05799595,  2.14252055,  2.22704515,  2.31156975,  2.39609435,\n        2.48061895,  2.56514354,  2.64966814,  2.73419274,  2.81871734,\n        2.90324194,  2.98776654,  3.07229114,  3.15681573,  3.24134033,\n        3.32586493,  3.41038953,  3.49491413,  3.57943873,  3.66396333,\n        3.74848793,  3.83301252,  3.91753712,  4.00206172,  4.08658632,\n        4.17111092]), [<matplotlib.patches.Polygon object at 0x0000021D05079490>])\n\nplt.axis([-2.5, 2.5, 0, 1.1])\n\n(-2.5, 2.5, 0.0, 1.1)\n\nplt.legend(loc = \"upper left\")\nplt.title(\"Random distributions\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\nplt.show()"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.fromfunction",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.fromfunction",
    "title": "week_1a_numpy",
    "section": "np.fromfunction",
    "text": "np.fromfunction\n함수를 사용하여 ndarray를 초기화할 수도 있습니다:\n\ndef my_function(z, y, x):\n    return x + 10 * y + 100 * z\n\nnp.fromfunction(my_function, (3, 2, 10))\n\narray([[[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n        [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.]],\n\n       [[100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n        [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.]],\n\n       [[200., 201., 202., 203., 204., 205., 206., 207., 208., 209.],\n        [210., 211., 212., 213., 214., 215., 216., 217., 218., 219.]]])\n\n\n넘파이는 먼저 크기가 (3, 2, 10)인 세 개의 ndarray(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, z 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다:\n[[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n  [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n\n [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n  [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]\n  [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]\n위의 식 x + 10 * y + 100 * z에서 x, y, z는 사실 ndarray입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 my_function이 원소마다 호출되는 것이 아니고 딱 한 번 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#dtype",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#dtype",
    "title": "week_1a_numpy",
    "section": "dtype",
    "text": "dtype\n넘파이의 ndarray는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. dtype 속성으로 쉽게 데이터 타입을 확인할 수 있습니다:\n\nc = np.arange(1, 5)\nprint(c.dtype, c)\n\nint32 [1 2 3 4]\n\n\n\nc = np.arange(1.0, 5.0)\nprint(c.dtype, c)\n\nfloat64 [1. 2. 3. 4.]\n\n\n넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 dtype 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다:\n\nd = np.arange(1, 5, dtype=np.complex64)\nprint(d.dtype, d)\n\ncomplex64 [1.+0.j 2.+0.j 3.+0.j 4.+0.j]\n\n\n가능한 데이터 타입은 int8, int16, int32, int64, uint8|16|32|64, float16|32|64, complex64|128가 있습니다. 전체 리스트는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#itemsize",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#itemsize",
    "title": "week_1a_numpy",
    "section": "itemsize",
    "text": "itemsize\nitemsize 속성은 각 아이템의 크기(바이트)를 반환합니다:\n\ne = np.arange(1, 5, dtype=np.complex64)\ne.itemsize\n\n8"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#data-버퍼",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#data-버퍼",
    "title": "week_1a_numpy",
    "section": "data 버퍼",
    "text": "data 버퍼\n배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. data 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).\n\nf = np.array([[1,2],[1000, 2000]], dtype=np.int32)\nf.data\n\n<memory at 0x0000021D0625ADC0>\n\n\n파이썬 2에서는 f.data가 버퍼이고 파이썬 3에서는 memoryview입니다.\n\nif (hasattr(f.data, \"tobytes\")):\n    data_bytes = f.data.tobytes() # python 3\nelse:\n    data_bytes = memoryview(f.data).tobytes() # python 2\n\ndata_bytes\n\nb'\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xe8\\x03\\x00\\x00\\xd0\\x07\\x00\\x00'\n\n\n여러 개의 ndarray가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#자신을-변경",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#자신을-변경",
    "title": "week_1a_numpy",
    "section": "자신을 변경",
    "text": "자신을 변경\nndarray의 shape 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.\n\ng = np.arange(24)\nprint(g)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n\nprint(\"랭크:\", g.ndim)\n\n랭크: 1\n\n\n\ng.shape = (6, 4)\nprint(g)\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n\nprint(\"랭크:\", g.ndim)\n\n랭크: 2\n\n\n\ng.shape = (2, 3, 4)\nprint(g)\n\n[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n\nprint(\"랭크:\", g.ndim)\n\n랭크: 3\n\n\n\ng[1,1,1]\n\n17"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#reshape",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#reshape",
    "title": "week_1a_numpy",
    "section": "reshape",
    "text": "reshape\nreshape 함수는 동일한 데이터를 가리키는 새로운 ndarray 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.\n\ng2 = g.reshape(4,6)\nprint(g2)\n\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]]\n\nprint(\"랭크:\", g2.ndim)\n\n랭크: 2\n\n\n\ng[0,0,0] = 10\ng2\n\narray([[10,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n행 1, 열 2의 원소를 999로 설정합니다(인덱싱 방식은 아래를 참고하세요).\n\ng2[1, 2] = 999\ng2\n\narray([[ 10,   1,   2,   3,   4,   5],\n       [  6,   7, 999,   9,  10,  11],\n       [ 12,  13,  14,  15,  16,  17],\n       [ 18,  19,  20,  21,  22,  23]])\n\n\n이에 상응하는 g의 원소도 수정됩니다.\n\ng\n\narray([[[ 10,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])\n\n\n완전히 다른 공간에 값만 같게 복사를 하고 싶다면 copy를 사용.\n이렇게 할 경우 두 객체는 독립적인 객체로 존재함\n\ng2 = g.copy()"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#ravel",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#ravel",
    "title": "week_1a_numpy",
    "section": "ravel",
    "text": "ravel\n마지막으로 ravel 함수는 동일한 데이터를 가리키는 새로운 1차원 ndarray를 반환합니다:\n\ng.ravel()\n\narray([ 10,   1,   2,   3,   4,   5,   6,   7, 999,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#규칙-1",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#규칙-1",
    "title": "week_1a_numpy",
    "section": "규칙 1",
    "text": "규칙 1\n배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.\n\nh = np.arange(5).reshape(1, 1, 5)\nh\n\narray([[[0, 1, 2, 3, 4]]])\n\n\n여기에 (1,1,5) 크기의 3D 배열에 (5,) 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!\n\nh + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]\n\narray([[[10, 21, 32, 43, 54]]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#규칙-2",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#규칙-2",
    "title": "week_1a_numpy",
    "section": "규칙 2",
    "text": "규칙 2\n특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.\n\nk = np.arange(6).reshape(2, 3)\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\n[[100], [200]]\n\n[[100], [200]]\n\n\n(2,3) 크기의 2D ndarray에 (2,1) 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다:\n\nk + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]\n\narray([[100, 101, 102],\n       [203, 204, 205]])\n\n\n규칙 1과 2를 합치면 다음과 같이 동작합니다:\n(2,3) 크기의 ndarray에 (3,) 크기의 ndarray 더하기\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\nk + [100, 200, 300]  # 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]\n\narray([[100, 201, 302],\n       [103, 204, 305]])\n\n\n\ntest = np.array([100, 200, 300])\ntest.shape\n\n(3,)\n\ntest\n\narray([100, 200, 300])\n\n\n\n# step 1\ntest = test.reshape(1,3)\ntest\n\narray([[100, 200, 300]])\n\n\n\n# step 2\nnp.vstack((test,test))\n\narray([[100, 200, 300],\n       [100, 200, 300]])\n\n\n\n# step 2\nnp.concatenate((test,test),axis=0)\n\narray([[100, 200, 300],\n       [100, 200, 300]])\n\n\n또 매우 간단히 다음 처럼 해도 됩니다:\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\nk + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]\n\narray([[1000, 1001, 1002],\n       [1003, 1004, 1005]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#규칙-3",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#규칙-3",
    "title": "week_1a_numpy",
    "section": "규칙 3",
    "text": "규칙 3\n규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.\n\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\ntry:\n    k + [33, 44]\nexcept ValueError as e:\n    print(e)\n\noperands could not be broadcast together with shapes (2,3) (2,) \n\n\n브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 온라인 문서를 참고하세요.\n\na = np.array([[0.0],[10.0],[20.0],[30.0]])\n\n\na\n\narray([[ 0.],\n       [10.],\n       [20.],\n       [30.]])\n\n\n\na = np.array([0.0, 10.0, 20.0, 30.0])\nb = np.array([1.0, 2.0, 3.0])\na[:, np.newaxis] + b\n\narray([[ 1.,  2.,  3.],\n       [11., 12., 13.],\n       [21., 22., 23.],\n       [31., 32., 33.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#업캐스팅",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#업캐스팅",
    "title": "week_1a_numpy",
    "section": "업캐스팅",
    "text": "업캐스팅\ndtype이 다른 배열을 합칠 때 넘파이는 (실제 값에 상관없이) 모든 값을 다룰 수 있는 타입으로 업캐스팅합니다.\n\nk1 = np.arange(0, 5, dtype=np.uint8)\nprint(k1.dtype, k1)\n\nuint8 [0 1 2 3 4]\n\n\n\nk2 = k1 + np.array([5, 6, 7, 8, 9], dtype=np.int8)\nprint(k2.dtype, k2)\n\nint16 [ 5  7  9 11 13]\n\n\n모든 int8과 uint8 값(-128에서 255까지)을 표현하기 위해 int16이 필요합니다. 이 코드에서는 uint8이면 충분하지만 업캐스팅되었습니다.\n\nk3 = k1 + 1.5\nprint(k3.dtype, k3)\n\nfloat64 [1.5 2.5 3.5 4.5 5.5]"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#ndarray-메서드",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#ndarray-메서드",
    "title": "week_1a_numpy",
    "section": "ndarray 메서드",
    "text": "ndarray 메서드\n일부 함수는 ndarray 메서드로 제공됩니다. 예를 들면:\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nprint(a)\n\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\nprint(\"평균 =\", a.mean())\n\n평균 = 6.766666666666667\n\n\n이 명령은 크기에 상관없이 ndarray에 있는 모든 원소의 평균을 계산합니다.\n다음은 유용한 ndarray 메서드입니다:\n\nfor func in (a.min, a.max, a.sum, a.prod, a.std, a.var):\n    print(func.__name__, \"=\", func())\n\nmin = -2.5\nmax = 12.0\nsum = 40.6\nprod = -71610.0\nstd = 5.084835843520964\nvar = 25.855555555555554\n\n\n이 함수들은 선택적으로 매개변수 axis를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면:\n\nc=np.arange(24).reshape(2,3,4)\nc\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nc.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열\n\narray([[12, 14, 16, 18],\n       [20, 22, 24, 26],\n       [28, 30, 32, 34]])\n\n\n\nc.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열\n\narray([[12, 15, 18, 21],\n       [48, 51, 54, 57]])\n\n\n\nc.sum(axis=2) \n\narray([[ 6, 22, 38],\n       [54, 70, 86]])\n\n\n여러 축에 대해서 더할 수도 있습니다:\n\nc\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nc.sum(axis=(0,2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열\n\narray([ 60,  92, 124])\n\n\n\n0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23\n\n(60, 92, 124)"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#일반-함수",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#일반-함수",
    "title": "week_1a_numpy",
    "section": "일반 함수",
    "text": "일반 함수\n넘파이는 일반 함수(universal function) 또는 ufunc라고 부르는 원소별 함수를 제공합니다. 예를 들면 square 함수는 원본 ndarray를 복사하여 각 원소를 제곱한 새로운 ndarray 객체를 반환합니다:\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nnp.square(a)\n\narray([[  6.25,   9.61,  49.  ],\n       [100.  , 121.  , 144.  ]])\n\n\n다음은 유용한 단항 일반 함수들입니다:\n\nprint(\"원본 ndarray\")\n\n원본 ndarray\n\nprint(a)\n\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\nfor func in (np.abs, np.sqrt, np.exp, np.log, np.sign, np.ceil, np.modf, np.isnan, np.cos):\n    print(\"\\n\", func.__name__)\n    print(func(a))\n\n\n absolute\n[[ 2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n sqrt\n[[       nan 1.76068169 2.64575131]\n [3.16227766 3.31662479 3.46410162]]\n\n exp\n[[8.20849986e-02 2.21979513e+01 1.09663316e+03]\n [2.20264658e+04 5.98741417e+04 1.62754791e+05]]\n\n log\n[[       nan 1.13140211 1.94591015]\n [2.30258509 2.39789527 2.48490665]]\n\n sign\n[[-1.  1.  1.]\n [ 1.  1.  1.]]\n\n ceil\n[[-2.  4.  7.]\n [10. 11. 12.]]\n\n modf\n(array([[-0.5,  0.1,  0. ],\n       [ 0. ,  0. ,  0. ]]), array([[-2.,  3.,  7.],\n       [10., 11., 12.]]))\n\n isnan\n[[False False False]\n [False False False]]\n\n cos\n[[-0.80114362 -0.99913515  0.75390225]\n [-0.83907153  0.0044257   0.84385396]]\n\n<string>:3: RuntimeWarning: invalid value encountered in sqrt\n<string>:3: RuntimeWarning: invalid value encountered in log"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#이항-일반-함수",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#이항-일반-함수",
    "title": "week_1a_numpy",
    "section": "이항 일반 함수",
    "text": "이항 일반 함수\n두 개의 ndarray에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다:\n\na = np.array([1, -2, 3, 4])\nb = np.array([2, 8, -1, 7])\nnp.add(a, b)  # a + b 와 동일\n\narray([ 3,  6,  2, 11])\n\n\n\nnp.greater(a, b)  # a > b 와 동일\n\narray([False, False,  True, False])\n\n\n\nnp.maximum(a, b)\n\narray([2, 8, 3, 7])\n\n\n\nnp.copysign(a, b)\n\narray([ 1.,  2., -3.,  4.])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#차원-배열",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#차원-배열",
    "title": "week_1a_numpy",
    "section": "1차원 배열",
    "text": "1차원 배열\n1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다:\n\na = np.array([1, 5, 3, 19, 13, 7, 3])\na[3]\n\n19\n\n\n\na[2:5]\n\narray([ 3, 19, 13])\n\n\n\na[2:-1]\n\narray([ 3, 19, 13,  7])\n\n\n\na[:2]\n\narray([1, 5])\n\n\n\na[2::2]\n\narray([ 3, 13,  3])\n\n\n\na[::-1]\n\narray([ 3,  7, 13, 19,  3,  5,  1])\n\n\n물론 원소를 수정할 수 있죠:\n\na[3]=999\na\n\narray([  1,   5,   3, 999,  13,   7,   3])\n\n\n슬라이싱을 사용해 ndarray를 수정할 수 있습니다:\n\na[2:5] = [997, 998, 999]\na\n\narray([  1,   5, 997, 998, 999,   7,   3])\n\n\nQuiz. 아래의 array를 사용해서 다음 퀴즈를 풀어봅시다.\n\nnp.arange(5,50,5).reshape(3,3)\n\narray([[ 5, 10, 15],\n       [20, 25, 30],\n       [35, 40, 45]])\n\n\n\nimport numpy as np\n\narray_2d = np.array([[5, 10, 15],\n                     [20, 25, 30],\n                     [35, 40, 45]])\n\n\n2차원 배열 ’array_2d’에서 첫 번째 행(row)의 모든 요소를 선택해 보세요.\n\n힌트: 인덱싱을 사용하여 첫 번째 행을 선택할 수 있습니다.\n\n2차원 배열 ’array_2d’에서 두 번째 열(column)의 모든 요소를 선택해 보세요.\n\n힌트: 인덱싱과 슬라이싱을 사용하여 두 번째 열을 선택할 수 있습니다.\n\n2차원 배열 ’array_2d’에서 다음 요소들을 선택해 보세요: 25, 30, 40, 45\n\n힌트: 팬시 인덱싱(fancy indexing)을 사용하여 여러 요소를 한 번에 선택할 수 있습니다."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#보통의-파이썬-배열과-차이점",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#보통의-파이썬-배열과-차이점",
    "title": "week_1a_numpy",
    "section": "보통의 파이썬 배열과 차이점",
    "text": "보통의 파이썬 배열과 차이점\n보통의 파이썬 배열과 대조적으로 ndarray 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.\n\na\n\narray([  1,   5, 997, 998, 999,   7,   3])\n\n\n\na[2:5] = -1\na\n\narray([ 1,  5, -1, -1, -1,  7,  3])\n\n\nList는 브로드캐스팅으로 할당이 안됨\n\nb = [1, 5, 3, 19, 13, 7, 3]\n#b[2:5] = -1\n\n또한 이런 식으로 ndarray 크기를 늘리거나 줄일 수 없습니다:\n\ntry:\n    a[2:5] = [1,2,3,4,5,6]  # 너무 길어요\nexcept ValueError as e:\n    print(e)\n\ncould not broadcast input array from shape (6,) into shape (3,)\n\n\n원소를 삭제할 수도 없습니다:\n\ntry:\n    del a[2:5]\nexcept ValueError as e:\n    print(e)\n\ncannot delete array elements\n\n\nList에서는 삭제가 가능\n\nb = [1, 5, 3, 19, 13, 7, 3] \ndel b[2:5]\nb\n\n[1, 5, 7, 3]\n\n\n중요한 점은 ndarray의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 ndarray가 수정됩니다!\n\na_slice = a[2:6]\na_slice[1] = 1000\na  # 원본 배열이 수정됩니다!\n\narray([   1,    5,   -1, 1000,   -1,    7,    3])\n\n\n\na[3] = 2000\na_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다!\n\narray([  -1, 2000,   -1,    7])\n\n\n데이터를 복사하려면 copy 메서드를 사용해야 합니다:\n\nanother_slice = a[2:6].copy()\nanother_slice[1] = 3000\na  # 원본 배열이 수정되지 않습니다\n\narray([   1,    5,   -1, 2000,   -1,    7,    3])\n\n\n\na[3] = 4000\nanother_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다\n\narray([  -1, 3000,   -1,    7])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#다차원-배열",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#다차원-배열",
    "title": "week_1a_numpy",
    "section": "다차원 배열",
    "text": "다차원 배열\n다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb[1, 2]  # 행 1, 열 2\n\n14\n\n\n\nb[1, :]  # 행 1, 모든 열\n\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\n\n\nb[:, 1]  # 모든 행, 열 1\n\narray([ 1, 13, 25, 37])\n\n\n주의: 다음 두 표현에는 미묘한 차이가 있습니다:\n\nb[1, :]\n\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\n\n\nb[1:2, :]\n\narray([[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\nb[1, :].shape\n\n(12,)\n\n\n\nb[1:2, :].shape\n\n(1, 12)\n\n\n첫 번째 표현식은 (12,) 크기인 1D 배열로 행이 하나입니다. 두 번째는 (1, 12) 크기인 2D 배열로 같은 행을 반환합니다."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#팬시-인덱싱fancy-indexing",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#팬시-인덱싱fancy-indexing",
    "title": "week_1a_numpy",
    "section": "팬시 인덱싱(Fancy indexing)",
    "text": "팬시 인덱싱(Fancy indexing)\n관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.\n\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb[(2,3),0:2]\n\narray([[24, 25],\n       [36, 37]])\n\n\n\nb[2:,0:2]\n\narray([[24, 25],\n       [36, 37]])\n\n\n\nb[(0,2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지\n\narray([[ 2,  3,  4],\n       [26, 27, 28]])\n\n\n\nb[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)\n\narray([[11,  2, 11],\n       [23, 14, 23],\n       [35, 26, 35],\n       [47, 38, 47]])\n\n\n여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D ndarray를 반환됩니다.\n\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb[(-1, 2, -1, 2), (5, 9, 1, 9)]  # returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)\n\narray([41, 33, 37, 33])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#고차원",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#고차원",
    "title": "week_1a_numpy",
    "section": "고차원",
    "text": "고차원\n고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다:\n\nc = b.reshape(4,2,6)\nc\n\narray([[[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]],\n\n       [[12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23]],\n\n       [[24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35]],\n\n       [[36, 37, 38, 39, 40, 41],\n        [42, 43, 44, 45, 46, 47]]])\n\n\n\nc[2, 1, 4]  # 행렬 2, 행 1, 열 4\n\n34\n\n\n\nc[2, :, 3]  # 행렬 2, 모든 행, 열 3\n\narray([27, 33])\n\n\n어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:\n\nc[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.\n\narray([30, 31, 32, 33, 34, 35])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#생략-부호-...",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#생략-부호-...",
    "title": "week_1a_numpy",
    "section": "생략 부호 (...)",
    "text": "생략 부호 (...)\n생략 부호(...)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.\n\nc[2, ...]  #  행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일\n\narray([[24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\n\n\nc[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일\n\narray([30, 31, 32, 33, 34, 35])\n\n\n\nc[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일\n\narray([27, 33])\n\n\n\nc[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일\n\narray([[ 3,  9],\n       [15, 21],\n       [27, 33],\n       [39, 45]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#불리언-인덱싱",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#불리언-인덱싱",
    "title": "week_1a_numpy",
    "section": "불리언 인덱싱",
    "text": "불리언 인덱싱\n불리언 값을 가진 ndarray를 사용해 축의 인덱스를 지정할 수 있습니다.\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nrows_on = np.array([True, False, True, False])\nb[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]])\n\n\n\ncols_on = np.array([False, True, False] * 4)\nb[:, cols_on]  # 모든 행, 열 1, 4, 7, 10\n\narray([[ 1,  4,  7, 10],\n       [13, 16, 19, 22],\n       [25, 28, 31, 34],\n       [37, 40, 43, 46]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#np.ix_",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#np.ix_",
    "title": "week_1a_numpy",
    "section": "np.ix_",
    "text": "np.ix_\n여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 ix_ 함수를 사용합니다:\n\nb[np.ix_((0,2),(1,4,7,10))]\n\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n\n\n\nb[np.ix_(rows_on, cols_on)]\n\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n\n\n\nnp.ix_(rows_on, cols_on)\n\n(array([[0],\n       [2]], dtype=int64), array([[ 1,  4,  7, 10]], dtype=int64))\n\n\nndarray와 같은 크기의 불리언 배열을 사용하면 해당 위치가 True인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다:\n\nb.shape\n\n(4, 12)\n\n\n\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb % 3 == 1\n\narray([[False,  True, False, False,  True, False, False,  True, False,\n        False,  True, False],\n       [False,  True, False, False,  True, False, False,  True, False,\n        False,  True, False],\n       [False,  True, False, False,  True, False, False,  True, False,\n        False,  True, False],\n       [False,  True, False, False,  True, False, False,  True, False,\n        False,  True, False]])\n\n\n\nb[b % 3 == 1]\n\narray([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#vstack",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#vstack",
    "title": "week_1a_numpy",
    "section": "vstack",
    "text": "vstack\nvstack 함수를 사용하여 수직으로 쌓아보죠:\n\nq4 = np.vstack((q1, q2, q3))\nq4\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq4.shape\n\n(10, 4)\n\n\nq1, q2, q3가 모두 같은 크기이므로 가능합니다(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다)."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#hstack",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#hstack",
    "title": "week_1a_numpy",
    "section": "hstack",
    "text": "hstack\nhstack을 사용해 수평으로도 쌓을 수 있습니다:\n\nq5 = np.hstack((q1, q3))\nq5\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n\n\n\nq5.shape\n\n(3, 8)\n\n\nq1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다:\n\ntry:\n    q5 = np.hstack((q1, q2, q3))\nexcept ValueError as e:\n    print(e)\n\nall the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 3 and the array at index 1 has size 4"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#concatenate",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#concatenate",
    "title": "week_1a_numpy",
    "section": "concatenate",
    "text": "concatenate\nconcatenate 함수는 지정한 축으로도 배열을 쌓습니다.\n\nq1.shape, q2.shape,q3.shape\n\n((3, 4), (4, 4), (3, 4))\n\n\n\nq7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일\nq7\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq7.shape\n\n(10, 4)\n\n\n예상했겠지만 hstack은 axis=1으로 concatenate를 호출하는 것과 같습니다.\n\nq5 = np.hstack((q1, q3))\nq5\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n\n\n\nnp.concatenate((q1,q3),axis=1)\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#stack",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#stack",
    "title": "week_1a_numpy",
    "section": "stack",
    "text": "stack\nstack 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.\n\nq1.shape\n\n(3, 4)\n\n\n\nq3.shape\n\n(3, 4)\n\n\n\nq8 = np.stack((q1, q3))\nq8\n\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]]])\n\n\n\nq8.shape\n\n(2, 3, 4)"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#행렬-전치",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#행렬-전치",
    "title": "week_1a_numpy",
    "section": "행렬 전치",
    "text": "행렬 전치\nT 속성은 랭크가 2보다 크거나 같을 때 transpose()를 호출하는 것과 같습니다:\n\nm1 = np.arange(10).reshape(2,5)\nm1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nm1.T\n\narray([[0, 5],\n       [1, 6],\n       [2, 7],\n       [3, 8],\n       [4, 9]])\n\n\nT 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다:\n\nm2 = np.arange(5)\nm2\n\narray([0, 1, 2, 3, 4])\n\n\n\nm2.T\n\narray([0, 1, 2, 3, 4])\n\n\n먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다:\n\nm2r = m2.reshape(1,5)\nm2r\n\narray([[0, 1, 2, 3, 4]])\n\n\n\nm2r.T\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#행렬-곱셈",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#행렬-곱셈",
    "title": "week_1a_numpy",
    "section": "행렬 곱셈",
    "text": "행렬 곱셈\n두 개의 행렬을 만들어 dot 메서드로 행렬 곱셈을 실행해 보죠.\n\nn1 = np.arange(10).reshape(2, 5)\nn1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nn2 = np.arange(15).reshape(5,3)\nn2\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n\n\nn1.dot(n2)\n\narray([[ 90, 100, 110],\n       [240, 275, 310]])\n\n\n주의: 앞서 언급한 것처럼 n1*n2는 행렬 곱셈이 아니라 원소별 곱셈(또는 아다마르 곱이라 부릅니다)입니다."
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#역행렬과-유사-역행렬",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#역행렬과-유사-역행렬",
    "title": "week_1a_numpy",
    "section": "역행렬과 유사 역행렬",
    "text": "역행렬과 유사 역행렬\nnumpy.linalg 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 inv 함수는 정방 행렬의 역행렬을 계산합니다:\n\nimport numpy.linalg as linalg\n\nm3 = np.array([[1,2,3],[5,7,11],[21,29,31]])\nm3\n\narray([[ 1,  2,  3],\n       [ 5,  7, 11],\n       [21, 29, 31]])\n\n\n\nlinalg.inv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\n\n\npinv 함수를 사용하여 유사 역행렬을 계산할 수도 있습니다:\n\nlinalg.pinv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#단위-행렬",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#단위-행렬",
    "title": "week_1a_numpy",
    "section": "단위 행렬",
    "text": "단위 행렬\n행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다(작은 소숫점 오차가 있습니다):\n\nm3.dot(linalg.inv(m3))\n\narray([[ 1.00000000e+00, -1.66533454e-16,  0.00000000e+00],\n       [ 6.31439345e-16,  1.00000000e+00, -1.38777878e-16],\n       [ 5.21110932e-15, -2.38697950e-15,  1.00000000e+00]])\n\n\neye 함수는 NxN 크기의 단위 행렬을 만듭니다:\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#qr-분해",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#qr-분해",
    "title": "week_1a_numpy",
    "section": "QR 분해",
    "text": "QR 분해\nqr 함수는 행렬을 QR 분해합니다:\n\nq, r = linalg.qr(m3)\nq\n\narray([[-0.04627448,  0.98786672,  0.14824986],\n       [-0.23137241,  0.13377362, -0.96362411],\n       [-0.97176411, -0.07889213,  0.22237479]])\n\n\n\nr\n\narray([[-21.61018278, -29.89331494, -32.80860727],\n       [  0.        ,   0.62427688,   1.9894538 ],\n       [  0.        ,   0.        ,  -3.26149699]])\n\n\n\nq.dot(r)  # q.r는 m3와 같습니다\n\narray([[ 1.,  2.,  3.],\n       [ 5.,  7., 11.],\n       [21., 29., 31.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#행렬식",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#행렬식",
    "title": "week_1a_numpy",
    "section": "행렬식",
    "text": "행렬식\ndet 함수는 행렬식을 계산합니다:\n\nlinalg.det(m3)  # 행렬식 계산\n\n43.99999999999997"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#고윳값과-고유벡터",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#고윳값과-고유벡터",
    "title": "week_1a_numpy",
    "section": "고윳값과 고유벡터",
    "text": "고윳값과 고유벡터\neig 함수는 정방 행렬의 고윳값과 고유벡터를 계산합니다:\n\neigenvalues, eigenvectors = linalg.eig(m3)\neigenvalues # λ\n\narray([42.26600592, -0.35798416, -2.90802176])\n\n\n\neigenvectors # v\n\narray([[-0.08381182, -0.76283526, -0.18913107],\n       [-0.3075286 ,  0.64133975, -0.6853186 ],\n       [-0.94784057, -0.08225377,  0.70325518]])\n\n\n\nm3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0\n\narray([[ 8.88178420e-15,  2.22044605e-16, -3.10862447e-15],\n       [ 3.55271368e-15,  2.02615702e-15, -1.11022302e-15],\n       [ 3.55271368e-14,  3.33413852e-15, -8.43769499e-15]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#특잇값-분해",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#특잇값-분해",
    "title": "week_1a_numpy",
    "section": "특잇값 분해",
    "text": "특잇값 분해\nsvd 함수는 행렬을 입력으로 받아 그 행렬의 특잇값 분해를 반환합니다:\n\nm4 = np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])\nm4\n\narray([[1, 0, 0, 0, 2],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0]])\n\n\n\nU, S_diag, V = linalg.svd(m4)\nU\n\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0., -1.],\n       [ 0.,  0.,  1.,  0.]])\n\n\n\nS_diag\n\narray([3.        , 2.23606798, 2.        , 0.        ])\n\n\nsvd 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다:\n\nS = np.zeros((4, 5))\nS[np.diag_indices(4)] = S_diag\nS  # Σ\n\narray([[3.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.        , 2.23606798, 0.        , 0.        , 0.        ],\n       [0.        , 0.        , 2.        , 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ]])\n\n\n\nV\n\narray([[-0.        ,  0.        ,  1.        , -0.        ,  0.        ],\n       [ 0.4472136 ,  0.        ,  0.        ,  0.        ,  0.89442719],\n       [-0.        ,  1.        ,  0.        , -0.        ,  0.        ],\n       [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ],\n       [-0.89442719,  0.        ,  0.        ,  0.        ,  0.4472136 ]])\n\n\n\nU.dot(S).dot(V) # U.Σ.V == m4\n\narray([[1., 0., 0., 0., 2.],\n       [0., 0., 3., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#대각원소와-대각합",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#대각원소와-대각합",
    "title": "week_1a_numpy",
    "section": "대각원소와 대각합",
    "text": "대각원소와 대각합\n\nnp.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)\n\narray([ 1,  7, 31])\n\n\n\nnp.trace(m3)  # np.diag(m3).sum()와 같습니다\n\n39"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#선형-방정식-풀기",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#선형-방정식-풀기",
    "title": "week_1a_numpy",
    "section": "선형 방정식 풀기",
    "text": "선형 방정식 풀기\nsolve 함수는 다음과 같은 선형 방정식을 풉니다:\n\n\\(2x + 6y = 6\\)\n\\(5x + 3y = -9\\)\n\n\ncoeffs  = np.array([[2, 6], [5, 3]])\ndepvars = np.array([6, -9])\nsolution = linalg.solve(coeffs, depvars)\nsolution\n\narray([-3.,  2.])\n\n\nsolution을 확인해 보죠:\n\ncoeffs.dot(solution), depvars  # 네 같네요\n\n(array([ 6., -9.]), array([ 6, -9]))\n\n\n좋습니다! 다른 방식으로도 solution을 확인해 보죠:\n\nnp.allclose(coeffs.dot(solution), depvars)\n\nTrue"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#바이너리-.npy-포맷",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#바이너리-.npy-포맷",
    "title": "week_1a_numpy",
    "section": "바이너리 .npy 포맷",
    "text": "바이너리 .npy 포맷\n랜덤 배열을 만들고 저장해 보죠.\n\na = np.random.rand(2,3)\na\n\narray([[0.03175123, 0.37150321, 0.81490073],\n       [0.22617662, 0.48112195, 0.54110571]])\n\n\n\n# np.save(\"my_array\", a)\n\n끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 .npy를 붙입니다. 파일 내용을 확인해 보겠습니다:\n\n#with open(\"my_array.npy\", \"rb\") as f:\n#    content = f.read()\n\n#content\n\n이 파일을 넘파이 배열로 로드하려면 load 함수를 사용합니다:\n\n#a_loaded = np.load(\"my_array.npy\")\n#a_loaded"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#텍스트-포맷",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#텍스트-포맷",
    "title": "week_1a_numpy",
    "section": "텍스트 포맷",
    "text": "텍스트 포맷\n배열을 텍스트 포맷으로 저장해 보죠:\n\n#np.savetxt(\"my_array.csv\", a)\n\n파일 내용을 확인해 보겠습니다:\n\n#with open(\"my_array.csv\", \"rt\") as f:\n#    print(f.read())\n\n이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다:\n\n#np.savetxt(\"my_array.csv\", a, delimiter=\",\")\n\n이 파일을 로드하려면 loadtxt 함수를 사용합니다:\n\n#a_loaded = np.loadtxt(\"my_array.csv\", delimiter=\",\")\n#a_loaded"
  },
  {
    "objectID": "posts/week_1a_numpy/week_1a_numpy.html#압축된-.npz-포맷",
    "href": "posts/week_1a_numpy/week_1a_numpy.html#압축된-.npz-포맷",
    "title": "week_1a_numpy",
    "section": "압축된 .npz 포맷",
    "text": "압축된 .npz 포맷\n여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다:\n\nb = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)\nb\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]], dtype=uint8)\n\n\n\n#np.savez(\"my_arrays\", my_a=a, my_b=b)\n\n파일 내용을 확인해 보죠. .npz 파일 확장자가 자동으로 추가되었습니다.\n\n#with open(\"my_arrays.npz\", \"rb\") as f:\n#    content = f.read()\n\n#repr(content)[:180] + \"[...]\"\n\n다음과 같이 이 파일을 로드할 수 있습니다:\n\n#my_arrays = np.load(\"my_arrays.npz\")\n#my_arrays\n\n게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:\n\n#list(my_arrays.keys())\n\n\n#my_arrays[\"my_a\"]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#series-만들기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#series-만들기",
    "title": "week_1b_pandas",
    "section": "Series 만들기",
    "text": "Series 만들기\n첫 번째 Series 객체를 만들어 보죠!\n\nimport numpy as np\nnp.array([2,-1,3,5])\n\narray([ 2, -1,  3,  5])\n\n\n\ns = pd.Series([2,-1,3,5])\ns\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#d-ndarray와-비슷합니다",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#d-ndarray와-비슷합니다",
    "title": "week_1b_pandas",
    "section": "1D ndarray와 비슷합니다",
    "text": "1D ndarray와 비슷합니다\nSeries 객체는 넘파이 ndarray와 비슷하게 동작합니다. 넘파이 함수에 매개변수로 종종 전달할 수 있습니다:\n\nimport numpy as np\nnp.exp(s)\n\n0      7.389056\n1      0.367879\n2     20.085537\n3    148.413159\ndtype: float64\n\n\nSeries 객체에 대한 산술 연산도 가능합니다. ndarray와 비슷하게 원소별로 적용됩니다:\n\ns + [1000,2000,3000,4000]\n\n0    1002\n1    1999\n2    3003\n3    4005\ndtype: int64\n\n\n넘파이와 비슷하게 Series에 하나의 숫자를 더하면 Series에 있는 모든 원소에 더해집니다. 이를 브로드캐스팅(broadcasting)이라고 합니다:\n\ns\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64\n\n\n\ns + 1000\n\n0    1002\n1     999\n2    1003\n3    1005\ndtype: int64\n\n\n*나 / 같은 모든 이항 연산과 심지어 조건 연산에서도 마찬가지입니다:\n\ns < 0\n\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#인덱스-레이블",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#인덱스-레이블",
    "title": "week_1b_pandas",
    "section": "인덱스 레이블",
    "text": "인덱스 레이블\nSeries 객체에 있는 각 원소는 인덱스 레이블(index label)이라 불리는 고유한 식별자를 가지고 있습니다. 기본적으로 Series에 있는 원소의 순서입니다(0에서 시작합니다). 하지만 수동으로 인덱스 레이블을 지정할 수도 있습니다:\n\ns2 = pd.Series([68, 83, 112, 68], index=[\"alice\", \"bob\", \"charles\", \"darwin\"])\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n그다음 dict처럼 Series를 사용할 수 있습니다:\n\ns2[\"bob\"]\n\n83\n\n\n일반 배열처럼 정수 인덱스를 사용하여 계속 원소에 접근할 수 있습니다:\n\ns2[1]\n\n83\n\n\n레이블이나 정수를 사용해 접근할 때 명확하게 하기 위해 레이블은 loc 속성을 사용하고 정수는 iloc 속성을 사용하는 것이 좋습니다:\n\ns2.loc[\"bob\"]\n\n83\n\n\n\ns2.iloc[1]\n\n83\n\n\nSeries는 인덱스 레이블을 슬라이싱할 수도 있습니다:\n\ns2.iloc[1:3]\n\nbob         83\ncharles    112\ndtype: int64\n\n\n기본 정수 레이블을 사용할 때 예상 외의 결과를 만들 수 있기 때문에 주의해야 합니다:\n\nsurprise = pd.Series([1000, 1001, 1002, 1003])\nsurprise\n\n0    1000\n1    1001\n2    1002\n3    1003\ndtype: int64\n\n\n\nsurprise_slice = surprise[2:]\nsurprise_slice\n\n2    1002\n3    1003\ndtype: int64\n\n\n보세요. 첫 번째 원소의 인덱스 레이블이 2입니다. 따라서 슬라이싱 결과에서 인덱스 레이블 0인 원소는 없습니다:\n\ntry:\n    surprise_slice[0]\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 0\n\n\n하지만 iloc 속성을 사용해 정수 인덱스로 원소에 접근할 수 있습니다. Series 객체를 사용할 때 loc와 iloc를 사용하는 것이 좋은 이유입니다:\n\nsurprise_slice.iloc[0]\n\n1002\n\n\n\nsurprise_slice.loc[2]\n\n1002"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dict에서-초기화",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dict에서-초기화",
    "title": "week_1b_pandas",
    "section": "dict에서 초기화",
    "text": "dict에서 초기화\ndict에서 Series 객체를 만들 수 있습니다. 키는 인덱스 레이블로 사용됩니다:\n\nweights = {\"alice\": 68, \"bob\": 83, \"colin\": 86, \"darwin\": 68}\ns3 = pd.Series(weights)\ns3\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\nSeries에 포함할 원소를 제어하고 index를 지정하여 명시적으로 순서를 결정할 수 있습니다:\n\ns4 = pd.Series(weights, index = [\"colin\", \"alice\"])\ns4\n\ncolin    86\nalice    68\ndtype: int64"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#자동-정렬",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#자동-정렬",
    "title": "week_1b_pandas",
    "section": "자동 정렬",
    "text": "자동 정렬\n여러 개의 Series 객체를 다룰 때 pandas는 자동으로 인덱스 레이블에 따라 원소를 정렬합니다.\n\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n\ns3\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\n\nprint(s2.keys())\n\nIndex(['alice', 'bob', 'charles', 'darwin'], dtype='object')\n\nprint(s3.keys())\n\nIndex(['alice', 'bob', 'colin', 'darwin'], dtype='object')\n\ns2 + s3\n\nalice      136.0\nbob        166.0\ncharles      NaN\ncolin        NaN\ndarwin     136.0\ndtype: float64\n\n\n만들어진 Series는 s2와 s3의 인덱스 레이블의 합집합을 담고 있습니다. s2에 \"colin\"이 없고 s3에 \"charles\"가 없기 때문에 이 원소는 NaN 값을 가집니다(Not-a-Number는 누락이란 의미입니다).\n자동 정렬은 구조가 다르고 누락된 값이 있는 여러 데이터를 다룰 때 매우 편리합니다. 하지만 올바른 인덱스 레이블을 지정하는 것을 잊는다면 원치않는 결과를 얻을 수 있습니다:\n\ns5 = pd.Series([1000,1000,1000,1000])\nprint(\"s2 =\", s2.values)\n\ns2 = [ 68  83 112  68]\n\nprint(\"s5 =\", s5.values)\n\ns5 = [1000 1000 1000 1000]\n\ns2 + s5\n\nalice     NaN\nbob       NaN\ncharles   NaN\ndarwin    NaN\n0         NaN\n1         NaN\n2         NaN\n3         NaN\ndtype: float64\n\n\n레이블이 하나도 맞지 않기 때문에 판다스가 이 Series를 정렬할 수 없습니다. 따라서 모두 NaN이 되었습니다."
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#스칼라로-초기화",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#스칼라로-초기화",
    "title": "week_1b_pandas",
    "section": "스칼라로 초기화",
    "text": "스칼라로 초기화\n스칼라와 인덱스 레이블의 리스트로 Series 객체를 초기화할 수도 있습니다: 모든 원소가 이 스칼라 값으로 설정됩니다.\n\nmeaning = pd.Series(42, [\"life\", \"universe\", \"everything\"])\nmeaning\n\nlife          42\nuniverse      42\neverything    42\ndtype: int64"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#series-이름",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#series-이름",
    "title": "week_1b_pandas",
    "section": "Series 이름",
    "text": "Series 이름\nSeries는 name을 가질 수 있습니다:\n\ns6 = pd.Series([83, 68], index=[\"bob\", \"alice\"], name=\"weights\")\ns6\n\nbob      83\nalice    68\nName: weights, dtype: int64\n\n\n\ns6.name\n\n'weights'"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#series-그래프-출력",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#series-그래프-출력",
    "title": "week_1b_pandas",
    "section": "Series 그래프 출력",
    "text": "Series 그래프 출력\n맷플롯립을 사용해 Series 데이터를 쉽게 그래프로 출력할 수 있습니다(맷플롯립에 대한 자세한 설명은 맷플롯립 튜토리얼을 참고하세요). 맷플롯립을 임포트하고 plot() 메서드를 호출하면 끝입니다:\n\n#%matplotlib inline\nimport matplotlib.pyplot as plt\ntemperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5]\ns7 = pd.Series(temperatures, name=\"Temperature\")\n\ns7.plot()\nplt.show()\n\n\n\n\n데이터를 그래프로 출력하는데 많은 옵션이 있습니다. 여기에서 모두 나열할 필요는 없습니다. 특정 종류의 그래프(히스토그램, 파이 차트 등)가 필요하면 판다스 문서의 시각화 섹션에서 예제 코드를 참고하세요."
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#시간-범위",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#시간-범위",
    "title": "week_1b_pandas",
    "section": "시간 범위",
    "text": "시간 범위\n먼저 pd.date_range()를 사용해 시계열을 만들어 보죠. 이 함수는 2016년 10월 29일 5:30pm에서 시작하여 12시간마다 하나의 datetime을 담고 있는 DatetimeIndex를 반환합니다.\n\ndates = pd.date_range('2016/10/29 5:30pm', periods=12, freq='H')\ndates\n\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n\npd.date_range('2020-10-07', '2020-10-20', freq='3D')\n\nDatetimeIndex(['2020-10-07', '2020-10-10', '2020-10-13', '2020-10-16',\n               '2020-10-19'],\n              dtype='datetime64[ns]', freq='3D')\n\n\n이 DatetimeIndex를 Series의 인덱스로 사용할수 있습니다:\n\ntemperatures\n\n[4.4, 5.1, 6.1, 6.2, 6.1, 6.1, 5.7, 5.2, 4.7, 4.1, 3.9, 3.5]\n\n\n\ntemp_series = pd.Series(data = temperatures, index = dates)\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n이 시리즈를 그래프로 출력해 보죠:\n\ntemp_series.plot(kind=\"bar\")\n\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#리샘플링",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#리샘플링",
    "title": "week_1b_pandas",
    "section": "리샘플링",
    "text": "리샘플링\n판다스는 매우 간단하게 시계열을 리샘플링할 수 있습니다. resample() 메서드를 호출하고 새로운 주기를 지정하면 됩니다:\n\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n\ntemp_series_freq_2H = temp_series.resample(\"2H\")\ntemp_series_freq_2H\n\n<pandas.core.resample.DatetimeIndexResampler object at 0x000002B06CCD17D0>\n\n\n리샘플링 연산은 사실 지연된 연산입니다. (https://ko.wikipedia.org/wiki/%EB%8A%90%EA%B8%8B%ED%95%9C_%EA%B3%84%EC%82%B0%EB%B2%95) 그래서 Series 객체 대신 DatetimeIndexResampler 객체가 반환됩니다. 실제 리샘플링 연산을 수행하려면 mean() 같은 메서드를 호출할 수 있습니다. 이 메서드는 연속적인 시간 쌍에 대해 평균을 계산합니다:\n\ntemp_series_freq_2H = temp_series_freq_2H.mean()\n\n\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n결과를 그래프로 출력해 보죠:\n\ntemp_series_freq_2H.plot(kind=\"bar\")\nplt.show()\n\n\n\n\n2시간 간격으로 어떻게 값이 수집되었는지 확인해 보세요. 예를 들어 6-8pm 간격을 보면 6:30pm에서 5.1이고 7:30pm에서 6.1입니다. 리샘플링 후에 5.1과 6.1의 평균인 5.6 하나를 얻었습니다. 평균말고 어떤 집계 함수(aggregation function)도 사용할 수 있습니다. 예를 들어 각 기간에서 최솟값을 찾을 수 있습니다:\n\ntemp_series_freq_2H = temp_series.resample(\"2H\").mean()\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n또는 동일한 효과를 내는 apply() 메서드를 사용할 수 있습니다:\n\nimport numpy as np\n\n\ntemp_series_freq_2H = temp_series.resample(\"2H\").apply(np.min)\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#업샘플링과-보간",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#업샘플링과-보간",
    "title": "week_1b_pandas",
    "section": "업샘플링과 보간",
    "text": "업샘플링과 보간\n다운샘플링의 예를 보았습니다. 하지만 업샘플링(즉, 빈도를 높입니다)도 할 수 있습니다. 하지만 데이터에 구멍을 만듭니다:\n\ntemp_series_freq_15min = temp_series.resample(\"15Min\").mean()\ntemp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다\n\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n\n\n한가지 방법은 보간으로 사이를 채우는 것입니다. 이렇게 하려면 interpolate() 메서드를 호출합니다. 기본값은 선형 보간이지만 3차 보간(cubic interpolation) 같은 다른 방법을 선택할 수 있습니다: https://bskyvision.com/789\n\ntemp_series_freq_15min = temp_series.resample(\"15Min\").interpolate(method=\"cubic\")\ntemp_series_freq_15min.head(n=10)\n\n2016-10-29 17:30:00    4.400000\n2016-10-29 17:45:00    4.452911\n2016-10-29 18:00:00    4.605113\n2016-10-29 18:15:00    4.829758\n2016-10-29 18:30:00    5.100000\n2016-10-29 18:45:00    5.388992\n2016-10-29 19:00:00    5.669887\n2016-10-29 19:15:00    5.915839\n2016-10-29 19:30:00    6.100000\n2016-10-29 19:45:00    6.203621\nFreq: 15T, dtype: float64\n\n\n\ntemp_series.plot(label=\"Period: 1 hour\")\ntemp_series_freq_15min.plot(label=\"Period: 15 minutes\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#시간대",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#시간대",
    "title": "week_1b_pandas",
    "section": "시간대",
    "text": "시간대\n기본적으로 datetime은 단순합니다. 시간대(timezone)을 고려하지 않죠. 따라서 2016-10-30 02:30는 파리나 뉴욕이나 2016년 10월 30일 2:30pm입니다. tz_localize() 메서드로 시간대를 고려한 datetime을 만들 수 있습니다: https://www.timeanddate.com/time/map/\n\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n\ntemp_series_ny = temp_series.tz_localize(\"America/New_York\")\ntemp_series_ny\n\n2016-10-29 17:30:00-04:00    4.4\n2016-10-29 18:30:00-04:00    5.1\n2016-10-29 19:30:00-04:00    6.1\n2016-10-29 20:30:00-04:00    6.2\n2016-10-29 21:30:00-04:00    6.1\n2016-10-29 22:30:00-04:00    6.1\n2016-10-29 23:30:00-04:00    5.7\n2016-10-30 00:30:00-04:00    5.2\n2016-10-30 01:30:00-04:00    4.7\n2016-10-30 02:30:00-04:00    4.1\n2016-10-30 03:30:00-04:00    3.9\n2016-10-30 04:30:00-04:00    3.5\ndtype: float64\n\n\n모든 datetime에 -04:00이 추가됩니다. 즉 모든 시간은 UTC - 4시간을 의미합니다.\n다음처럼 파리 시간대로 바꿀 수 있습니다:\n\ntemp_series_paris = temp_series_ny.tz_convert(\"Europe/Paris\")\ntemp_series_paris\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n\n\nUTC와의 차이가 +02:00에서 +01:00으로 바뀐 것을 알 수 있습니다. 이는 프랑스가 10월 30일 3am에 겨울 시간으로 바꾸기 때문입니다(2am으로 바뀝니다). 따라서 2:30am이 두 번 등장합니다! 시간대가 없는 표현으로 돌아가 보죠(시간대가 없이 지역 시간으로 매시간 로그를 기록하는 경우 이와 비슷할 것입니다):\n\ntemp_series_paris_naive = temp_series_paris.tz_localize(None)\ntemp_series_paris_naive\n\n2016-10-29 23:30:00    4.4\n2016-10-30 00:30:00    5.1\n2016-10-30 01:30:00    6.1\n2016-10-30 02:30:00    6.2\n2016-10-30 02:30:00    6.1\n2016-10-30 03:30:00    6.1\n2016-10-30 04:30:00    5.7\n2016-10-30 05:30:00    5.2\n2016-10-30 06:30:00    4.7\n2016-10-30 07:30:00    4.1\n2016-10-30 08:30:00    3.9\n2016-10-30 09:30:00    3.5\ndtype: float64\n\n\n이렇게 되면 02:30이 정말 애매합니다. 시간대가 없는 datetime을 파리 시간대로 바꿀 때 에러가 발생합니다:\n\ntry:\n    temp_series_paris_naive.tz_localize(\"Europe/Paris\")\nexcept Exception as e:\n    print(type(e))\n    print(e)\n\n<class 'pytz.exceptions.AmbiguousTimeError'>\nCannot infer dst time from 2016-10-30 02:30:00, try using the 'ambiguous' argument\n\n\n다행히 ambiguous 매개변수를 사용하면 판다스가 타임스탬프의 순서를 기반으로 적절한 DST(일광 절약 시간제)를 추측합니다:\nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=tori-tours&logNo=221221361831\n\ntemp_series_paris_naive.tz_localize(\"Europe/Paris\", ambiguous=\"infer\")\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#기간",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#기간",
    "title": "week_1b_pandas",
    "section": "기간",
    "text": "기간\npd.period_range() 함수는 DatetimeIndex가 아니라 PeriodIndex를 반환합니다. 예를 들어 2016과 2017년의 전체 분기를 가져와 보죠:\n\nquarters = pd.period_range('2016Q1', periods=8, freq='Q')\nquarters\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\nPeriodIndex에 숫자 N을 추가하면 PeriodIndex 빈도의 N 배만큼 이동시킵니다:\n\nquarters + 3\n\nPeriodIndex(['2016Q4', '2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1',\n             '2018Q2', '2018Q3'],\n            dtype='period[Q-DEC]')\n\n\nasfreq() 메서드를 사용하면 PeriodIndex의 빈도를 바꿀 수 있습니다. 모든 기간이 늘어나거나 줄어듭니다. 예를 들어 분기 기간을 모두 월별 기간으로 바꾸어 보죠:\n\nquarters.asfreq(\"M\")\n\nPeriodIndex(['2016-03', '2016-06', '2016-09', '2016-12', '2017-03', '2017-06',\n             '2017-09', '2017-12'],\n            dtype='period[M]')\n\n\n\nquarters\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\n기본적으로 asfreq는 각 기간의 끝에 맞춥니다. 기간의 시작에 맞추도록 변경할 수 있습니다:\n\nquarters.asfreq(\"M\", how=\"start\")\n\nPeriodIndex(['2016-01', '2016-04', '2016-07', '2016-10', '2017-01', '2017-04',\n             '2017-07', '2017-10'],\n            dtype='period[M]')\n\n\n간격을 늘릴 수도 있습니다: pandas 공식 메뉴얼 참조: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n\nquarters.asfreq(\"A\")\n\nPeriodIndex(['2016', '2016', '2016', '2016', '2017', '2017', '2017', '2017'], dtype='period[A-DEC]')\n\n\n물론 PeriodIndex로 Series를 만들 수 있습니다:\n\nquarterly_revenue = pd.Series([300, 320, 290, 390, 320, 360, 310, 410], index = quarters)\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nquarterly_revenue.plot(kind=\"line\")\nplt.show()\n\n\n\n\nto_timestamp를 호출해서 기간을 타임스탬프로 변경할 수 있습니다. 기본적으로 기간의 첫 번째 날을 반환합니다. 하지만 how와 freq를 지정해서 기간의 마지막 시간을 얻을 수 있습니다:\n\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nlast_hours = quarterly_revenue.to_timestamp(how=\"end\", freq=\"H\")\nlast_hours\n\n2016-03-31 23:59:59.999999999    300\n2016-06-30 23:59:59.999999999    320\n2016-09-30 23:59:59.999999999    290\n2016-12-31 23:59:59.999999999    390\n2017-03-31 23:59:59.999999999    320\n2017-06-30 23:59:59.999999999    360\n2017-09-30 23:59:59.999999999    310\n2017-12-31 23:59:59.999999999    410\ndtype: int64\n\n\nto_peroid를 호출하면 다시 기간으로 돌아갑니다:\n\nlast_hours.to_period()\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n판다스는 여러 가지 시간 관련 함수를 많이 제공합니다. 온라인 문서를 확인해 보세요. 예를 하나 들면 2016년 매월 마지막 업무일의 9시를 얻는 방법은 다음과 같습니다:\n\nmonths_2022 = pd.period_range(\"2022\", periods=12, freq=\"M\")\none_day_after_last_days = months_2022.asfreq(\"D\") + 1\nlast_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay(n=1)\nlast_bdays.to_period(\"H\") + 9\n\nPeriodIndex(['2022-01-31 09:00', '2022-02-28 09:00', '2022-03-31 09:00',\n             '2022-04-29 09:00', '2022-05-31 09:00', '2022-06-30 09:00',\n             '2022-07-29 09:00', '2022-08-31 09:00', '2022-09-30 09:00',\n             '2022-10-31 09:00', '2022-11-30 09:00', '2022-12-30 09:00'],\n            dtype='period[H]')"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-만들기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-만들기",
    "title": "week_1b_pandas",
    "section": "DataFrame 만들기",
    "text": "DataFrame 만들기\nSeries 객체의 딕셔너리를 전달하여 데이터프레임을 만들 수 있습니다:\n\npeople_dict = {\n    \"weight\": pd.Series([68, 83, 112], index=[\"alice\", \"bob\", \"charles\"]),\n    \"birthyear\": pd.Series([1984, 1985, 1992], index=[\"bob\", \"alice\", \"charles\"], name=\"year\"),\n    \"children\": pd.Series([0, 3], index=[\"charles\", \"bob\"]),\n    \"hobby\": pd.Series([\"Biking\", \"Dancing\"], index=[\"alice\", \"bob\"]),\n}\npeople = pd.DataFrame(people_dict)\npeople\n\n         weight  birthyear  children    hobby\nalice        68       1985       NaN   Biking\nbob          83       1984       3.0  Dancing\ncharles     112       1992       0.0      NaN\n\n\n몇가지 알아 두어야 할 것은 다음과 같습니다:\n\nSeries는 인덱스를 기반으로 자동으로 정렬됩니다.\n누란된 값은 NaN으로 표현됩니다.\nSeries 이름은 무시됩니다(\"year\"란 이름은 삭제됩니다).\nDataFrame은 주피터 노트북에서 멋지게 출력됩니다!\n\n예상하는 방식으로 열을 참조할 수 있고 Series 객체가 반환됩니다:\n\npeople[\"birthyear\"]\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n동시에 여러 개의 열을 선택할 수 있습니다:\n\npeople[[\"birthyear\", \"hobby\"]]\n\n         birthyear    hobby\nalice         1985   Biking\nbob           1984  Dancing\ncharles       1992      NaN\n\n\n\npeople.loc[:,[\"birthyear\", \"hobby\"]]\n\n         birthyear    hobby\nalice         1985   Biking\nbob           1984  Dancing\ncharles       1992      NaN\n\n\n열 리스트나 행 인덱스 레이블을 DataFrame 생성자에 전달하면 해당 열과 행으로 채워진 데이터프레임이 반환됩니다. 예를 들면:\n\npeople_dict\n\n{'weight': alice       68\nbob         83\ncharles    112\ndtype: int64, 'birthyear': bob        1984\nalice      1985\ncharles    1992\nName: year, dtype: int64, 'children': charles    0\nbob        3\ndtype: int64, 'hobby': alice     Biking\nbob      Dancing\ndtype: object}\n\n\n\nd2 = pd.DataFrame(\n        people_dict,\n        columns=[\"birthyear\", \"weight\", \"height\"],\n        index=[\"bob\", \"alice\", \"eugene\"]\n     )\n\n\nd2\n\n        birthyear  weight height\nbob        1984.0    83.0    NaN\nalice      1985.0    68.0    NaN\neugene        NaN     NaN    NaN\n\n\nDataFrame을 만드는 또 다른 편리한 방법은 ndarray나 리스트의 리스트로 모든 값을 생성자에게 전달하고 열 이름과 행 인덱스 레이블을 각기 지정하는 것입니다:\n\nvalues = [\n            [1985, np.nan, \"Biking\",   68],\n            [1984, 3,      \"Dancing\",  83],\n            [1992, 0,      np.nan,    112]\n         ]\nd3 = pd.DataFrame(\n        values,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n         birthyear  children    hobby  weight\nalice         1985       NaN   Biking      68\nbob           1984       3.0  Dancing      83\ncharles       1992       0.0      NaN     112\n\n\n누락된 값을 지정하려면 np.nan이나 넘파이 마스크 배열을 사용합니다:\ndtype = object는 문자열 데이터를 의미\n\nmasked_array = np.ma.asarray(values, dtype=object)\nmasked_array\n\nmasked_array(\n  data=[[1985, nan, 'Biking', 68],\n        [1984, 3, 'Dancing', 83],\n        [1992, 0, nan, 112]],\n  mask=False,\n  fill_value='?',\n  dtype=object)\n\n\n\nmasked_array = np.ma.asarray(values, dtype=object)\nmasked_array[(0, 2), (1, 2)] = np.ma.masked\nd3 = pd.DataFrame(\n        masked_array,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n        birthyear children    hobby weight\nalice        1985      NaN   Biking     68\nbob          1984        3  Dancing     83\ncharles      1992        0      NaN    112\n\n\nndarray 대신에 DataFrame 객체를 전달할 수도 있습니다:\n\nd3\n\n        birthyear children    hobby weight\nalice        1985      NaN   Biking     68\nbob          1984        3  Dancing     83\ncharles      1992        0      NaN    112\n\n\n\nd4 = pd.DataFrame(\n         d3,\n         columns=[\"hobby\", \"children\"],\n         index=[\"alice\", \"bob\"]\n     )\nd4\n\n         hobby children\nalice   Biking      NaN\nbob    Dancing        3\n\n\n딕셔너리의 딕셔너리(또는 리스트의 리스트)로 DataFrame을 만들 수 있습니다:\n\npeople = pd.DataFrame({\n    \"birthyear\": {\"alice\":1985, \"bob\": 1984, \"charles\": 1992},\n    \"hobby\": {\"alice\":\"Biking\", \"bob\": \"Dancing\"},\n    \"weight\": {\"alice\":68, \"bob\": 83, \"charles\": 112},\n    \"children\": {\"bob\": 3, \"charles\": 0}\n})\n\npeople\n\n         birthyear    hobby  weight  children\nalice         1985   Biking      68       NaN\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#멀티-인덱싱",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#멀티-인덱싱",
    "title": "week_1b_pandas",
    "section": "멀티 인덱싱",
    "text": "멀티 인덱싱\n모든 열이 같은 크기의 튜플이면 멀티 인덱스로 인식합니다. 열 인덱스 레이블에도 같은 방식이 적용됩니다. 예를 들면:\n\nd5 = pd.DataFrame(\n  {\n    (\"public\", \"birthyear\"):\n        {(\"Paris\",\"alice\"):1985, (\"Paris\",\"bob\"): 1984, (\"London\",\"charles\"): 1992},\n    (\"public\", \"hobby\"):\n        {(\"Paris\",\"alice\"):\"Biking\", (\"Paris\",\"bob\"): \"Dancing\"},\n    (\"private\", \"weight\"):\n        {(\"Paris\",\"alice\"):68, (\"Paris\",\"bob\"): 83, (\"London\",\"charles\"): 112},\n    (\"private\", \"children\"):\n        {(\"Paris\", \"alice\"):np.nan, (\"Paris\",\"bob\"): 3, (\"London\",\"charles\"): 0}\n  }\n)\nd5\n\n                  public          private         \n               birthyear    hobby  weight children\nParis  alice        1985   Biking      68      NaN\n       bob          1984  Dancing      83      3.0\nLondon charles      1992      NaN     112      0.0\n\n\n이제 \"public\" 열을 모두 담은 DataFrame을 손쉽게 만들 수 있습니다:\n\nd5[\"public\"]\n\n                birthyear    hobby\nParis  alice         1985   Biking\n       bob           1984  Dancing\nLondon charles       1992      NaN\n\n\n\nd5[\"public\", \"hobby\"]  # d5[\"public\"][\"hobby\"]와 같습니다.\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: (public, hobby), dtype: object\n\n\n\nd5[\"public\"]['hobby']\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: hobby, dtype: object"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#레벨-낮추기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#레벨-낮추기",
    "title": "week_1b_pandas",
    "section": "레벨 낮추기",
    "text": "레벨 낮추기\nd5를 다시 확인해 보죠:\n\nd5\n\n                  public          private         \n               birthyear    hobby  weight children\nParis  alice        1985   Biking      68      NaN\n       bob          1984  Dancing      83      3.0\nLondon charles      1992      NaN     112      0.0\n\n\n열의 레벨(level)이 2개이고 인덱스 레벨이 2개입니다. droplevel()을 사용해 열 레벨을 낮출 수 있습니다(인덱스도 마찬가지입니다):\n\nd5.columns = d5.columns.droplevel(level = 0)\nd5\n\n                birthyear    hobby  weight  children\nParis  alice         1985   Biking      68       NaN\n       bob           1984  Dancing      83       3.0\nLondon charles       1992      NaN     112       0.0\n\n\n\nd6 = d5.copy()\nd6.index = d6.index.droplevel(level = 0)\nd6\n\n         birthyear    hobby  weight  children\nalice         1985   Biking      68       NaN\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#전치",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#전치",
    "title": "week_1b_pandas",
    "section": "전치",
    "text": "전치\nT 속성을 사용해 열과 인덱스를 바꿀 수 있습니다:\n\nd5\n\n                birthyear    hobby  weight  children\nParis  alice         1985   Biking      68       NaN\n       bob           1984  Dancing      83       3.0\nLondon charles       1992      NaN     112       0.0\n\n\n\nd6 = d5.T\nd6\n\n            Paris           London\n            alice      bob charles\nbirthyear    1985     1984    1992\nhobby      Biking  Dancing     NaN\nweight         68       83     112\nchildren      NaN      3.0     0.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#레벨-스택과-언스택",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#레벨-스택과-언스택",
    "title": "week_1b_pandas",
    "section": "레벨 스택과 언스택",
    "text": "레벨 스택과 언스택\nstack() 메서드는 가장 낮은 열 레벨을 가장 낮은 인덱스 뒤에 추가합니다:\n\nd6\n\n            Paris           London\n            alice      bob charles\nbirthyear    1985     1984    1992\nhobby      Biking  Dancing     NaN\nweight         68       83     112\nchildren      NaN      3.0     0.0\n\n\n\nd7 = d6.stack()\nd7\n\n                  London    Paris\nbirthyear alice      NaN     1985\n          bob        NaN     1984\n          charles   1992      NaN\nhobby     alice      NaN   Biking\n          bob        NaN  Dancing\nweight    alice      NaN       68\n          bob        NaN       83\n          charles    112      NaN\nchildren  bob        NaN      3.0\n          charles    0.0      NaN\n\n\nNaN 값이 생겼습니다. 이전에 없던 조합이 생겼기 때문입니다(예를 들어 London에 bob이 없었습니다).\nunstack()을 호출하면 반대가 됩니다. 여기에서도 많은 NaN 값이 생성됩니다.\n\nd8 = d7.unstack()\nd8\n\n          London                Paris                 \n           alice  bob charles   alice      bob charles\nbirthyear    NaN  NaN    1992    1985     1984     NaN\nchildren     NaN  NaN     0.0     NaN      3.0     NaN\nhobby        NaN  NaN     NaN  Biking  Dancing     NaN\nweight       NaN  NaN     112      68       83     NaN\n\n\nunstack을 다시 호출하면 Series 객체가 만들어 집니다:\n\nd9 = d8.unstack()\nd9\n\nLondon  alice    birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        bob      birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        charles  birthyear       1992\n                 children         0.0\n                 hobby            NaN\n                 weight           112\nParis   alice    birthyear       1985\n                 children         NaN\n                 hobby         Biking\n                 weight            68\n        bob      birthyear       1984\n                 children         3.0\n                 hobby        Dancing\n                 weight            83\n        charles  birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\ndtype: object\n\n\nstack()과 unstack() 메서드를 사용할 때 스택/언스택할 level을 선택할 수 있습니다. 심지어 한 번에 여러 개의 레벨을 스택/언스택할 수도 있습니다:\n\nd10 = d9.unstack(level = (0,1))\nd10\n\n          London                Paris                 \n           alice  bob charles   alice      bob charles\nbirthyear    NaN  NaN    1992    1985     1984     NaN\nchildren     NaN  NaN     0.0     NaN      3.0     NaN\nhobby        NaN  NaN     NaN  Biking  Dancing     NaN\nweight       NaN  NaN     112      68       83     NaN"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "title": "week_1b_pandas",
    "section": "대부분의 메서드는 수정된 복사본을 반환합니다",
    "text": "대부분의 메서드는 수정된 복사본을 반환합니다\n눈치챘겠지만 stack()과 unstack() 메서드는 객체를 수정하지 않습니다. 대신 복사본을 만들어 반환합니다. 판다스에 있는 대부분의 메서드들이 이렇게 동작합니다.\nStack & Unstack + Pivot에 대한 설명 참고 https://pandas.pydata.org/docs/user_guide/reshaping.html\nData Reshaping!\n\nPivot\n\nimport pandas._testing as tm\n\ndef unpivot(frame):\n    N, K = frame.shape\n    data = {\n        \"value\": frame.to_numpy().ravel(\"F\"),\n        \"variable\": np.asarray(frame.columns).repeat(N),\n        \"date\": np.tile(np.asarray(frame.index), K),\n    }\n    return pd.DataFrame(data, columns=[\"date\", \"variable\", \"value\"])\n\ndf = unpivot(tm.makeTimeDataFrame(3))\n\n\ndf\n\n         date variable     value\n0  2000-01-03        A  1.008439\n1  2000-01-04        A -0.624160\n2  2000-01-05        A  0.010757\n3  2000-01-03        B  0.626732\n4  2000-01-04        B  1.304595\n5  2000-01-05        B  0.139776\n6  2000-01-03        C -0.050125\n7  2000-01-04        C -0.056351\n8  2000-01-05        C  0.009924\n9  2000-01-03        D  0.500057\n10 2000-01-04        D -1.278545\n11 2000-01-05        D -0.905225\n\n\nTo select out everything for variable A we could do:\n\nfiltered = df[df[\"variable\"] == \"A\"]\nfiltered\n\n        date variable     value\n0 2000-01-03        A  1.008439\n1 2000-01-04        A -0.624160\n2 2000-01-05        A  0.010757\n\n\nBut suppose we wish to do time series operations with the variables. A better representation would be where the columns are the unique variables and an index of dates identifies individual observations. To reshape the data into this form, we use the DataFrame.pivot() method (also implemented as a top level function pivot()):\n\npivoted = df.pivot(index=\"date\", columns=\"variable\", values=\"value\")\n\npivoted\n\nvariable           A         B         C         D\ndate                                              \n2000-01-03  1.008439  0.626732 -0.050125  0.500057\n2000-01-04 -0.624160  1.304595 -0.056351 -1.278545\n2000-01-05  0.010757  0.139776  0.009924 -0.905225\n\n\n\npivoted.columns\n\nIndex(['A', 'B', 'C', 'D'], dtype='object', name='variable')\n\n\n\npivoted.index\n\nDatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05'], dtype='datetime64[ns]', name='date', freq=None)\n\n\nIf the values argument is omitted, and the input DataFrame has more than one column of values which are not used as column or index inputs to pivot(), then the resulting “pivoted” DataFrame will have hierarchical columns whose topmost level indicates the respective value column:\n\ndf[\"value2\"] = df[\"value\"] * 2\n\n\ndf\n\n         date variable     value    value2\n0  2000-01-03        A  1.008439  2.016878\n1  2000-01-04        A -0.624160 -1.248320\n2  2000-01-05        A  0.010757  0.021515\n3  2000-01-03        B  0.626732  1.253465\n4  2000-01-04        B  1.304595  2.609190\n5  2000-01-05        B  0.139776  0.279552\n6  2000-01-03        C -0.050125 -0.100250\n7  2000-01-04        C -0.056351 -0.112702\n8  2000-01-05        C  0.009924  0.019848\n9  2000-01-03        D  0.500057  1.000113\n10 2000-01-04        D -1.278545 -2.557091\n11 2000-01-05        D -0.905225 -1.810451\n\n\n\npivoted = df.pivot(index=\"date\", columns=\"variable\")\n\npivoted\n\n               value                      ...    value2                    \nvariable           A         B         C  ...         B         C         D\ndate                                      ...                              \n2000-01-03  1.008439  0.626732 -0.050125  ...  1.253465 -0.100250  1.000113\n2000-01-04 -0.624160  1.304595 -0.056351  ...  2.609190 -0.112702 -2.557091\n2000-01-05  0.010757  0.139776  0.009924  ...  0.279552  0.019848 -1.810451\n\n[3 rows x 8 columns]\n\n\n\npivoted.columns\n\nMultiIndex([( 'value', 'A'),\n            ( 'value', 'B'),\n            ( 'value', 'C'),\n            ( 'value', 'D'),\n            ('value2', 'A'),\n            ('value2', 'B'),\n            ('value2', 'C'),\n            ('value2', 'D')],\n           names=[None, 'variable'])\n\n\n\npivoted['value']\n\nvariable           A         B         C         D\ndate                                              \n2000-01-03  1.008439  0.626732 -0.050125  0.500057\n2000-01-04 -0.624160  1.304595 -0.056351 -1.278545\n2000-01-05  0.010757  0.139776  0.009924 -0.905225"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#행-참조하기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#행-참조하기",
    "title": "week_1b_pandas",
    "section": "행 참조하기",
    "text": "행 참조하기\npeople DataFrame으로 돌아가 보죠:\n\npeople\n\n         birthyear    hobby  weight  children\nalice         1985   Biking      68       NaN\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0\n\n\nloc 속성으로 열 대신 행을 참조할 수 있습니다. DataFrame의 열 이름이 행 인덱스 레이블로 매핑된 Series 객체가 반환됩니다:\n\npeople['birthyear']\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n\npeople.loc[\"charles\"]\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\niloc 속성을 사용해 정수 인덱스로 행을 참조할 수 있습니다:\n\npeople.iloc[2]\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\n행을 슬라이싱할 수 있으며 DataFrame 객체가 반환됩니다:\n\npeople\n\n         birthyear    hobby  weight  children\nalice         1985   Biking      68       NaN\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0\n\n\n\npeople.iloc[1:3]\n\n         birthyear    hobby  weight  children\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0\n\n\n마자믹으로 불리언 배열을 전달하여 해당하는 행을 가져올 수 있습니다:\n\npeople[np.array([True, False, True])]\n\n         birthyear   hobby  weight  children\nalice         1985  Biking      68       NaN\ncharles       1992     NaN     112       0.0\n\n\n불리언 표현식을 사용할 때 아주 유용합니다:\n\npeople[\"birthyear\"] < 1990\n\nalice       True\nbob         True\ncharles    False\nName: birthyear, dtype: bool\n\n\n\npeople[people[\"birthyear\"] < 1990]\n\n       birthyear    hobby  weight  children\nalice       1985   Biking      68       NaN\nbob         1984  Dancing      83       3.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#열-추가-삭제",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#열-추가-삭제",
    "title": "week_1b_pandas",
    "section": "열 추가, 삭제",
    "text": "열 추가, 삭제\nDataFrame을 Series의 딕셔너리처럼 다룰 수 있습니다. 따라서 다음 같이 쓸 수 있습니다:\n\npeople\n\n         birthyear    hobby  weight  children\nalice         1985   Biking      68       NaN\nbob           1984  Dancing      83       3.0\ncharles       1992      NaN     112       0.0\n\n\n\npeople[\"age\"] = 2022 - people[\"birthyear\"]  # \"age\" 열을 추가합니다\npeople[\"over 30\"] = people[\"age\"] > 30      # \"over 30\" 열을 추가합니다\n\npeople\n\n         birthyear    hobby  weight  children  age  over 30\nalice         1985   Biking      68       NaN   37     True\nbob           1984  Dancing      83       3.0   38     True\ncharles       1992      NaN     112       0.0   30    False\n\n\n\nbirthyears = people.pop(\"birthyear\")\ndel people[\"children\"]\n\n\nbirthyears\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n\npeople\n\n           hobby  weight  age  over 30\nalice     Biking      68   37     True\nbob      Dancing      83   38     True\ncharles      NaN     112   30    False\n\n\n\n# 딕셔너리도 유사함\nweights = {\"alice\": 68, \"bob\": 83, \"colin\": 86, \"darwin\": 68}\n\n\nweights.pop(\"alice\")\n\n68\n\n\n\nweights\n\n{'bob': 83, 'colin': 86, 'darwin': 68}\n\n\n\ndel weights[\"bob\"]\n\n\nweights\n\n{'colin': 86, 'darwin': 68}\n\n\n새로운 열을 추가할 때 행의 개수는 같아야 합니다. 누락된 행은 NaN으로 채워지고 추가적인 행은 무시됩니다:\n\npeople.index\n\nIndex(['alice', 'bob', 'charles'], dtype='object')\n\n\n\npeople[\"pets\"] = pd.Series({\"bob\": 0, \"charles\": 5, \"eugene\":1})  # alice 누락됨, eugene은 무시됨\npeople\n\n           hobby  weight  age  over 30  pets\nalice     Biking      68   37     True   NaN\nbob      Dancing      83   38     True   0.0\ncharles      NaN     112   30    False   5.0\n\n\n새로운 열을 추가할 때 기본적으로 (오른쪽) 끝에 추가됩니다. insert() 메서드를 사용해 다른 곳에 열을 추가할 수 있습니다:\n\npeople.insert(1, \"height\", [172, 181, 185])\npeople\n\n           hobby  height  weight  age  over 30  pets\nalice     Biking     172      68   37     True   NaN\nbob      Dancing     181      83   38     True   0.0\ncharles      NaN     185     112   30    False   5.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#새로운-열-할당하기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#새로운-열-할당하기",
    "title": "week_1b_pandas",
    "section": "새로운 열 할당하기",
    "text": "새로운 열 할당하기\nassign() 메서드를 호출하여 새로운 열을 만들 수도 있습니다. 이는 새로운 DataFrame 객체를 반환하며 원본 객체는 변경되지 않습니다:\n\npeople.assign(\n    body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n    has_pets = people[\"pets\"] > 0\n)\n\n           hobby  height  weight  age  over 30  pets  body_mass_index  has_pets\nalice     Biking     172      68   37     True   NaN        22.985398     False\nbob      Dancing     181      83   38     True   0.0        25.335002     False\ncharles      NaN     185     112   30    False   5.0        32.724617      True\n\n\n\npeople[\"body_mass_index\"] = people[\"weight\"] / (people[\"height\"] / 100) ** 2\n\npeople\n\n           hobby  height  weight  age  over 30  pets  body_mass_index\nalice     Biking     172      68   37     True   NaN        22.985398\nbob      Dancing     181      83   38     True   0.0        25.335002\ncharles      NaN     185     112   30    False   5.0        32.724617\n\n\n\ndel people[\"body_mass_index\"]\n\n\npeople\n\n           hobby  height  weight  age  over 30  pets\nalice     Biking     172      68   37     True   NaN\nbob      Dancing     181      83   38     True   0.0\ncharles      NaN     185     112   30    False   5.0\n\n\n할당문 안에서 만든 열은 접근할 수 없습니다:\n\ntry:\n    people.assign(\n        body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n        overweight = people[\"body_mass_index\"] > 25\n    )\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 'body_mass_index'\n\n\n해결책은 두 개의 연속된 할당문으로 나누는 것입니다:\n\nd6 = people.assign(body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2)\nd6.assign(overweight = d6[\"body_mass_index\"] > 25)\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n임시 변수 d6를 만들면 불편합니다. assign() 메서드를 연결하고 싶겠지만 people 객체가 첫 번째 할당문에서 실제로 수정되지 않기 때문에 작동하지 않습니다:\n\ntry:\n    (people\n         .assign(body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2)\n         .assign(overweight = people[\"body_mass_index\"] > 25)\n    )\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 'body_mass_index'\n\n\n하지만 걱정하지 마세요. 간단한 방법이 있습니다. assign() 메서드에 함수(전형적으로 lambda 함수)를 전달하면 DataFrame을 매개변수로 이 함수를 호출할 것입니다:\n\n(people\n     .assign(body_mass_index = lambda df: df[\"weight\"] / (df[\"height\"] / 100) ** 2)\n     .assign(overweight = lambda df: df[\"body_mass_index\"] > 25)\n)\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n문제가 해결되었군요!\n\npeople[\"body_mass_index\"] = people[\"weight\"] / (people[\"height\"] / 100) ** 2\npeople[\"overweight\"] = people[\"body_mass_index\"]>25\n\n\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#표현식-평가",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#표현식-평가",
    "title": "week_1b_pandas",
    "section": "표현식 평가",
    "text": "표현식 평가\n판다스가 제공하는 뛰어난 기능 하나는 표현식 평가입니다. 이는 numexpr 라이브러리에 의존하기 때문에 설치가 되어 있어야 합니다.\n\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n\n\"weight / (height/100) ** 2 > 25\"\n\n'weight / (height/100) ** 2 > 25'\n\n\n\npeople.eval(\"weight / (height/100) ** 2 > 25\")\n\nalice      False\nbob         True\ncharles     True\ndtype: bool\n\n\n할당 표현식도 지원됩니다. inplace=True로 지정하면 수정된 복사본을 만들지 않고 바로 DataFrame을 변경합니다:\n\npeople.eval(\"body_mass_index = weight / (height/100) ** 2\", inplace=True)\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n'@'를 접두어로 사용하여 지역 변수나 전역 변수를 참조할 수 있습니다:\n\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002        True\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n\noverweight_threshold = 30\npeople.eval(\"overweight = body_mass_index > @overweight_threshold\", inplace=True)\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002       False\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-쿼리하기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-쿼리하기",
    "title": "week_1b_pandas",
    "section": "DataFrame 쿼리하기",
    "text": "DataFrame 쿼리하기\nquery() 메서드를 사용하면 쿼리 표현식에 기반하여 DataFrame을 필터링할 수 있습니다:\n\npeople\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\nalice     Biking     172      68  ...   NaN        22.985398       False\nbob      Dancing     181      83  ...   0.0        25.335002       False\ncharles      NaN     185     112  ...   5.0        32.724617        True\n\n[3 rows x 8 columns]\n\n\n\npeople.query(\"age > 30 and pets == 0\")\n\n       hobby  height  weight  age  over 30  pets  body_mass_index  overweight\nbob  Dancing     181      83   38     True   0.0        25.335002       False\n\n\n아래의 방법이 더 자주 사용됨\n\npeople[(people[\"age\"]>30) & (people[\"pets\"] == 0)]\n\n       hobby  height  weight  age  over 30  pets  body_mass_index  overweight\nbob  Dancing     181      83   38     True   0.0        25.335002       False\n\n\n\nmask = (people[\"age\"]>30) & (people[\"pets\"] == 0)\n\n\npeople[mask]\n\n       hobby  height  weight  age  over 30  pets  body_mass_index  overweight\nbob  Dancing     181      83   38     True   0.0        25.335002       False"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-정렬",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-정렬",
    "title": "week_1b_pandas",
    "section": "DataFrame 정렬",
    "text": "DataFrame 정렬\nsort_index 메서드를 호출하여 DataFrame을 정렬할 수 있습니다. 기본적으로 인덱스 레이블을 기준으로 오름차순으로 행을 정렬합니다. 여기에서는 내림차순으로 정렬해 보죠:\n\npeople.sort_index(ascending=False)\n\n           hobby  height  weight  ...  pets  body_mass_index  overweight\ncharles      NaN     185     112  ...   5.0        32.724617        True\nbob      Dancing     181      83  ...   0.0        25.335002       False\nalice     Biking     172      68  ...   NaN        22.985398       False\n\n[3 rows x 8 columns]\n\n\nsort_index는 DataFrame의 정렬된 복사본을 반환합니다. people을 직접 수정하려면 inplace 매개변수를 True로 지정합니다. 또한 axis=1로 지정하여 열 대신 행을 정렬할 수 있습니다:\n\npeople.sort_index(axis=1, inplace=True)\npeople\n\n         age  body_mass_index  height  ... overweight  pets  weight\nalice     37        22.985398     172  ...      False   NaN      68\nbob       38        25.335002     181  ...      False   0.0      83\ncharles   30        32.724617     185  ...       True   5.0     112\n\n[3 rows x 8 columns]\n\n\n레이블이 아니라 값을 기준으로 DataFrame을 정렬하려면 sort_values에 정렬하려는 열을 지정합니다:\n\npeople.sort_values(by=\"age\", inplace=True)\npeople\n\n         age  body_mass_index  height  ... overweight  pets  weight\ncharles   30        32.724617     185  ...       True   5.0     112\nalice     37        22.985398     172  ...      False   NaN      68\nbob       38        25.335002     181  ...      False   0.0      83\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-그래프-그리기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-그래프-그리기",
    "title": "week_1b_pandas",
    "section": "DataFrame 그래프 그리기",
    "text": "DataFrame 그래프 그리기\nSeries와 마찬가지로 판다스는 DataFrame 기반으로 멋진 그래프를 손쉽게 그릴 수 있습니다.\n예를 들어 plot 메서드를 호출하여 DataFrame의 데이터에서 선 그래프를 쉽게 그릴 수 있습니다:\n\npeople.plot(kind = \"line\", x = \"body_mass_index\", y = [\"height\", \"weight\"])\nplt.show()\n\n\n\n\n맷플롯립의 함수가 지원하는 다른 매개변수를 사용할 수 있습니다. 예를 들어, 산점도를 그릴 때 맷플롯립의 scatter() 함수의 s 매개변수를 사용해 크기를 지정할 수 있습니다:\n\npeople.plot(kind = \"scatter\", x = \"height\", y = \"weight\", s=[40, 120, 200])\nplt.show()\n\n\n\n\n선택할 수 있는 옵션이 많습니다. 판다스 문서의 시각화 페이지에서 마음에 드는 그래프를 찾아 예제 코드를 살펴 보세요.\n\nHistogram\n\n\ndf4 = pd.DataFrame(\n    {\n        \"a\": np.random.randn(1000) + 1,\n        \"b\": np.random.randn(1000),\n        \"c\": np.random.randn(1000) - 1,\n    },\n    columns=[\"a\", \"b\", \"c\"],\n)\n\nplt.figure();\n\ndf4.plot.hist(alpha=0.5);\n\n\ndf4\n\n            a         b         c\n0    0.482131  0.050522 -0.378729\n1    1.267938  0.996892 -0.861162\n2    2.000750  1.368278 -2.753824\n3   -0.508776 -1.401981 -1.551921\n4    0.998414 -0.193234 -0.490600\n..        ...       ...       ...\n995  0.797298 -0.720487 -1.694952\n996  1.501442 -0.005945 -0.806580\n997  0.957945  1.668562  0.051470\n998  1.724824  0.555325 -1.228525\n999  0.060893  1.381102 -1.742556\n\n[1000 rows x 3 columns]\n\n\n\ndf4.plot(kind=\"hist\",alpha=0.5, x=\"a\")\nplt.show()\n\n\n\n\n\ndf4['a'].plot.hist()\nplt.show()\n\n\n\n\n\nBoxplot\n\n\ndf\n\n         date variable     value    value2\n0  2000-01-03        A  1.008439  2.016878\n1  2000-01-04        A -0.624160 -1.248320\n2  2000-01-05        A  0.010757  0.021515\n3  2000-01-03        B  0.626732  1.253465\n4  2000-01-04        B  1.304595  2.609190\n5  2000-01-05        B  0.139776  0.279552\n6  2000-01-03        C -0.050125 -0.100250\n7  2000-01-04        C -0.056351 -0.112702\n8  2000-01-05        C  0.009924  0.019848\n9  2000-01-03        D  0.500057  1.000113\n10 2000-01-04        D -1.278545 -2.557091\n11 2000-01-05        D -0.905225 -1.810451\n\n\n\ndf = pd.DataFrame(np.random.rand(10, 5), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\ndf.plot.box();\n\n\ndf = pd.DataFrame(np.random.rand(10, 2), columns=[\"Col1\", \"Col2\"])\n\ndf[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\ndf\n\n       Col1      Col2  X\n0  0.570220  0.577588  A\n1  0.718700  0.543106  A\n2  0.774459  0.307416  A\n3  0.742576  0.371474  A\n4  0.342114  0.899393  A\n5  0.642371  0.574698  B\n6  0.418582  0.777499  B\n7  0.798886  0.152567  B\n8  0.248850  0.234649  B\n9  0.420446  0.476168  B\n\n\n\nplt.figure();\n\nbp = df.boxplot(by=\"X\")"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-연산",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#dataframe-연산",
    "title": "week_1b_pandas",
    "section": "DataFrame 연산",
    "text": "DataFrame 연산\nDataFrame이 넘파이 배열을 흉내내려는 것은 아니지만 몇 가지 비슷한 점이 있습니다. 예제 DataFrame을 만들어 보죠:\n\ngrades_array = np.array([[8,8,9],[10,9,9],[4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array, columns=[\"sep\", \"oct\", \"nov\"], index=[\"alice\",\"bob\",\"charles\",\"darwin\"])\ngrades\n\n         sep  oct  nov\nalice      8    8    9\nbob       10    9    9\ncharles    4    8    2\ndarwin     9   10   10\n\n\nDataFrame에 넘파이 수학 함수를 적용하면 모든 값에 이 함수가 적용됩니다:\n\nnp.sqrt(grades)\n\n              sep       oct       nov\nalice    2.828427  2.828427  3.000000\nbob      3.162278  3.000000  3.000000\ncharles  2.000000  2.828427  1.414214\ndarwin   3.000000  3.162278  3.162278\n\n\n비슷하게 DataFrame에 하나의 값을 더하면 DataFrame의 모든 원소에 이 값이 더해집니다. 이를 브로드캐스팅이라고 합니다:\n\ngrades + 1\n\n         sep  oct  nov\nalice      9    9   10\nbob       11   10   10\ncharles    5    9    3\ndarwin    10   11   11\n\n\n물론 산술 연산(*,/,**…)과 조건 연산(>, ==…)을 포함해 모든 이항 연산에도 마찬가지 입니다:\n\ngrades >= 5\n\n           sep   oct    nov\nalice     True  True   True\nbob       True  True   True\ncharles  False  True  False\ndarwin    True  True   True\n\n\nDataFrame의 max, sum, mean 같은 집계 연산은 각 열에 적용되어 Series 객체가 반환됩니다:\n\ngrades.mean()\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\nall 메서드도 집계 연산입니다: 모든 값이 True인지 아닌지 확인합니다. 모든 학생의 점수가 5 이상인 월을 찾아 보죠:\n\n(grades > 5).all()\n\nsep    False\noct     True\nnov    False\ndtype: bool\n\n\nMost of these functions take an optional axis parameter which lets you specify along which axis of the DataFrame you want the operation executed. The default is axis=0, meaning that the operation is executed vertically (on each column). You can set axis=1 to execute the operation horizontally (on each row). For example, let’s find out which students had all grades greater than 5:\n\ngrades\n\n         sep  oct  nov\nalice      8    8    9\nbob       10    9    9\ncharles    4    8    2\ndarwin     9   10   10\n\n\n\n(grades > 5).all(axis = 1)\n\nalice       True\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nany 메서드는 하나라도 참이면 True를 반환합니다. 한 번이라도 10점을 받은 사람을 찾아 보죠:\n\n(grades == 10).any(axis = 1)\n\nalice      False\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nDataFrame에 Series 객체를 더하면 (또는 다른 이항 연산을 수행하면) 판다스는 DataFrame에 있는 모든 행에 이 연산을 브로드캐스팅합니다. 이는 Series 객체가 DataFrame의 행의 개수와 크기가 같을 때만 동작합니다. 예를 들어 DataFrame의 mean(Series 객체)을 빼보죠:\n\ngrades\n\n         sep  oct  nov\nalice      8    8    9\nbob       10    9    9\ncharles    4    8    2\ndarwin     9   10   10\n\n\n\ngrades.mean()\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\n\ngrades - grades.mean()  # grades - [7.75, 8.75, 7.50] 와 동일\n\n          sep   oct  nov\nalice    0.25 -0.75  1.5\nbob      2.25  0.25  1.5\ncharles -3.75 -0.75 -5.5\ndarwin   1.25  1.25  2.5\n\n\n모든 9월 성적에서 7.75를 빼고, 10월 성적에서 8.75를 빼고, 11월 성적에서 7.50을 뺍니다. 이는 다음 DataFrame을 빼는 것과 같습니다:\n\npd.DataFrame([[7.75, 8.75, 7.50]]*4, index=grades.index, columns=grades.columns)\n\n          sep   oct  nov\nalice    7.75  8.75  7.5\nbob      7.75  8.75  7.5\ncharles  7.75  8.75  7.5\ndarwin   7.75  8.75  7.5\n\n\n모든 성적의 전체 평균을 빼고 싶다면 다음과 같은 방법을 사용합니다:\n\ngrades.values.mean()\n\n8.0\n\n\n\ngrades - grades.values.mean() # 모든 점수에서 전체 평균(8.00)을 뺍니다\n\n         sep  oct  nov\nalice    0.0  0.0  1.0\nbob      2.0  1.0  1.0\ncharles -4.0  0.0 -6.0\ndarwin   1.0  2.0  2.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#자동-정렬-1",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#자동-정렬-1",
    "title": "week_1b_pandas",
    "section": "자동 정렬",
    "text": "자동 정렬\nSeries와 비슷하게 여러 개의 DataFrame에 대한 연산을 수행하면 판다스는 자동으로 행 인덱스 레이블로 정렬하지만 열 이름으로도 정렬할 수 있습니다. 10월부터 12월까지 보너스 포인트를 담은 DataFrame을 만들어 보겠습니다:\n\ngrades_array = np.array([[8,8,9],[10,9,9],[4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array, columns=[\"sep\", \"oct\", \"nov\"], index=[\"alice\",\"bob\",\"charles\",\"darwin\"])\ngrades\n\n         sep  oct  nov\nalice      8    8    9\nbob       10    9    9\ncharles    4    8    2\ndarwin     9   10   10\n\n\n\nbonus_array = np.array([[0,np.nan,2],[np.nan,1,0],[0, 1, 0], [3, 3, 0]])\nbonus_points = pd.DataFrame(bonus_array, columns=[\"oct\", \"nov\", \"dec\"], index=[\"bob\",\"colin\", \"darwin\", \"charles\"])\nbonus_points\n\n         oct  nov  dec\nbob      0.0  NaN  2.0\ncolin    NaN  1.0  0.0\ndarwin   0.0  1.0  0.0\ncharles  3.0  3.0  0.0\n\n\n\ngrades + bonus_points\n\n         dec   nov   oct  sep\nalice    NaN   NaN   NaN  NaN\nbob      NaN   NaN   9.0  NaN\ncharles  NaN   5.0  11.0  NaN\ncolin    NaN   NaN   NaN  NaN\ndarwin   NaN  11.0  10.0  NaN\n\n\n덧셈 연산이 수행되었지만 너무 많은 원소가 NaN이 되었습니다. DataFrame을 정렬할 때 일부 열과 행이 한 쪽에만 있기 때문입니다. 다른 쪽에는 누란되었다고 간주합니다(NaN). NaN에 어떤 수를 더하면 NaN이 됩니다."
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#누락된-데이터-다루기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#누락된-데이터-다루기",
    "title": "week_1b_pandas",
    "section": "누락된 데이터 다루기",
    "text": "누락된 데이터 다루기\n실제 데이터에서 누락된 데이터를 다루는 경우는 자주 발생합니다. 판다스는 누락된 데이터를 다룰 수 있는 몇 가지 방법을 제공합니다.\n위 데이터에 있는 문제를 해결해 보죠. 예를 들어, 누락된 데이터는 NaN이 아니라 0이 되어야 한다고 결정할 수 있습니다. fillna() 메서드를 사용해 모든 NaN 값을 어떤 값으로 바꿀 수 있습니다:\n\n(grades + bonus_points).fillna(0)\n\n         dec   nov   oct  sep\nalice    0.0   0.0   0.0  0.0\nbob      0.0   0.0   9.0  0.0\ncharles  0.0   5.0  11.0  0.0\ncolin    0.0   0.0   0.0  0.0\ndarwin   0.0  11.0  10.0  0.0\n\n\n9월의 점수를 0으로 만드는 것은 공정하지 않습니다. 누락된 점수는 그대로 두고, 누락된 보너스 포인트는 0으로 바꿀 수 있습니다:\n\nbonus_points\n\n         oct  nov  dec\nbob      0.0  NaN  2.0\ncolin    NaN  1.0  0.0\ndarwin   0.0  1.0  0.0\ncharles  3.0  3.0  0.0\n\n\n\nfixed_bonus_points = bonus_points.fillna(0) # NA 값 0으로 바꾸기\nfixed_bonus_points.insert(loc=0, column=\"sep\", value=0) # 누락된 컬럼 만들기\nfixed_bonus_points.loc[\"alice\"] = 0 # 누락된 행 만들기\nfixed_bonus_points\n\n         sep  oct  nov  dec\nbob        0  0.0  0.0  2.0\ncolin      0  0.0  1.0  0.0\ndarwin     0  0.0  1.0  0.0\ncharles    0  3.0  3.0  0.0\nalice      0  0.0  0.0  0.0\n\n\n\ngrades + fixed_bonus_points\n\n         dec   nov   oct   sep\nalice    NaN   9.0   8.0   8.0\nbob      NaN   9.0   9.0  10.0\ncharles  NaN   5.0  11.0   4.0\ncolin    NaN   NaN   NaN   NaN\ndarwin   NaN  11.0  10.0   9.0\n\n\n훨씬 낫네요: 일부 데이터를 꾸며냈지만 덜 불공정합니다.\n누락된 값을 다루는 또 다른 방법은 보간입니다. bonus_points DataFrame을 다시 보죠:\n\nbonus_points\n\n         oct  nov  dec\nbob      0.0  NaN  2.0\ncolin    NaN  1.0  0.0\ndarwin   0.0  1.0  0.0\ncharles  3.0  3.0  0.0\n\n\ninterpolate 메서드를 사용해 보죠. 기본적으로 수직 방향(axis=0)으로 보간합니다. 따라서 수평으로(axis=1)으로 보간하도록 지정합니다.\n\nbonus_points.interpolate(axis=1)\n\n         oct  nov  dec\nbob      0.0  1.0  2.0\ncolin    NaN  1.0  0.0\ndarwin   0.0  1.0  0.0\ncharles  3.0  3.0  0.0\n\n\nbob의 보너스 포인트는 10월에 0이고 12월에 2입니다. 11월을 보간하면 평균 보너스 포인트 1을 얻습니다. colin의 보너스 포인트는 11월에 1이지만 9월에 포인트는 얼마인지 모릅니다. 따라서 보간할 수 없고 10월의 포인트는 그대로 누락된 값으로 남아 있습니다. 이를 해결하려면 보간하기 전에 9월의 보너스 포인트를 0으로 설정해야 합니다.\n\nbetter_bonus_points = bonus_points.copy()\nbetter_bonus_points.insert(0, \"sep\", 0)\nbetter_bonus_points.loc[\"alice\"] = 0\nbetter_bonus_points = better_bonus_points.interpolate(axis=1)\nbetter_bonus_points\n\n         sep  oct  nov  dec\nbob      0.0  0.0  1.0  2.0\ncolin    0.0  0.5  1.0  0.0\ndarwin   0.0  0.0  1.0  0.0\ncharles  0.0  3.0  3.0  0.0\nalice    0.0  0.0  0.0  0.0\n\n\n좋습니다. 이제 모든 보너스 포인트가 합리적으로 보간되었습니다. 최종 점수를 확인해 보죠:\n\ngrades + better_bonus_points\n\n         dec   nov   oct   sep\nalice    NaN   9.0   8.0   8.0\nbob      NaN  10.0   9.0  10.0\ncharles  NaN   5.0  11.0   4.0\ncolin    NaN   NaN   NaN   NaN\ndarwin   NaN  11.0  10.0   9.0\n\n\n9월 열이 오른쪽에 추가되었는데 좀 이상합니다. 이는 더하려는 DataFrame이 정확히 같은 열을 가지고 있지 않기 때문입니다(grade DataFrame에는 \"dec\" 열이 없습니다). 따라서 판다스는 알파벳 순서로 최종 열을 정렬합니다. 이를 해결하려면 덧셈을 하기 전에 누락된 열을 추가하면 됩니다:\n\ngrades[\"dec\"] = np.nan\nfinal_grades = grades + better_bonus_points\nfinal_grades\n\n          sep   oct   nov  dec\nalice     8.0   8.0   9.0  NaN\nbob      10.0   9.0  10.0  NaN\ncharles   4.0  11.0   5.0  NaN\ncolin     NaN   NaN   NaN  NaN\ndarwin    9.0  10.0  11.0  NaN\n\n\n12월과 colin에 대해 할 수 있는 것이 많지 않습니다. 보너스 포인트를 만드는 것이 나쁘지만 점수를 합리적으로 올릴 수는 없습니다(어떤 선생님들은 그럴 수 있지만). dropna() 메서드를 사용해 모두 NaN인 행을 삭제합니다:\n\nfinal_grades_clean = final_grades.dropna(how=\"all\")\nfinal_grades_clean\n\n          sep   oct   nov  dec\nalice     8.0   8.0   9.0  NaN\nbob      10.0   9.0  10.0  NaN\ncharles   4.0  11.0   5.0  NaN\ndarwin    9.0  10.0  11.0  NaN\n\n\n그다음 axis 매개변수를 1로 지정하여 모두 NaN인 열을 삭제합니다:\n\nfinal_grades_clean = final_grades_clean.dropna(axis=1, how=\"all\")\nfinal_grades_clean\n\n          sep   oct   nov\nalice     8.0   8.0   9.0\nbob      10.0   9.0  10.0\ncharles   4.0  11.0   5.0\ndarwin    9.0  10.0  11.0"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#groupby로-집계하기",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#groupby로-집계하기",
    "title": "week_1b_pandas",
    "section": "groupby로 집계하기",
    "text": "groupby로 집계하기\nSQL과 비슷하게 판다스는 데이터를 그룹핑하고 각 그룹에 대해 연산을 수행할 수 있습니다.\n먼저 그루핑을 위해 각 사람의 데이터를 추가로 만들겠습니다. NaN 값을 어떻게 다루는지 보기 위해 final_grades DataFrame을 다시 사용하겠습니다:\n\nfinal_grades[\"hobby\"] = [\"Biking\", \"Dancing\", np.nan, \"Dancing\", \"Biking\"]\nfinal_grades\n\n          sep   oct   nov  dec    hobby\nalice     8.0   8.0   9.0  NaN   Biking\nbob      10.0   9.0  10.0  NaN  Dancing\ncharles   4.0  11.0   5.0  NaN      NaN\ncolin     NaN   NaN   NaN  NaN  Dancing\ndarwin    9.0  10.0  11.0  NaN   Biking\n\n\nhobby로 이 DataFrame을 그룹핑해 보죠:\n\ngrouped_grades = final_grades.groupby(\"hobby\")\ngrouped_grades\n\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002B00558A6D0>\n\n\n이제 hobby마다 평균 점수를 계산할 수 있습니다:\n\ngrouped_grades.mean()\n\n          sep  oct   nov  dec\nhobby                        \nBiking    8.5  9.0  10.0  NaN\nDancing  10.0  9.0  10.0  NaN\n\n\n\nfinal_grades.groupby(\"hobby\").mean()\n\n          sep  oct   nov  dec\nhobby                        \nBiking    8.5  9.0  10.0  NaN\nDancing  10.0  9.0  10.0  NaN\n\n\n아주 쉽네요! 평균을 계산할 때 NaN 값은 그냥 무시됩니다."
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#피봇-테이블",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#피봇-테이블",
    "title": "week_1b_pandas",
    "section": "피봇 테이블",
    "text": "피봇 테이블\n판다스는 스프레드시트와 비슷하 피봇 테이블을 지원하여 데이터를 빠르게 요약할 수 있습니다. 어떻게 동작하는 알아 보기 위해 간단한 DataFrame을 만들어 보죠:\n\nbonus_points.stack().reset_index()\n\n   level_0 level_1    0\n0      bob     oct  0.0\n1      bob     dec  2.0\n2    colin     nov  1.0\n3    colin     dec  0.0\n4   darwin     oct  0.0\n5   darwin     nov  1.0\n6   darwin     dec  0.0\n7  charles     oct  3.0\n8  charles     nov  3.0\n9  charles     dec  0.0\n\n\n\nmore_grades = final_grades_clean.stack().reset_index()\nmore_grades.columns = [\"name\", \"month\", \"grade\"]\nmore_grades[\"bonus\"] = [np.nan, np.nan, np.nan, 0, np.nan, 2, 3, 3, 0, 0, 1, 0]\nmore_grades\n\n       name month  grade  bonus\n0     alice   sep    8.0    NaN\n1     alice   oct    8.0    NaN\n2     alice   nov    9.0    NaN\n3       bob   sep   10.0    0.0\n4       bob   oct    9.0    NaN\n5       bob   nov   10.0    2.0\n6   charles   sep    4.0    3.0\n7   charles   oct   11.0    3.0\n8   charles   nov    5.0    0.0\n9    darwin   sep    9.0    0.0\n10   darwin   oct   10.0    1.0\n11   darwin   nov   11.0    0.0\n\n\n이제 이 DataFrame에 대해 pd.pivot_table() 함수를 호출하고 name 열로 그룹핑합니다. 기본적으로 pivot_table()은 수치 열의 평균을 계산합니다:\n\npd.pivot_table(more_grades, index=\"name\")\n\n            bonus      grade\nname                        \nalice         NaN   8.333333\nbob      1.000000   9.666667\ncharles  2.000000   6.666667\ndarwin   0.333333  10.000000\n\n<string>:1: FutureWarning: pivot_table dropped a column because it failed to aggregate. This behavior is deprecated and will raise in a future version of pandas. Select only the columns that can be aggregated.\n\n\n집계 함수를 aggfunc 매개변수로 바꿀 수 있습니다. 또한 집계 대상의 열을 리스트로 지정할 수 있습니다:\n\npd.pivot_table(more_grades, index=\"name\", values=[\"grade\",\"bonus\"], aggfunc=np.max)\n\n         bonus  grade\nname                 \nalice      NaN    9.0\nbob        2.0   10.0\ncharles    3.0   11.0\ndarwin     1.0   11.0\n\n\ncolumns 매개변수를 지정하여 수평으로 집계할 수 있고 margins=True로 설정해 각 행과 열에 대해 전체 합을 계산할 수 있습니다:\n\npd.pivot_table(more_grades, index=\"name\", values=\"grade\", columns=\"month\", margins=True)\n\nmonth      nov   oct    sep        All\nname                                  \nalice     9.00   8.0   8.00   8.333333\nbob      10.00   9.0  10.00   9.666667\ncharles   5.00  11.0   4.00   6.666667\ndarwin   11.00  10.0   9.00  10.000000\nAll       8.75   9.5   7.75   8.666667\n\n\n마지막으로 여러 개의 인덱스나 열 이름을 지정하면 판다스가 다중 레벨 인덱스를 만듭니다:\n\npd.pivot_table(more_grades, index=(\"name\", \"month\"), margins=True)\n\n               bonus  grade\nname    month              \nalice   nov      NaN   9.00\n        oct      NaN   8.00\n        sep      NaN   8.00\nbob     nov    2.000  10.00\n        oct      NaN   9.00\n        sep    0.000  10.00\ncharles nov    0.000   5.00\n        oct    3.000  11.00\n        sep    3.000   4.00\ndarwin  nov    0.000  11.00\n        oct    1.000  10.00\n        sep    0.000   9.00\nAll            1.125   8.75"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#함수",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#함수",
    "title": "week_1b_pandas",
    "section": "함수",
    "text": "함수\n큰 DataFrame을 다룰 때 내용을 간단히 요약하는 것이 도움이 됩니다. 판다스는 이를 위한 몇 가지 함수를 제공합니다. 먼저 수치 값, 누락된 값, 텍스트 값이 섞인 큰 DataFrame을 만들어 보죠. 주피터 노트북은 이 DataFrame의 일부만 보여줍니다:\n\nmuch_data = np.fromfunction(lambda x,y: (x+y*y)%17*11, (10000, 26))\nlarge_df = pd.DataFrame(much_data, columns=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nlarge_df[large_df % 16 == 0] = np.nan\nlarge_df.insert(3,\"some_text\", \"Blabla\")\nlarge_df\n\n         A     B     C some_text      D  ...      V      W     X      Y      Z\n0      NaN  11.0  44.0    Blabla   99.0  ...    NaN   88.0  22.0  165.0  143.0\n1     11.0  22.0  55.0    Blabla  110.0  ...    NaN   99.0  33.0    NaN  154.0\n2     22.0  33.0  66.0    Blabla  121.0  ...   11.0  110.0  44.0    NaN  165.0\n3     33.0  44.0  77.0    Blabla  132.0  ...   22.0  121.0  55.0   11.0    NaN\n4     44.0  55.0  88.0    Blabla  143.0  ...   33.0  132.0  66.0   22.0    NaN\n...    ...   ...   ...       ...    ...  ...    ...    ...   ...    ...    ...\n9995   NaN   NaN  33.0    Blabla   88.0  ...  165.0   77.0  11.0  154.0  132.0\n9996   NaN  11.0  44.0    Blabla   99.0  ...    NaN   88.0  22.0  165.0  143.0\n9997  11.0  22.0  55.0    Blabla  110.0  ...    NaN   99.0  33.0    NaN  154.0\n9998  22.0  33.0  66.0    Blabla  121.0  ...   11.0  110.0  44.0    NaN  165.0\n9999  33.0  44.0  77.0    Blabla  132.0  ...   22.0  121.0  55.0   11.0    NaN\n\n[10000 rows x 27 columns]\n\n\nhead() 메서드는 처음 5개 행을 반환합니다:\n\nlarge_df.head(n=10)\n\n      A      B      C some_text      D  ...     V      W      X      Y      Z\n0   NaN   11.0   44.0    Blabla   99.0  ...   NaN   88.0   22.0  165.0  143.0\n1  11.0   22.0   55.0    Blabla  110.0  ...   NaN   99.0   33.0    NaN  154.0\n2  22.0   33.0   66.0    Blabla  121.0  ...  11.0  110.0   44.0    NaN  165.0\n3  33.0   44.0   77.0    Blabla  132.0  ...  22.0  121.0   55.0   11.0    NaN\n4  44.0   55.0   88.0    Blabla  143.0  ...  33.0  132.0   66.0   22.0    NaN\n5  55.0   66.0   99.0    Blabla  154.0  ...  44.0  143.0   77.0   33.0   11.0\n6  66.0   77.0  110.0    Blabla  165.0  ...  55.0  154.0   88.0   44.0   22.0\n7  77.0   88.0  121.0    Blabla    NaN  ...  66.0  165.0   99.0   55.0   33.0\n8  88.0   99.0  132.0    Blabla    NaN  ...  77.0    NaN  110.0   66.0   44.0\n9  99.0  110.0  143.0    Blabla   11.0  ...  88.0    NaN  121.0   77.0   55.0\n\n[10 rows x 27 columns]\n\n\n마지막 5개 행을 반환하는 tail() 함수도 있습니다. 원하는 행 개수를 전달할 수도 있습니다:\n\nlarge_df.tail(n=2)\n\n         A     B     C some_text      D  ...     V      W     X     Y      Z\n9998  22.0  33.0  66.0    Blabla  121.0  ...  11.0  110.0  44.0   NaN  165.0\n9999  33.0  44.0  77.0    Blabla  132.0  ...  22.0  121.0  55.0  11.0    NaN\n\n[2 rows x 27 columns]\n\n\ninfo() 메서드는 각 열의 내용을 요약하여 출력합니다:\n\nlarge_df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 27 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   A          8823 non-null   float64\n 1   B          8824 non-null   float64\n 2   C          8824 non-null   float64\n 3   some_text  10000 non-null  object \n 4   D          8824 non-null   float64\n 5   E          8822 non-null   float64\n 6   F          8824 non-null   float64\n 7   G          8824 non-null   float64\n 8   H          8822 non-null   float64\n 9   I          8823 non-null   float64\n 10  J          8823 non-null   float64\n 11  K          8822 non-null   float64\n 12  L          8824 non-null   float64\n 13  M          8824 non-null   float64\n 14  N          8822 non-null   float64\n 15  O          8824 non-null   float64\n 16  P          8824 non-null   float64\n 17  Q          8824 non-null   float64\n 18  R          8823 non-null   float64\n 19  S          8824 non-null   float64\n 20  T          8824 non-null   float64\n 21  U          8824 non-null   float64\n 22  V          8822 non-null   float64\n 23  W          8824 non-null   float64\n 24  X          8824 non-null   float64\n 25  Y          8822 non-null   float64\n 26  Z          8823 non-null   float64\ndtypes: float64(26), object(1)\nmemory usage: 2.1+ MB\n\n\n마지막으로 describe() 메서드는 각 열에 대한 주요 집계 연산을 수행한 결과를 보여줍니다:\nFinally, the describe() method gives a nice overview of the main aggregated values over each column: * count: null(NaN)이 아닌 값의 개수 * mean: null이 아닌 값의 평균 * std: null이 아닌 값의 표준 편차 * min: null이 아닌 값의 최솟값 * 25%, 50%, 75%: null이 아닌 값의 25번째, 50번째, 75번째 백분위수 * max: null이 아닌 값의 최댓값\n\nlarge_df.describe()\n\n                 A            B  ...            Y            Z\ncount  8823.000000  8824.000000  ...  8822.000000  8823.000000\nmean     87.977559    87.972575  ...    88.000000    88.022441\nstd      47.535911    47.535523  ...    47.536879    47.535911\nmin      11.000000    11.000000  ...    11.000000    11.000000\n25%      44.000000    44.000000  ...    44.000000    44.000000\n50%      88.000000    88.000000  ...    88.000000    88.000000\n75%     132.000000   132.000000  ...   132.000000   132.000000\nmax     165.000000   165.000000  ...   165.000000   165.000000\n\n[8 rows x 26 columns]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#저장",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#저장",
    "title": "week_1b_pandas",
    "section": "저장",
    "text": "저장\nCSV, HTML, JSON로 저장해 보죠:\n\n#my_df.to_csv(\"my_df.csv\")\n#my_df.to_html(\"my_df.html\")\n#my_df.to_json(\"my_df.json\")\n\n저장된 내용을 확인해 보죠:\n\n#for filename in (\"my_df.csv\", \"my_df.html\", \"my_df.json\"):\n#    print(\"#\", filename)\n#    with open(filename, \"rt\") as f:\n#        print(f.read())\n#\n\n인덱스는 (이름 없이) CSV 파일의 첫 번째 열에 저장되었습니다. HTML에서는 <th> 태그와 JSON에서는 키로 저장되었습니다.\n다른 포맷으로 저장하는 것도 비슷합니다. 하지만 일부 포맷은 추가적인 라이브러리 설치가 필요합니다. 예를 들어, 엑셀로 저장하려면 openpyxl 라이브러리가 필요합니다:\n\ntry:\n    my_df.to_excel(\"my_df.xlsx\", sheet_name='People')\nexcept ImportError as e:\n    print(e)\n\nNo module named 'openpyxl'"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#로딩",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#로딩",
    "title": "week_1b_pandas",
    "section": "로딩",
    "text": "로딩\nCSV 파일을 DataFrame으로 로드해 보죠:\n\nmy_df_loaded = pd.read_csv(\"my_df.csv\", index_col=0)\nmy_df_loaded\n\n         hobby  weight  birthyear  children\nalice   Biking    68.5       1985       NaN\nbob    Dancing    83.1       1984       3.0\n\n\n예상할 수 있듯이 read_json, read_html, read_excel 함수도 있습니다. 인터넷에서 데이터를 바로 읽을 수도 있습니다. 예를 들어 깃허브에서 1,000개의 U.S. 도시를 로드해 보죠:\n\nus_cities = None\ntry:\n    csv_url = \"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\"\n    us_cities = pd.read_csv(csv_url, index_col=0)\n    us_cities = us_cities.head()\nexcept IOError as e:\n    print(e)\nus_cities\n\n                     State  Population        lat         lon\nCity                                                         \nMarysville      Washington       63269  48.051764 -122.177082\nPerris          California       72326  33.782519 -117.228648\nCleveland             Ohio      390113  41.499320  -81.694361\nWorcester    Massachusetts      182544  42.262593  -71.802293\nColumbia    South Carolina      133358  34.000710  -81.034814\n\n\n이외에도 많은 옵션이 있습니다. 특히 datetime 포맷에 관련된 옵션이 많습니다. 더 자세한 내용은 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#sql-조인",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#sql-조인",
    "title": "week_1b_pandas",
    "section": "SQL 조인",
    "text": "SQL 조인\n판다스의 강력한 기능 중 하나는 DataFrame에 대해 SQL 같은 조인(join)을 수행할 수 있는 것입니다. 여러 종류의 조인이 지원됩니다. 이너 조인(inner join), 레프트/라이트 아우터 조인(left/right outer join), 풀 조인(full join)입니다. 이에 대해 알아 보기 위해 간단한 DataFrame을 만들어 보죠:\n\ncity_loc = pd.DataFrame(\n    [\n        [\"CA\", \"San Francisco\", 37.781334, -122.416728],\n        [\"NY\", \"New York\", 40.705649, -74.008344],\n        [\"FL\", \"Miami\", 25.791100, -80.320733],\n        [\"OH\", \"Cleveland\", 41.473508, -81.739791],\n        [\"UT\", \"Salt Lake City\", 40.755851, -111.896657]\n    ], columns=[\"state\", \"city\", \"lat\", \"lng\"])\ncity_loc\n\n  state            city        lat         lng\n0    CA   San Francisco  37.781334 -122.416728\n1    NY        New York  40.705649  -74.008344\n2    FL           Miami  25.791100  -80.320733\n3    OH       Cleveland  41.473508  -81.739791\n4    UT  Salt Lake City  40.755851 -111.896657\n\n\n\ncity_pop = pd.DataFrame(\n    [\n        [808976, \"San Francisco\", \"California\"],\n        [8363710, \"New York\", \"New-York\"],\n        [413201, \"Miami\", \"Florida\"],\n        [2242193, \"Houston\", \"Texas\"]\n    ], index=[3,4,5,6], columns=[\"population\", \"city\", \"state\"])\ncity_pop\n\n   population           city       state\n3      808976  San Francisco  California\n4     8363710       New York    New-York\n5      413201          Miami     Florida\n6     2242193        Houston       Texas\n\n\n이제 merge() 함수를 사용해 이 DataFrame을 조인해 보죠:\n\npd.merge(left=city_loc, right=city_pop, on=\"city\")\n\n  state_x           city        lat         lng  population     state_y\n0      CA  San Francisco  37.781334 -122.416728      808976  California\n1      NY       New York  40.705649  -74.008344     8363710    New-York\n2      FL          Miami  25.791100  -80.320733      413201     Florida\n\n\n두 DataFrame은 state란 이름의 열을 가지고 있으므로 state_x와 state_y로 이름이 바뀌었습니다.\n또한 Cleveland, Salt Lake City, Houston은 두 DataFrame에 모두 존재하지 않기 때문에 삭제되었습니다. SQL의 INNER JOIN과 동일합니다. 도시를 삭제하지 않고 NaN으로 채우는 FULL OUTER JOIN을 원하면 how=\"outer\"로 지정합니다:\n\nall_cities = pd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"outer\")\nall_cities\n\n  state_x            city        lat         lng  population     state_y\n0      CA   San Francisco  37.781334 -122.416728    808976.0  California\n1      NY        New York  40.705649  -74.008344   8363710.0    New-York\n2      FL           Miami  25.791100  -80.320733    413201.0     Florida\n3      OH       Cleveland  41.473508  -81.739791         NaN         NaN\n4      UT  Salt Lake City  40.755851 -111.896657         NaN         NaN\n5     NaN         Houston        NaN         NaN   2242193.0       Texas\n\n\n물론 LEFT OUTER JOIN은 how=\"left\"로 지정할 수 있습니다. 왼쪽의 DataFrame에 있는 도시만 남습니다. 비슷하게 how=\"right\"는 오른쪽 DataFrame에 있는 도시만 결과에 남습니다. 예를 들면:\n\npd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"right\")\n\n  state_x           city        lat         lng  population     state_y\n0      CA  San Francisco  37.781334 -122.416728      808976  California\n1      NY       New York  40.705649  -74.008344     8363710    New-York\n2      FL          Miami  25.791100  -80.320733      413201     Florida\n3     NaN        Houston        NaN         NaN     2242193       Texas\n\n\n조인할 키가 DataFrame 인덱스라면 left_index=True나 right_index=True로 지정해야 합니다. 키 열의 이름이 다르면 left_on과 right_on을 사용합니다. 예를 들어:\n\ncity_pop2 = city_pop.copy()\ncity_pop2.columns = [\"population\", \"name\", \"state\"]\ncity_pop2\n\n   population           name       state\n3      808976  San Francisco  California\n4     8363710       New York    New-York\n5      413201          Miami     Florida\n6     2242193        Houston       Texas\n\n\n\npd.merge(left=city_loc, right=city_pop2, left_on=\"city\", right_on=\"name\")\n\n  state_x           city        lat  ...  population           name     state_y\n0      CA  San Francisco  37.781334  ...      808976  San Francisco  California\n1      NY       New York  40.705649  ...     8363710       New York    New-York\n2      FL          Miami  25.791100  ...      413201          Miami     Florida\n\n[3 rows x 7 columns]"
  },
  {
    "objectID": "posts/week_1b_pandas/week_1b_pandas.html#연결",
    "href": "posts/week_1b_pandas/week_1b_pandas.html#연결",
    "title": "week_1b_pandas",
    "section": "연결",
    "text": "연결\nDataFrame을 조인하는 대신 그냥 연결할 수도 있습니다. concat() 함수가 하는 일입니다:\n\ncity_loc\n\n  state            city        lat         lng\n0    CA   San Francisco  37.781334 -122.416728\n1    NY        New York  40.705649  -74.008344\n2    FL           Miami  25.791100  -80.320733\n3    OH       Cleveland  41.473508  -81.739791\n4    UT  Salt Lake City  40.755851 -111.896657\n\n\n\ncity_pop\n\n   population           city       state\n3      808976  San Francisco  California\n4     8363710       New York    New-York\n5      413201          Miami     Florida\n6     2242193        Houston       Texas\n\n\n\nresult_concat = pd.concat([city_loc, city_pop])\nresult_concat\n\n        state            city        lat         lng  population\n0          CA   San Francisco  37.781334 -122.416728         NaN\n1          NY        New York  40.705649  -74.008344         NaN\n2          FL           Miami  25.791100  -80.320733         NaN\n3          OH       Cleveland  41.473508  -81.739791         NaN\n4          UT  Salt Lake City  40.755851 -111.896657         NaN\n3  California   San Francisco        NaN         NaN    808976.0\n4    New-York        New York        NaN         NaN   8363710.0\n5     Florida           Miami        NaN         NaN    413201.0\n6       Texas         Houston        NaN         NaN   2242193.0\n\n\n이 연산은 (행을 따라) 수직적으로 데이터를 연결하고 (열을 따라) 수평으로 연결하지 않습니다. 이 예에서 동일한 인덱스를 가진 행이 있습니다(예를 들면 3). 판다스는 이를 우아하게 처리합니다:\n\nresult_concat.loc[3]\n\n        state           city        lat        lng  population\n3          OH      Cleveland  41.473508 -81.739791         NaN\n3  California  San Francisco        NaN        NaN    808976.0\n\n\n또는 인덱스를 무시하도록 설정할 수 있습니다:\n\npd.concat([city_loc, city_pop], ignore_index=True)\n\n        state            city        lat         lng  population\n0          CA   San Francisco  37.781334 -122.416728         NaN\n1          NY        New York  40.705649  -74.008344         NaN\n2          FL           Miami  25.791100  -80.320733         NaN\n3          OH       Cleveland  41.473508  -81.739791         NaN\n4          UT  Salt Lake City  40.755851 -111.896657         NaN\n5  California   San Francisco        NaN         NaN    808976.0\n6    New-York        New York        NaN         NaN   8363710.0\n7     Florida           Miami        NaN         NaN    413201.0\n8       Texas         Houston        NaN         NaN   2242193.0\n\n\n한 DataFrame에 열이 없을 때 NaN이 채워져 있는 것처럼 동작합니다. join=\"inner\"로 설정하면 양쪽의 DataFrame에 존재하는 열만 반환됩니다:\n\npd.concat([city_loc, city_pop], join=\"inner\")\n\n        state            city\n0          CA   San Francisco\n1          NY        New York\n2          FL           Miami\n3          OH       Cleveland\n4          UT  Salt Lake City\n3  California   San Francisco\n4    New-York        New York\n5     Florida           Miami\n6       Texas         Houston\n\n\naxis=1로 설정하면 DataFrame을 수직이 아니라 수평으로 연결할 수 있습니다:\n\npd.concat([city_loc, city_pop], axis=1)\n\n  state            city        lat  ...  population           city       state\n0    CA   San Francisco  37.781334  ...         NaN            NaN         NaN\n1    NY        New York  40.705649  ...         NaN            NaN         NaN\n2    FL           Miami  25.791100  ...         NaN            NaN         NaN\n3    OH       Cleveland  41.473508  ...    808976.0  San Francisco  California\n4    UT  Salt Lake City  40.755851  ...   8363710.0       New York    New-York\n5   NaN             NaN        NaN  ...    413201.0          Miami     Florida\n6   NaN             NaN        NaN  ...   2242193.0        Houston       Texas\n\n[7 rows x 7 columns]\n\n\n이 경우 인덱스가 잘 정렬되지 않기 때문에 의미가 없습니다(예를 들어 Cleveland와 San Francisco의 인덱스 레이블이 3이기 때문에 동일한 행에 놓여 있습니다). 이 DataFrame을 연결하기 전에 도시로 인덱스를 재설정해 보죠:\n\npd.concat([city_loc.set_index(\"city\"), city_pop.set_index(\"city\")], axis=1)\n\n               state        lat         lng  population       state\ncity                                                               \nSan Francisco     CA  37.781334 -122.416728    808976.0  California\nNew York          NY  40.705649  -74.008344   8363710.0    New-York\nMiami             FL  25.791100  -80.320733    413201.0     Florida\nCleveland         OH  41.473508  -81.739791         NaN         NaN\nSalt Lake City    UT  40.755851 -111.896657         NaN         NaN\nHouston          NaN        NaN         NaN   2242193.0       Texas\n\n\nFULL OUTER JOIN을 수행한 것과 비슷합니다. 하지만 state 열이 state_x와 state_y로 바뀌지 않았고 city 열이 인덱스가 되었습니다.\nappend() 메서드는 DataFrame을 수직으로 연결하는 단축 메서드입니다:\n\ncity_loc.append(city_pop)\n\n        state            city        lat         lng  population\n0          CA   San Francisco  37.781334 -122.416728         NaN\n1          NY        New York  40.705649  -74.008344         NaN\n2          FL           Miami  25.791100  -80.320733         NaN\n3          OH       Cleveland  41.473508  -81.739791         NaN\n4          UT  Salt Lake City  40.755851 -111.896657         NaN\n3  California   San Francisco        NaN         NaN    808976.0\n4    New-York        New York        NaN         NaN   8363710.0\n5     Florida           Miami        NaN         NaN    413201.0\n6       Texas         Houston        NaN         NaN   2242193.0\n\n<string>:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n\n\npd.concat([city_loc,city_pop])\n\n        state            city        lat         lng  population\n0          CA   San Francisco  37.781334 -122.416728         NaN\n1          NY        New York  40.705649  -74.008344         NaN\n2          FL           Miami  25.791100  -80.320733         NaN\n3          OH       Cleveland  41.473508  -81.739791         NaN\n4          UT  Salt Lake City  40.755851 -111.896657         NaN\n3  California   San Francisco        NaN         NaN    808976.0\n4    New-York        New York        NaN         NaN   8363710.0\n5     Florida           Miami        NaN         NaN    413201.0\n6       Texas         Houston        NaN         NaN   2242193.0\n\n\n판다스의 다른 메서드와 마찬가지로 append() 메서드는 실제 city_loc을 수정하지 않습니다. 복사본을 만들어 수정한 다음 반환합니다."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "week_1a_numpy\n\n\n\n\n\n\n\nPython\n\n\nLecture\n\n\n\n\nPython Basics\n\n\n\n\n\n\nApr 6, 2023\n\n\n_\n\n\n\n\n\n\n  \n\n\n\n\nweek_1b_pandas\n\n\n\n\n\n\n\nPython\n\n\nLecture\n\n\n\n\nPython Basics\n\n\n\n\n\n\nApr 6, 2023\n\n\n_\n\n\n\n\n\n\n  \n\n\n\n\nDatamining\n\n\n\n\n\n\n\nPython\n\n\n\n\nDatamining Basics\n\n\n\n\n\n\nMar 28, 2023\n\n\nsungil_park\n\n\n\n\n\n\n  \n\n\n\n\nIssue Report\n\n\n\n\n\n\n\nIssue Report\n\n\n\n\n에잇!\n\n\n\n\n\n\nMar 27, 2023\n\n\nsungil_park\n\n\n\n\n\n\n  \n\n\n\n\nTensorflow ex\n\n\n\n\n\n\n\nPython\n\n\n\n\nDatamining Basics\n\n\n\n\n\n\nMar 21, 2023\n\n\nsungil_park\n\n\n\n\n\n\n  \n\n\n\n\nTraffic line detection using CV2\n\n\n\n\n\n\n\nPython\n\n\n\n\nPython, cv2\n\n\n\n\n\n\nMar 18, 2023\n\n\nsungil_park\n\n\n\n\n\n\n  \n\n\n\n\ntraining markdown & GGplot\n\n\n\n\n\n\n\nR\n\n\n\n\nData Visualization\n\n\n\n\n\n\nMar 15, 2023\n\n\nsungil_park\n\n\n\n\n\n\n  \n\n\n\n\npizza\n\n\n\n\n\nPost\n\n\n\n\n\n\nMar 14, 2023\n\n\nsungil_park\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "recordings.html",
    "href": "recordings.html",
    "title": "Recordings",
    "section": "",
    "text": "Running\n\n\n\nAthletics\n\n\n\nRunning\n\n\n\nsungil_park\n\n\nMar 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStress is water soluble\n\n\n\nAthletics\n\n\n\nSwimming\n\n\n\nsungil_park\n\n\nMar 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSungil Gallery\n\n\n\nPhoto\n\n\n\nSome photo\n\n\n\nsungil_park\n\n\nJul 26, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "records/gallery.html",
    "href": "records/gallery.html",
    "title": "Sungil Gallery",
    "section": "",
    "text": "대한민국 해병대\n달리는 제 1 상륙사단\n최강킹콩 3여단\n제 1576 공정대대\n흑곰 화기중대\n스파르타 직사화기소대\n상승불패 K-4반\n해병공수 243차\n兵1255期 박성일\n2021년 7월, 뜨거운 여름의 제주도, 저는 시체를 보았습니다.\n군 복무를 마친 저는 마지막 휴가증을 받고 부대 앞으로 나온 순간, 한 사내가 길거리에 쓰러져 있는 것을 보았습니다.\n도움을 주기 위해 다가간 순간 놀라움을금치 못했습니다.\n이상하게 낯이 익은 얼굴이었기 떄문이였습니다.\n그 사람은 바로 저였기 떄문입니다.\n그떄의 나는 죽고 새로 태어났다."
  },
  {
    "objectID": "records/gallery.html#兵1255期-황룡병장-박성일-전역",
    "href": "records/gallery.html#兵1255期-황룡병장-박성일-전역",
    "title": "Sungil Gallery",
    "section": "兵1255期 황룡병장 박성일 전역",
    "text": "兵1255期 황룡병장 박성일 전역"
  },
  {
    "objectID": "records/running.html",
    "href": "records/running.html",
    "title": "Running",
    "section": "",
    "text": "Updates at weekend\n\n\nRecord with Galaxy Watch 4\n\n\nGears\n\nNIKE Air Zoom Tempo NEXT% Flyknit\nNIKE Epic React Flyknit 1\n\n\n\n\nDate\nDistance(km)\nTime\nPace(/1km)\n\n\n\n\n2023/03/25\n4.2\n30:16\nTreadmil\n\n\n2023/03/24\n3.54\n23:25\n6’36\n\n\n2023/03/19\n3.01\n15:36\n5’10\n\n\n2023/03/17\n3.03\n17:55\n5’54\n\n\n2023/03/15\n3.38\n23:21\n6’54\n\n\n2023/03/05\n4.14\n30:30\n7’20"
  },
  {
    "objectID": "records/Swimming.html",
    "href": "records/Swimming.html",
    "title": "Stress is water soluble",
    "section": "",
    "text": "Updates at weekend\n\n\nRecord with Galaxy Watch 4\n\n\nGears\n\nSPEEDO Allover V-cut Jammer\nNIKE have a Nike day Swimming cap\nNIKE Vapor Mirrored Performance Goggle\n\n\n\n\nDate\nDistance(m)\nTime\nPace(/100m)\nReview\n\n\n\n\n2023/04/07\n1000\n22:56\n2’57\n25m\n\n\n2023/04/05\n3150\n67:44\n1’22\nWetsuit day 1\n\n\n2023/04/03\n2000\n41:55\n2’05\n\n\n\n2023/04/01\n1000\n19:10\n1’53\n\n\n\n2023/03/31\n1000\n19:08\n1’54\n\n\n\n2023/03/30\n700\n15:52\n2’07\nRecovery day\n\n\n2023/03/29\n2800\n51:31\n1’07\nOpenwater week6\n\n\n2023/03/23\n600\n28:59\n1’52\nRecovery day\n\n\n2023/03/22\n3050\n56:50\n1’38\nOpenwater Week5\n\n\n2023/03/21\n900\n18:53\n1’59\nRecovery day\n\n\n2023/03/20\n2100\n42:57\n2’02\n1800m\n\n\n2023/03/18\n1600\n29:31\n1’50\n50m Dash PR 42sec\n\n\n2023/03/16\n1800\n35:42\n1’58\ngood\n\n\n2023/03/14\n700\n13:52\n1’58\nDNF 40m Success\n\n\n2023/03/13\n1300\n26:25\n2’01\n\n\n\n2023/03/12\n1050\n27:28\n1’44\n\n\n\n2023/03/10\n1500\n30:00\n1’59\n1500m/30min Success\n\n\n2023/03/07\n2000\n41:52\n2’05\n\n\n\n2023/03/06\n1350\n27:28\n2’00\n\n\n\n2023/03/04\n450\n9:42\n2’06\nRecovery day\n\n\n2023/03/03\n1950\n50:13\n2’16\n\n\n\n2023/03/01\n3100\n65:00\n2’05\n3.1 to 3.1km"
  }
]