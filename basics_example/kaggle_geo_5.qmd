---
title: "Proximity Analysis"
author: "Sungil Park"
date: "2023/03/01"
description: "Kaggle Geospatial Analysis (5/5)"
categories: ['Python','Kaggle tutorial']
editor_options: 
  chunk_output_type: inline
---

```{r}

```

## Introduction

이 튜토리얼에서는 근접성 분석을 위한 몇 가지 기법을 살펴봅니다. 특히 다음과 같은 작업을 수행하는 방법을 배우게 됩니다:

-   맵에서 포인트 사이의 거리 측정하기

-   피처의 반경 내에 있는 모든 포인트 선택하기

```{python}
import folium
from folium import Marker, GeoJson
from folium.plugins import HeatMap

import pandas as pd
import geopandas as gpd
```

미국 펜실베이니아주 필라델피아에서 독성 화학물질의 배출을 추적하는 미국 환경보호청(EPA)의 데이터 세트로 작업하게 됩니다.

```{python}
releases = gpd.read_file("/home/sungil/dataset/archive/toxic_release_pennsylvania/toxic_release_pennsylvania/toxic_release_pennsylvania.shp") 
releases.head()
```

또한 같은 도시의 대기질 모니터링 스테이션에서 측정한 수치가 포함된 데이터 세트로 작업하게 됩니다.

```{python}
stations = gpd.read_file("/home/sungil/dataset/archive/PhillyHealth_Air_Monitoring_Stations/PhillyHealth_Air_Monitoring_Stations/PhillyHealth_Air_Monitoring_Stations.shp")
stations.head()
```

## Measuring distance

서로 다른 두 지오데이터프레임의 포인트 간 거리를 측정하려면 먼저 두 지오데이터프레임이 동일한 좌표 참조 시스템(CRS)을 사용하는지 확인해야 합니다. 다행히도 여기서는 둘 다 EPSG 2272를 사용합니다.

```{python}
print(stations.crs)
print(releases.crs)
```

또한 CRS를 확인하여 어떤 단위(미터, 피트 등)를 사용하는지 확인합니다. 이 경우 EPSG 2272는 피트 단위를 사용합니다.

지오판다에서 거리를 계산하는 것은 비교적 간단합니다. 아래 코드 셀은 최근_release의 비교적 최근 릴리스 인시던트와 스테이션 GeoDataFrame의 모든 스테이션 사이의 거리(피트)를 계산합니다.

```{python}
# Select one release incident in particular
recent_release = releases.iloc[360]

# Measure distance from release to each station
distances = stations.geometry.distance(recent_release.geometry)
distances
```

계산된 거리를 사용하여 각 스테이션까지의 평균 거리와 같은 통계를 얻을 수 있습니다.

또는 가장 가까운 모니터링 스테이션을 확보할 수도 있습니다.

```{python}
print('Mean distance to monitoring stations: {} feet'.format(distances.mean()))

print('Closest monitoring station ({} feet):'.format(distances.min()))
print(stations.iloc[distances.idxmin()][["ADDRESS", "LATITUDE", "LONGITUDE"]])
```

## Creating a buffer

지도에서 한 점으로부터 반경이 어느 정도 떨어진 모든 점을 이해하려면 버퍼를 만드는 것이 가장 간단한 방법입니다.

아래 코드 셀은 12개의 서로 다른 폴리곤 개체를 포함하는 GeoSeries `two_mile_buffer`를 만듭니다. 각 다각형은 서로 다른 대기 모니터링 스테이션 주변의 2마일(또는 2\*5280피트)의 버퍼입니다.

```{python}
two_mile_buffer = stations.geometry.buffer(2*5280)
two_mile_buffer.head()
```

`folium.GeoJson()`을 사용하여 각 다각형을 지도에 플롯합니다. folium에는 위도와 경도의 좌표가 필요하므로 플로팅하기 전에 CRS를 EPSG 4326으로 변환해야 합니다.

```{python}
# Create map with release incidents and monitoring stations
m = folium.Map(location=[39.9526,-75.1652], zoom_start=11)
HeatMap(data=releases[['LATITUDE', 'LONGITUDE']], radius=15).add_to(m)
for idx, row in stations.iterrows():
    Marker([row['LATITUDE'], row['LONGITUDE']]).add_to(m)
    
# Plot each polygon on the map
GeoJson(two_mile_buffer.to_crs(epsg=4326)).add_to(m)

# Show the map
m
```

이제 모니터링 스테이션에서 2마일 이내에 독성 물질 방출이 발생했는지 테스트하려면 각 다각형에 대해 12가지 테스트를 실행하여 해당 지점이 포함되어 있는지 개별적으로 확인할 수 있습니다.

하지만 더 효율적인 방법은 먼저 모든 다각형을 멀티폴리곤 객체로 축소하는 것입니다. 이 작업은 `unary_union` 속성을 사용하여 수행합니다.

```{python}
# Turn group of polygons into single multipolygon
my_union = two_mile_buffer.geometry.unary_union
print('Type:', type(my_union))

# Show the MultiPolygon object
my_union
```

`contains()` 메서드를 사용하여 다각형에 점이 포함되어 있는지 확인합니다. 튜토리얼 앞부분의 릴리스 인시던트를 사용하겠습니다. 이 릴리스 인시던트는 가장 가까운 모니터링 스테이션까지 약 3781피트 거리입니다.

```{python}
# The closest station is less than two miles away
my_union.contains(releases.iloc[360].geometry)
```

하지만 모든 방출이 대기 모니터링 스테이션에서 2마일 이내에서 발생한 것은 아닙니다!

```{python}
# The closest station is more than two miles away
my_union.contains(releases.iloc[358].geometry)
```

## Your turn

### Introduction

You are part of a crisis response team, and you want to identify how hospitals have been responding to crash collisions in New York City.

### Visualize the collision data.

Run the code cell below to load a GeoDataFrame collisions tracking major motor vehicle collisions in 2013-2018.

```{python}
collisions = gpd.read_file("/home/sungil/dataset/archive/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp")
collisions.head()
```

```{python}
m_1 = folium.Map(location=[40.7, -74], zoom_start=11) 

HeatMap(data=collisions[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_1)
```

### Understand hospital coverage.

Run the next code cell to load the hospital data.

```{python}
hospitals = gpd.read_file("/home/sungil/dataset/archive/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp")
hospitals.head()
```

```{python}
m_2 = folium.Map(location=[40.7, -74], zoom_start=11) 

for idx, row in hospitals.iterrows():
    Marker([row['latitude'], row['longitude']], popup=row['name']).add_to(m_2)
```

### When was the closest hospital more than 10 kilometers away?

Create a DataFrame `outside_range` containing all rows from `collisions` with crashes that occurred more than 10 kilometers from the closest hospital.

Note that both `hospitals` and `collisions` have EPSG 2263 as the coordinate reference system, and EPSG 2263 has units of meters.

```{python}
coverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)
my_union = coverage.geometry.unary_union
outside_range = collisions.loc[~collisions["geometry"].apply(lambda x: my_union.contains(x))]
```

```{python}
percentage = round(100*len(outside_range)/len(collisions), 2)
print("Percentage of collisions more than 10 km away from the closest hospital: {}%".format(percentage))
```

### Make a recommender.¶

When collisions occur in distant locations, it becomes even more vital that injured persons are transported to the nearest available hospital.

With this in mind, you decide to create a recommender that:

-   takes the location of the crash (in EPSG 2263) as input,

-   finds the closest hospital (where distance calculations are done in EPSG 2263), and

-   returns the name of the closest hospital.

```{python}
def best_hospital(collision_location):
    idx_min = hospitals.geometry.distance(collision_location).idxmin()
    my_hospital = hospitals.iloc[idx_min]
    name = my_hospital["name"]
    return name
```

### Which hospital is under the highest demand?¶

Considering only collisions in the `outside_range` DataFrame, which hospital is most recommended?

Your answer should be a Python string that exactly matches the name of the hospital returned by the function you created in 4).

```{python}
highest_demand = outside_range.geometry.apply(best_hospital).value_counts().idxmax()
```

### Where should the city construct new hospitals?

Run the next code cell (without changes) to visualize hospital locations, in addition to collisions that occurred more than 10 kilometers away from the closest hospital.

```{python}
m_6 = folium.Map(location=[40.7, -74], zoom_start=11) 

coverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)
folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m_6)
HeatMap(data=outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_6)
folium.LatLngPopup().add_to(m_6)

m_6
```
