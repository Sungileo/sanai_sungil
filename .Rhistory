a <- st_point(c(5, 2, 3, 1))
plot(a)
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
b <- st_linestring(linestring_matrix)
plot(b)
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
b <- st_multipoint(multipoint_matrix)
plot(b)
a <- st_point(c(5, 2, 3, 1))
plot(a)
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
b <- st_multipoint(multipoint_matrix)
plot(b)
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
c <- st_linestring(linestring_matrix)
plot(c)
polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
st_polygon(polygon_list)
d <- st_polygon(polygon_list)
plot(d)
plot(st_polygon(polygon_list))
st_polygon(polygon_list) %>% plot()
st_linestring(linestring_matrix) %>% plot()
st_multipoint(multipoint_matrix) %>% plot()
st_point(c(5, 2, 3, 1)) %>% plot()
st_point(c(5, 2, 3, 1)) %>% plot()
st_polygon(polygon_with_hole_list) %>% plot()
polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list) %>% plot()
multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
st_multilinestring((multilinestring_list)) %>% plot()
st_multipolygon(multipolygon_list) %>% plot()
multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
st_multipolygon(multipolygon_list) %>% plot()
gemetrycollection_list = list(st_multipoint(multipoint_matrix),
st_linestring(linestring_matrix))
st_geometrycollection(gemetrycollection_list) %>% plot()
point1 = st_point(c(5, 2))
point2 = st_point(c(1, 3))
points_sfc = st_sfc(point1, point2)
points_sfc %>% plot()
polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
polygon1 = st_polygon(polygon_list1)
polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
polygon2 = st_polygon(polygon_list2)
polygon_sfc = st_sfc(polygon1, polygon2)
polygon_sfc %>% plot()
View(polygon_sfc)
multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
multilinestring1 = st_multilinestring((multilinestring_list1))
multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)),
rbind(c(1, 7), c(3, 8)))
multilinestring2 = st_multilinestring((multilinestring_list2))
multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
st_crs(points_sfc)
points_sfc_wgs = st_sfc(point1, point2, crs = 4326)
st_crs(points_sfc_wgs)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
View(lnd_sf)
class(lnd_sf)
lnd_sf
library(rgdal)
install.packages("rgdal")
#install.packages("rgdal")
library(rgdal)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
new_raster
plot(new_raster)
my_raster = raster(nrows = 8, ncols = 8, res = 0.5,
xmn = -2.0, xmx = 2.0, ymn = -2.0, ymx = 2.0, vals = 1:64)
my_raster
## plotting
plot(my_raster, main = "my raster (64 cells = 8 rows * 8 cols)")
## plotting
plot(my_raster)
nlayer(my_raster)
nlayer(my_raster)
nlayers(my_raster)
## plotting
plot(my_raster)
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
r_brick = brick(multi_raster_file)
r_brick
nlayers(r_brick)
plot(r_brick)
nlayers(r_brick)
plot(r_brick)
raster_on_disk = raster(r_brick, layer = 1)
raster_in_memory = raster(xmn = 301905, xmx = 335745,
ymn = 4111245, ymx = 4154085,
res = 30)
values(raster_in_memory) = sample(seq_len(ncell(raster_in_memory)))
crs(raster_in_memory) = crs(raster_on_disk) #같은 좌표 입력
r_stack = stack(raster_in_memory, raster_on_disk)
r_stack
plot(r_stack)
reticulate::repl_python()
a = ([1,2,3],[4,5,6],[7,8])
a
a.flatten()
i
a = ([1,2,3],[4,5,6],[7,8])
for i in a:
i
a = ([1,2,3],[4,5,6],[7,8])
for i in a:
for x in i:
x
a = ([1,2,3],[4,5,6],[7,8])
b = []
for i in a:
for x in i:
b.append(x)
a = ([1,2,3],[4,5,6],[7,8])
b = []
for i in a:
for x in i:
b.append(x)
b
#|warning: False
library(sf)
library(raster)
library(spData)
library(spDataLarge)
vignette(package = "sf")
world %>% head()
names(world)
plot(world)
library(sp)
world_sp = as(world, Class = "Spatial")
world_sf = st_as_sf(world_sp)
plot(world["continent"])
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
st_point(c(5, 2, 3, 1)) %>% plot()
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
st_multipoint(multipoint_matrix) %>% plot()
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
st_linestring(linestring_matrix) %>% plot()
polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
st_polygon(polygon_list) %>% plot()
polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list) %>% plot()
multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
st_multilinestring((multilinestring_list)) %>% plot()
multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
st_multipolygon(multipolygon_list) %>% plot()
gemetrycollection_list = list(st_multipoint(multipoint_matrix),
st_linestring(linestring_matrix))
st_geometrycollection(gemetrycollection_list) %>% plot()
point1 = st_point(c(5, 2))
point2 = st_point(c(1, 3))
points_sfc = st_sfc(point1, point2)
points_sfc %>% plot()
polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
polygon1 = st_polygon(polygon_list1)
polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
polygon2 = st_polygon(polygon_list2)
polygon_sfc = st_sfc(polygon1, polygon2)
polygon_sfc %>% plot()
multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
multilinestring1 = st_multilinestring((multilinestring_list1))
multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)),
rbind(c(1, 7), c(3, 8)))
multilinestring2 = st_multilinestring((multilinestring_list2))
multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
st_crs(points_sfc)
points_sfc_wgs = st_sfc(point1, point2, crs = 4326)
st_crs(points_sfc_wgs)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
lnd_sf
#install.packages("rgdal")
library(rgdal)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
new_raster
plot(new_raster)
my_raster = raster(nrows = 8, ncols = 8, res = 0.5,
xmn = -2.0, xmx = 2.0, ymn = -2.0, ymx = 2.0, vals = 1:64)
nlayers(my_raster)
## plotting
plot(my_raster)
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
r_brick = brick(multi_raster_file)
nlayers(r_brick)
plot(r_brick)
raster_on_disk = raster(r_brick, layer = 1)
raster_in_memory = raster(xmn = 301905, xmx = 335745,
ymn = 4111245, ymx = 4154085,
res = 30)
values(raster_in_memory) = sample(seq_len(ncell(raster_in_memory)))
crs(raster_in_memory) = crs(raster_on_disk) #같은 좌표 입력
r_stack = stack(raster_in_memory, raster_on_disk)
r_stack
plot(r_stack)
library(sf)
library(raster)
library(spData)
library(spDataLarge)
library(sp)
vector_filepath = system.file("vector/zion.gpkg", package = "spDataLarge")
new_vector = st_read(vector_filepath)
## st_read() : read vector dataset in R sf package
st_crs(new_vector)
plot(new_vector)
st_crs(new_vector)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
projection(new_raster)
new_raster3  <-  new_raster
projection(new_raster3) <-  "+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0
+units=m +no_defs"
names(world)
luxembourg = world[world$name_long == "Luxembourg", ]
luxembourg
south_korea = world[world$name_long == "Republic of Korea", ]
south_korea
plot(south_korea)
plot(south_korea[1])
st_area(luxembourg)
st_area(south_korea)
plot(south_korea)
st_area(luxembourg)
st_area(south_korea)
names(world)
luxembourg = world[world$name_long == "Luxembourg", ]
south_korea = world[world$name_long == "Republic of Korea", ]
plot(south_korea)
plot(south_korea[1])
st_area(luxembourg), st_area(south_korea)
st_area(luxembourg)
st_area(south_korea)
names(world)
luxembourg = world[world$name_long == "Luxembourg", ]
south_korea = world[world$name_long == "Republic of Korea", ]
st_area(luxembourg)
st_area(south_korea)
library(tidyr)
dim(world)
methods(class = "sf")
world_df = st_drop_geometry(world)
class(world_df)
class(world_df)
dim(world_df)
world_asia <- world %>%
filter(continent == "Asia") %>%
select(name_long,geom)
world_asia <- world %>%
filter(continent == "Asia") %>%
select(c(name_long,geom))
world_asia <- world %>%
filter(continent == "Asia") %>%
select(name_long)
library(dplyr)
world_asia <- world %>%
filter(continent == "Asia") %>%
select(name_long)
world_asia
world_asia %>% plot()
world %>%
filter(continent == "Asia") %>%
select(name_long) %>%
plot()
world_agg1  <-  aggregate(pop ~ continent, FUN = sum, data = world, na.rm = TRUE)
world_agg1
str(world_agg1)
class(world_agg1)
world_agg2  <-  aggregate(world["pop"], by = list(world$continent),
FUN = sum, na.rm = TRUE)
world_agg2
class(world_agg2)
world['pop']
class(world['pop'])
world$pop
class(world$pop)
world_agg2  <-  aggregate(world["pop"], by = list(world$continent),
FUN = sum, na.rm = TRUE)
class(world_agg2)
world['pop']
class(world['pop'])
world$pop
class(world$pop)
class(world['pop'])
class(world$pop)
class(world$pop)
world_agg2 %>% plot()
world_agg3 <- world %>%
world_agg3 <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm = TRUE))
world_agg3
world_agg3 <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm = TRUE),n_countries = n())
world_agg3
world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), n_countries = n()) %>%
top_n(n = 3, wt = pop) %>%
arrange(desc(pop)) %>%
plot()
world_coffee <-  left_join(world, coffee_data)
world_coffee
#> Joining, by = "name_long"
class(world_coffee)
#> [1] "sf"         "tbl_df"     "tbl"        "data.frame"
names(world_coffee)
plot(world_coffee["coffee_production_2017"])
world_coffee <-  left_join(world, coffee_data)
class(world_coffee)
names(world_coffee)
plot(world_coffee["coffee_production_2017"])
setdiff(coffee_data$name_long, world$name_long)
str_subset(world$name_long, "Dem*.+Congo")
library(stringr)
str_subset(world$name_long, "Dem*.+Congo")
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)]  <-
str_subset(world$name_long, "Dem*.+Congo")
world_coffee_match <- inner_join(world, coffee_data)
nrow(world_coffee_match)
world %>% transmute(pop_dens = pop / area_km2)
world %>% transmute(pop_dens = pop / area_km2) %>% head()
world_unite <-  world %>%
unite("con_reg", continent:region_un, sep = ":", remove = TRUE) #기존열 제거
world_unite <-  world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE) #기존열 남김
world_unite <-  world %>%
unite("con_reg", continent:region_un, sep = ":", remove = TRUE) #기존열 제거
world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE) #기존열 남김
world %>%
unite("con_reg", continent:region_un, sep = ":", remove = TRUE) #기존열 제거
world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE) #기존열 남김
world_separate <-  world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":")
world_separate
world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":") %>% head()
world %>%
unite("con_reg", continent:region_un, sep = ":", remove = TRUE) %>% head()
world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE) %>% head()
elev <- raster(nrows = 6, # integer > 0. Number of rows
ncols = 6, # integer > 0. Number of columns
#res = 0.5, # numeric vector of length 1 or 2 to set the resolution
xmn = -1.5, # minimum x coordinate (left border)
xmx = 1.5, # maximum x coordinate (right border)
ymn = -1.5, # minimum y coordinate (bottom border)
ymx = 1.5, # maximum y coordinate (top border)
vals = 1:36) # values for the new RasterLayer
elev
plot(elev, main = 'raster datasets with numeric valeus')
grain_order <- c("clay", "silt", "sand")
grain_char <- sample(grain_order, 36, replace = TRUE)
grain_fact <- factor(grain_char, levels = grain_order)
grain <- raster(nrows = 6, ncols = 6, res = 0.5,
xmn = -1.5, xmx = 1.5, ymn = -1.5, ymx = 1.5,
vals = grain_fact)
plot(grain)
levels(grain)[[1]] <- cbind(levels(grain)[[1]], wetness = c("wet", "moist", "dry"))
levels(grain)
grain[c(1, 11, 35)]
factorValues(grain, grain[c(1, 11, 35)])
levels(grain)[[1]] <- cbind(levels(grain)[[1]], wetness = c("wet", "moist", "dry"))
levels(grain)
grain[c(1, 11, 35)]
factorValues(grain, grain[c(1, 11, 35)])
# row 1, column 1
elev[1, 1]
# cell ID 1
elev[1]
# cell ID 1
elev[1]
# row 1, column 1
elev[1, 1]
# cell ID 1
elev[1] %>% plot()
# row 1, column 1
elev[1, 1] %>% plot()
# cell ID 1
elev[1:] %>% plot()
# cell ID 1
elev[1:,:] %>% plot()
canterbury  <-  nz %>% filter(Name == "Canterbury")
canterbury_height <-  nz_height[canterbury, ]
nz_height[canterbury,]
plot(nz_height[canterbury,])
nz_height[canterbury, , op = st_disjoint]
plot(nz_height[canterbury, , op = st_disjoint])
nz_height[canterbury, 2, op = st_disjoint]
plot(nz_height[canterbury, 2, op = st_disjoint])
nz_height[canterbury,]
plot(nz_height[canterbury,])
nz_height[canterbury, , op = st_disjoint]
plot(nz_height[canterbury, , op = st_disjoint])
nz_height[canterbury, 2, op = st_disjoint]
plot(nz_height[canterbury, 2, op = st_disjoint])
canterbury  <-  nz %>% filter(Name == "Canterbury")
canterbury_height <-  nz_height[canterbury, ]
nz_height[canterbury, 2, op = st_disjoint]
plot(nz_height[canterbury, 2, op = st_disjoint])
sel_sgbp <-  st_intersects(x = nz_height, y = canterbury)
class(sel_sgbp)
#> [1] "sgbp" "list"
sel_logical  <-  lengths(sel_sgbp) > 0
canterbury_height2 <-  nz_height[sel_logical, ]
sel_sgbp <-  st_intersects(x = nz_height, y = canterbury)
sel_logical  <-  lengths(sel_sgbp) > 0
canterbury_height2 <-  nz_height[sel_logical, ]
sel_sgbp <-  st_intersects(x = nz_height, y = canterbury)
sel_logical  <-  lengths(sel_sgbp) > 0
canterbury_height2 <-  nz_height[sel_logical, ]
canterbury_height3  <-  nz_height %>%
filter(st_intersects(x = ., y = canterbury, sparse = FALSE))
#아래 두개의 차이 확인
st_intersects(x = nz_height, y = canterbury, sparse = FALSE)
st_intersects(x = nz_height, y = canterbury)
class(sel_logical)
class(sel_sgbp)
st_intersects(x = nz_height, y = canterbury, sparse = FALSE)
st_intersects(x = nz_height, y = canterbury)
sel_sgbp <-  st_intersects(x = nz_height, y = canterbury)
sel_logical  <-  lengths(sel_sgbp) > 0
canterbury_height2 <-  nz_height[sel_logical, ]
canterbury_height3  <-  nz_height %>%
filter(st_intersects(x = ., y = canterbury, sparse = FALSE))
class(sel_sgbp)
st_intersects(x = nz_height, y = canterbury)
# create a polygon
a_poly  <-  st_polygon(list(rbind(c(-1, -1), c(1, -1), c(1, 1), c(-1, -1))))
a <-   st_sfc(a_poly)
# create a line
l_line <-   st_linestring(x = matrix(c(-1, -1, -0.5, 1), ncol = 2))
l <-   st_sfc(l_line)
# create points
p_matrix <- matrix(c(0.5, 1, -1, 0, 0, 1, 0.5, 1), ncol = 2)
p_multi <- st_multipoint(x = p_matrix)
p <- st_cast(st_sfc(p_multi), "POINT")
plot(a, col = c("gray"), border = c("red"))
plot(l,add = T)
plot(p,add = T)
box(col="black")
axis(side = 1, at = seq(-1.0, 1.0, 0.5), tck = 0.02)
axis(side = 2, at = seq(-1, 1, 0.5), tck = 0.02, las=1)
text(p_matrix,pos=1)
st_intersects(p, a)
st_intersects(p, a,sparse = F)
st_intersects(p, a)
st_intersects(p, a,sparse = F)[,1]
st_within(p, a, sparse = FALSE)[, 1]
st_touches(p, a, sparse = FALSE)[, 1]
sel  <-  st_is_within_distance(p, a, dist = 0.9)
lengths(sel) > 0
st_is_within_distance(p, a, dist = 0.9)
st_is_within_distance(p, a, dist = 0.9,sparse = F)
world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":") %>% head()
world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":") %>% head(5)
world_unite <- world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE) %>% head()
world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":") %>% head(5)
world_unite <- world %>%
unite("con_reg", continent:region_un, sep = ":", remove = FALSE)
world_unite %>%
separate(con_reg, c("continent", "region_un"), sep = ":") %>% head()
world_unite %>%
separate("con_reg", c("continent", "region_un"), sep = ":") %>% head()
