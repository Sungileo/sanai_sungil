tickfont = list(color = "black", family = "Arial", size = 20)),
xaxis = list(title = "Number of Cylinders",
titlefont = list(color = "red", family = "Times New Roman", size = 22),
tickfont = list(color = "green", family = "Cambria", size = 18)))%>%
layout(margin = list(
l = 10,
r = 10,
b = 0,
t = 40))
mtcars %>% group_by(cyl) %>% summarize(cnt =n())
mtcars %>% group_by(cyl) %>% summarize(cnt =n()) %>% View()
mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl)) %>% View()
View(veh_cyl)
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl)) %>% View()
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
View(veh)
plot_ly(data = veh,x=cyl,y=cnt,type="bar")
cyl <- veh$cyl
plot_ly(data = veh,x=cyl,y=cnt,type="bar")
cnt <- veh$cnt
plot_ly(data = veh,x=cyl,y=cnt,type="bar")
plot_ly(data = veh,x=veh$cyl,y=veh$cnt,type="bar")
rm(list = ls())
mtcars <- mtcars
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=veh$cyl,y=veh$cnt,type="bar")
plot_ly(data = veh,x=veh$cyl,y=veh$cnt,type="bar",text = cyl)
plot_ly(data = veh,x=veh$cyl,y=veh$cnt,type="bar",text = veh$cyl)
veh %>% plot_ly(x=cyl,y=cnt,type = "bar")
veh %>% plot_ly(x=cyl,y=cnt,type = "bar")
plot_ly(data = veh,x=veh$cyl,y=veh$cnt,type="bar",text = veh$cyl)
library(nycflights13)
dep.delay.by.day <- flights %>%
group_by(day) %>%
summarise (mean_dep_delay=mean(dep_delay,na.rm=T))
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = veh$cyl)
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl)
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl)
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Number of Vehicles per cylinders")
font = list(size=28, color="orange", family= "Calibri")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
font = list(size=28, color="orange", family= "Calibri")
titlefont = list(size=28, color="orange", family= "Calibri")
layout(title = "Number of Vehicles per cylinders",titlefont = list(size=28, color="orange", family= "Calibri")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Number of Vehicles per cylinders",titlefont = list(size=28, color="orange", family= "Calibri")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>% layout(title = "Number of Vehicles per cylinders",titlefont = list(size=28, color="orange", family= "Calibri")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>% layout(title = "Number of Vehicles per cylinders",titlefont = list(size=28, color="orange", family= "Calibri")
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Number of Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Number of Vehicles per cylinders",
font = list(size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(title = "ss",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(main = "ss",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(main = "ss",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(main = "ssssss",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(main = "ssssss",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
list(size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
library(gapminder)
install.packages("gapminder")
library(gapminder)
df <- gapminder
View(df)
# No animation
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
library(tidyverse)
library(knitr)
library(plotly)
library(readxl)
library(scales)
mtcars <- mtcars
mtcars %>% head()
vehicles <- c("Four Cylinders","Six Cylinders","Eight Cylinders")
cylinders <- mtcars %>% group_by(cyl) %>% summarize(cnt = n())
veh_cyl <- tibble(vehicles, cylinders$cnt)
plot_ly(data = veh_cyl, x = vehicles, y = cylinders$cnt, type = "bar",
text = cylinders, textposition = "auto") %>%
layout(title = "Number of Vehicles in mtcars with 4, 6, and 8 Cylinders",
titlefont = list(size = 28, color = "orange", family = "Calibri"),
yaxis = list(title = "Number of Vehicles",
font = list(color = "black", family = "Arial", size = 26),
tickfont = list(color = "black", family = "Arial", size = 20)),
xaxis = list(title = "Number of Cylinders",
titlefont = list(color = "red", family = "Times New Roman", size = 22),
tickfont = list(color = "green", family = "Cambria", size = 18)))%>%
layout(margin = list(
l = 10,
r = 10,
b = 0,
t = 40))
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
library(nycflights13)
dep.delay.by.day <- flights %>%
group_by(day) %>%
summarise (mean_dep_delay=mean(dep_delay,na.rm=T))
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
library(gapminder)
df <- gapminder
# No animation
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
reticulate::repl_python()
import geopandas as gpd
quit
# Read in the data
full_data = gpd.read_file("C:\archive\DEC_lands\DEC_lands\DEC_lands.shp")
# Read in the data
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
reticulate::repl_python()
import geopandas as gpd
quit
# Read in the data
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
reticulate::repl_python()
import geopandas as gpd
quit
# Read in the data
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
# Read in the data
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
reticulate::repl_python()
```{python}
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
full_data.head()
View(full_data)
len(full_data)
full_data.head()
type(full_data)
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
data.CLASS.value_counts()
wild_lands.head()
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
wild_lands.plot()
wild_lands.plot()
import numpy as np
import cv2
import matplotlib.pyplot as plt
wild_lands.plot()
a = wild_lands.plot()
View(a)
reticulate::repl_python()
import geopandas as gpd
# Read in the data
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
# View the first five rows of the data
full_data.head()
type(full_data)
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
data.CLASS.value_counts()
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
wild_lands.plot()
plot(wild_lands)
plot(wild_lands)
import matplotlib.pyplot as plt
plt.plot(wild_lands)
plt.plot(wild_lands)
wild_lands.plot()
from shapely.ops import cascaded_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = cascaded_union(gdf.geometry)
View(union)
union
full_data = gpd.read_file(union)
full_data.head()
full_data.plot()
full_data = gpd.read_file(union)
from shapely.ops import cascaded_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = cascaded_union(gdf.geometry)
full_data = gpd.read_file(union)
type(full_data)
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
data.CLASS.value_counts()
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
wild_lands.plot()
# Chunk 25
from shapely.ops import unary_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = cascaded_union(gdf.geometry)
full_data = gpd.read_file(union)
# Chunk 26
type(full_data)
# Chunk 27
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
# Chunk 28
data.CLASS.value_counts()
# Chunk 29
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
# Chunk 30
wild_lands.plot()
# Chunk 24
import geopandas as gpd
# Chunk 25
from shapely.ops import unary_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = cascaded_union(gdf.geometry)
full_data = gpd.read_file(union)
# Chunk 26
type(full_data)
# Chunk 27
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
# Chunk 28
data.CLASS.value_counts()
# Chunk 29
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
# Chunk 30
wild_lands.plot()
quit
# Chunk 25
from shapely.ops import unary_union
reticulate::repl_python()
import geopandas as gpd
# Chunk 24
import geopandas as gpd
# Chunk 25
from shapely.ops import unary_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = unary_union(gdf.geometry)
full_data = gpd.read_file(union)
# Chunk 26
type(full_data)
# Chunk 27
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
# Chunk 28
data.CLASS.value_counts()
# Chunk 29
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
# Chunk 30
wild_lands.plot()
import geopandas as gpd
quit
# Chunk 24
import geopandas as gpd
reticulate::repl_python()
# Chunk 25
from shapely.ops import unary_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = unary_union(gdf.geometry)
full_data = gpd.read_file(union)
# Chunk 26
type(full_data)
# Chunk 27
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
# Chunk 28
data.CLASS.value_counts()
# Chunk 29
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
# Chunk 30
wild_lands.plot()
import geopandas as gpd
from shapely.ops import unary_union
from geopandas import GeoDataFrame
gdf = GeoDataFrame.from_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
union = unary_union(gdf.geometry)
full_data = gpd.read_file(union)
```{python}
full_data = gpd.read_file("C:/archive/DEC_lands/DEC_lands/DEC_lands.shp")
type(full_data)
data = full_data.loc[:, ["CLASS", "COUNTY", "geometry"]].copy()
data.head()
data.CLASS.value_counts()
data.CLASS.value_counts()
# Select lands that fall under the "WILD FOREST" or "WILDERNESS" category
wild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()
wild_lands.head()
wild_lands.plot()
wild_lands.plot()
quit
rm(list = ls())
library(tidyverse)
mtcars <- mtcars
mtcars %>% head()
model <- lm(mpg ~ wt, data = mtcars)
summary(model)
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
ggtitle("Linear Regression of mpg ~ wt")
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)+
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
newdata <- data.frame(wt=c(3,4))
predictions <- predict(model, newdata=newdata)
predictions
beta0 <- model$coefficients[[1]][1]
beta1 <- model$coefficients[[2]][1]
newdata_mpg <- data.frame(mpg = c(beta0 + beta1*3, beta0 + beta1*4))
newdata <- cbind(newdata,newdata_mpg)
newdata
mtcars %>% head()
model_2 <- lm(mpg ~ cyl+disp+hp+drat+wt+qsec+factor(vs)+factor(am)+factor(gear)+factor(carb), data=mtcars)
summary(model_2)
model_3 <- step(model_2,direction = "backward")
summary(model_3)
model_3 %>% summary
anova(model_2,model_3)
library(tidyverse)
library(readxl)
data <- read_excel("C:\linear_model_dataset_R.xlsx")
data <- read_excel("C:/linear_model_dataset_R.xlsx")
data %>% View
data %>% head()
data %>% sapply(class)
data %>% head()
model <- lm(평당금액 ~ 건축년도, data = data)
summary(model)
plot(data)
model <- lm(평당금액 ~ Latitude+Longtitude, data = data)
model <- lm(평당금액 ~ Latitude+Longitude, data = data)
summary(model)
data <- data %>% select(-c(Latitude,Longitude))
data %>% head()
plot(data)
library(corrplot)
corrplot(data)
corrplot(data,method = "number")
data_cor <- cor(data)
corrplot(data_cor, method = "number")
data_cor <- cor(data)
corrplot(data_cor, method = "number")
corrplot(data_cor, method = "shade")
corrplot(data_cor, method = "shade",addCoef.col="black")
data_cor <- cor(data %>% select(-c(평당금액)))
corrplot(data_cor, method = "shade",addCoef.col="black")
data %>% ggplot(aes(x = `법정동 크기`, y =마트거리))+
geom_point()
data %>% ggplot(aes(x = `법정동 크기`, y =마트거리,color = 건축년도))+
geom_point()
model <- lm(평당금액 ~ 건축년도, data = data)
model <- lm(평당금액 ~ 건축년도, data = data)
summary(model)
model <- lm(평당금액 ~ 건축년도, data = data)
summary(model)
data_cor <- cor(data %>% select(-c(평당금액)))
corrplot(data_cor, method = "shade",addCoef.col="black")
data %>% ggplot(aes(x=건축년도, y=평당금액))+
geom_point()
summary(model)
model <- lm(평당금액 ~ 건축년도+층+근처역(m)+인구수+법정동 크기+외국인 비율+근처 초등학교+마트거리, data = data)
model <- lm(평당금액 ~ 건축년도+층+근처역(m)+인구수+'법정동 크기'+'외국인 비율'+'근처 초등학교'+마트거리, data = data)
names(data)
names(data) <- c("yearbuilt","floor","station_m","pop","dong_area","foreign_ratio","school_m","market_m","price_per_pyeong")
data <- read_excel("C:/linear_model_dataset_R.xlsx")
data <- data %>% select(-c(Latitude,Longitude))
names(data) <- c("yearbuilt","floor","station_m","pop","dong_area","foreign_ratio","school_m","market_m","price_per_pyeong")
data %>% head()
names(data) <- c("year_built","floor","station_m","pop","dong_area","foreign_ratio","school_m","market_m","price_per_pyeong")
data %>% head()
data_cor <- cor(data %>% select(-c(평당금액)))
data_cor <- cor(data %>% select(-c(price_per_pyeong)))
corrplot(data_cor, method = "shade",addCoef.col="black")
model <- lm(price_per_pyeong ~ year_built+floor+station_m+pop+dong_area+foreign_ratio+school_m + market_m, data = data)
summary(model)
plot(model)
model_2 <- step(model,direction = "backward")
model_2 %>% summary
mtcars <- mtcars
mtcars %>% head()
model <- lm(mpg ~ wt, data = mtcars)
summary(model)
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
ggtitle("Linear Regression of mpg ~ wt")
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)+
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
plot(model)
p1 <- diamonds %>% ggplot(aes(x = cut, fill = clarity))+
geom_bar(position = "dodge")
library(tidyverse)
library(knitr)
library(plotly)
library(readxl)
library(scales)
p1 <- diamonds %>% ggplot(aes(x = cut, fill = clarity))+
geom_bar(position = "dodge")
ggplotly(p1)
