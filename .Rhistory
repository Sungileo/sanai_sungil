data_file$station_id %>% unique() %>% length()
station_loc <- data.frame(station_id = c("usw0014189","usc0042319","usw00093107","usw00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
View(station_loc)
temps_long %>% head()
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
station_loc <- data.frame(station_id = c("usw00014189","usc00042319","usw00093107","usw00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
View(temps_long)
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
station_loc <- data.frame(station_id = c("usw00014189","usc00042319","usw00093107","usw00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
station_loc <- data.frame(station_id = c("usw00014189","usc00042319","usw00093107","usw00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
```{r}
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```{r}
data_file$station_id %>% unique() %>% length()
station_loc <- data.frame(station_id = c("usw00014189","usc00042319","usw00093107","usw00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
View(station_loc)
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
View(data_file)
station_loc <- data.frame(station_id = c("USW00014189","USC00042319","USW00093107","USW00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
ggplot(temps_long, aes(x=date,y=temperature,color=location))+geom_line()
dat <- read.csv("https://github.com/Sungileo/trainsets/blob/ef05ada2deed7a5ee7d4b50be36f862370f08449/OBS_ASOS_DD_20220308125952.csv")
View(dat)
dat <- read.csv("https://github.com/Sungileo/trainsets/blob/ef05ada2deed7a5ee7d4b50be36f862370f08449/OBS_ASOS_DD_20220308125952.csv",fileEncoding = 'utf-8')
View(dat)
dat <- read.csv(https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv)
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv")
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "utf-8")
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv")
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc_kr")
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
View(dat)
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
View(data_file)
dim(data_file)
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import sympy
import sympy
import seaborn as sns
import tensorflow as tf
import tensorflow as tf
reticulate::repl_python()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import seaborn as sns
peng = sns.load_dataset("penguins")          # data 불러오기
peng = peng.dropna()
peng
peng.groupby('species').mean()
peng_dum = pd.get_dummies(peng,columns=['species','island','sex'])
peng_dum
train_set = peng_dum.sample(frac=0.8, random_state=0)
test_set = peng_dum.drop(train_set.index)
len(train_set),len(test_set)
X_train = train_set.drop(['body_mass_g'],axis = 1)
y_train = train_set['body_mass_g']
X_test = test_set.drop(['body_mass_g'],axis = 1)
y_test = test_set['body_mass_g']
X_train
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
with np.printoptions(precision=2, suppress=True):
print('First example:', first)
print()
print('Normalized:', normalizer(first).numpy())
library(ggplot2)
library(dplyr)
library(dplyr)
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
options(timeout = <120)
options(timeout = 120)
data_file <- read.csv('https://raw.githubusercontent.com/Sungileo/trainsets/main/ncdc_normals.csv')
library(lubridate)
ncdc_normals
data_file <- read.csv("ncdc_normals.csv")
dim(data_file)
data_file %>% head()
data_file %>% sapply(class)
data_file$date <- data_file$date %>% as.Date("%Y-%m-%d")
data_file %>% sapply(class)
data_file$station_id %>% unique() %>% length()
station_loc <- data.frame(station_id = c("USW00014189","USC00042319","USW00093107","USW00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
ggplot(temps_long, aes(x=date,y=temperature,color=location))+geom_line()
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
geom_line()+
scale_x_date(name="month")+
theme_light(())
ggplot(temps_long, aes(x=date,y=temperature,color=location))+
geom_line()+
scale_x_date(name="month")+
theme_light()
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month", labels = c(1,2,3,4,5))+
theme_light()
date_s <- "0000-01-01" %>% as.Date("%y-%m-%d")
date_e <- "0001-01-01" %>% as.Date("%y-%m-%d")
break_date <- seq.Date(date_s, date_e, by="3 month")
date_s <- "0000-01-01" %>% as.Date("%y-%m-%d")
date_e <- "0001-01-01" %>% as.Date("%y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
break_date <- seq(date_s, date_e, by = "3 month")
date_s <- "0000-01-01" %>% as.Date("%y-%m-%d")
date_e <- "0001-01-01" %>% as.Date("%y-%m-%d")
break_date <- seq(date_s, date_e, by = "3 month")
break_date <- seq(date_s, date_e, by = "3 month")
break_date <- seq.Date(date_s, date_e, by = "3 month")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month", labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_y_continuous(name = "temp")
date_s <- "0000-01-01" %>% as.Date("%y-%m-%d")
date_e <- "0001-01-01" %>% as.Date("%y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_y_continuous(name = "temp",
limits = c(0,100))
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_y_continuous(name = "temp",
limits = c(0,100))+
theme_light()
seq.Date(date_s, date_e, by = "3 month")
date_s
date_s <- "0000-01-01" %>% as.Date("%y-%m-%d")
date_s
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")
date_s
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()
station_loc <- data.frame(station_id = c("USW00014189","USC00042319","USW00093107","USW00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
```{r}
ggplot(temps_long, aes(x=date,y=temperature,color=location))+geom_line()
station_loc <- data.frame(station_id = c("USW00014819","USC00042319","USW00093107","USW00012918"),
location = c("Chicago","Death valley","San diego","Houston"))
temps_long <- data_file %>% inner_join(station_loc,by="station_id")
temps_long %>% head()
ggplot(temps_long, aes(x=date,y=temperature,color=location))+geom_line()
date_s <- "0000-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_e <- "0001-01-01" %>% as.Date("%Y-%m-%d")
break_date <- seq.Date(date_s, date_e, by = "3 month")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_y_continuous(name = "temp",
limits = c(0,100))+
theme_light()
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()+
labs(title = "Fig 2.3", subtitle = "www")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()+
labs(title = "Fig 2.3", subtitle = "www", caption = "eee")
ggplot(temps_long, aes(x=date, y=temperature, color=location))+
geom_line()+
scale_x_date(name="month",
breaks = break_date,
labels = c("jan", "apr", "jul", "oct", "jan"))+
theme_light()+
labs(title = "Fig 2.3", subtitle = "www", caption = "eee", tag = "rrr")
dat <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
View(dat)
View(dat)
data_2021 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20220308125952.csv", fileEncoding = "euc-kr")
data_2021
data_2021 %>% dim()
data_2021 %>% head()
data_2021 %>% sapply(class)
data_2021$일시 <-data_2021$일시 %>% as.Date("%Y-%m-%d")
data_2021 %>% sapply(class)
date_ss <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_ee <- "2021-01-01" %>% as.Date("%Y-%m-%d")
break_date_2 <- seq.Date(date_ss, date_ee, by = "3 month")
data_2021 %>% names()
ggplot(data_2021,aes(x =일시,y=평균기온..C., color = 지점명))
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))
data_2021 %>% names()
ggplot(data_2021,aes(x = "일시",y = "평균기온..C.", color = 지점명))
ggplot(data_2021,aes(x = "일시",y = "평균기온..C.", color = "지점명"))
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line()
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1)
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월"))
date_ss <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_ee <- "2021-01-01" %>% as.Date("%Y-%m-%d")
break_date_2 <- seq.Date(date_ss, date_ee, by = "3 month")
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월"))
date_ee
break_date_2 <- seq.Date(date_ss, date_ee, by = "3 month")
break_date_2
data_2021 %>% names()
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월"))
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월")) +
scale_y_continuous(name = "평균기온")+
theme_light()
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
) +
scale_y_continuous(name = "평균기온")+
theme_light()
date_ss
date_ee
date_ss <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_ee <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_2 <- seq.Date(date_ss, date_ee, by = "3 month")
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월")) +
scale_y_continuous(name = "평균기온")+
theme_light()
temps_long
mean_temps <- temps_long %>%
group_by(location,month) %>%
summarize(mean = mean(temperature)) %>%
ungroup() %>%
mutate(month = factor(month %>% paste(),
levels = 1:12 %>% paste()))
mean_temps <- temps_long %>%
group_by(location,month) %>%
summarize(mean = mean(temperature)) %>%
ungroup() %>%
mutate(month = factor(month %>% paste(),
levels = 1:12 %>% paste()))
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
geom_tile(width = .95,height = .95)
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
geom_tile(width = .95,height = 0.95)
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
geom_tile(width = .95,height = 0.95)+
scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.98,
name = "temperature")
ggplot(mean_temps,aes(x = month, y = location, fill = mean))+
geom_tile(width = .95,height = 0.95)+
scale_fill_viridis_c(option = "B",begin = 0.15, end = 0.98,
name = "temperature")+
coord_fixed(expand = FALSE)+
ylab(NULL)
data_2022 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/OBS_ASOS_DD_20230322080932.csv", fileEncoding = "euc-kr")
View(data_2021)
View(data_2022)
View(dat)
data_2021 %>% summary()
View(mean_temps)
date_21s <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_21e <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_2 <- seq.Date(date_ss, date_ee, by = "3 month")
data_2021 %>% names()
ggplot(data_2021,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_2,
labels = c("1월","4월","7월","10월","1월")) +
scale_y_continuous(name = "평균기온")+
theme_light()
data_2022 %>% dim()
data_2022 %>% head()
data_2022 %>% sapply(class)
data_2022 %>% sapply(class)
data_2022$일시 <-data_2022$일시 %>% as.Date("%Y-%m-%d")
data_2022 %>% sapply(class)
data_2022 %>% summary()
date_22s <- "2022-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_22e <- "2023-01-01" %>% as.Date("%Y-%m-%d")
break_date_22 <- seq.Date(date_ss, date_ee, by = "3 month")
date_21s <- "2021-01-01" %>% as.Date("%Y-%m-%d")  #Y는 대문자
date_21e <- "2022-01-01" %>% as.Date("%Y-%m-%d")
break_date_21 <- seq.Date(date_ss, date_ee, by = "3 month")
#data_2021 %>% names()
ggplot(data_2022,aes(x = 일시,y = 평균기온..C., color = 지점명))+
geom_line(linewidth = 1) +
scale_x_date(name ="월",
breaks = break_date_22,
labels = c("1월","4월","7월","10월","1월")) +
scale_y_continuous(name = "평균기온")+
theme_light()
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import sympy
a = np.array([[1,2,3,4], [10, 20, 30, 40]])
x = np.linspace(0,10,100)
y = np.sin(x)
plt.plot(x,y)
plt.show()
c=np.arange(24).reshape(2,3,4)
c
c=np.arange(24).reshape(2,3,4)
c
c
c=np.arange(24).reshape(2,3,4)
c
`
```{python}
c.sum(axis = 0)
c.sum(axis = 0)
`
c=np.arange(24).reshape(2,3,4)
c
c.sum(axis = 0)
c.sum(axis = 1)
c.sum(axis = 2)
reticulate::repl_python()
import numpy as np
reticulate::repl_python()
import numpy as np
!pip install numpy
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import sympy
a = np.array([[1,2,3,4], [10, 20, 30, 40]])
x = np.linspace(0,10,100)
y = np.sin(x)
plt.plot(x,y)
plt.show()
c=np.arange(24).reshape(2,3,4)
c
c.sum(axis = 0)
c.sum(axis = 1)
c.sum(axis = 2)
import seaborn as sns
peng = sns.load_dataset("penguins")          # data 불러오기
peng = peng.dropna()
peng
peng.groupby('species').mean()
type(peng)
peng.info()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
#!pip install tensorflow
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
peng_dum = pd.get_dummies(peng,columns=['species','island','sex'])
peng_dum
train_set = peng_dum.sample(frac=0.8, random_state=0)
test_set = peng_dum.drop(train_set.index)
len(train_set),len(test_set)
X_train = train_set.drop(['body_mass_g'],axis = 1)
y_train = train_set['body_mass_g']
X_test = test_set.drop(['body_mass_g'],axis = 1)
y_test = test_set['body_mass_g']
X_train
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
with np.printoptions(precision=2, suppress=True):
print('First example:', first)
print()
print('Normalized:', normalizer(first).numpy())
reticulate::repl_python()
import seaborn as sns
import seaborn as sns
peng = sns.load_dataset("penguins")          # data 불러오기
peng = peng.dropna()
peng
peng.info()
peng.groupby('species').mean()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
#!pip install tensorflow
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
peng_dum = pd.get_dummies(peng,columns=['species','island','sex'])
peng_dum
train_set = peng_dum.sample(frac=0.8, random_state=0)
test_set = peng_dum.drop(train_set.index)
len(train_set),len(test_set)
X_train = train_set.drop(['body_mass_g'],axis = 1)
y_train = train_set['body_mass_g']
X_test = test_set.drop(['body_mass_g'],axis = 1)
y_test = test_set['body_mass_g']
X_train
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
with np.printoptions(precision=2, suppress=True):
print('First example:', first)
print()
print('Normalized:', normalizer(first).numpy())
reticulate::repl_python()
import seaborn as sns
peng = sns.load_dataset("penguins")          # data 불러오기
peng = peng.dropna()
peng
peng.info()
peng.groupby('species').mean()
reticulate::repl_python()
import seaborn as sns
---
title: "Datamining"
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import sympy
reticulate::repl_python()
#!pip install numpy
#!pip install seaborn
import numpy as np
import matplotlib.pyplot as plt
import sympy
reticulate::repl_python()
import numpy as np
import numpy as np
reticulate::repl_python()
import numpy as np
import numpy as np
import os
print(getcd())
print(os.getcwd())
reticulate::repl_python()
import numpy as np
import os
print(os.getcwd())
reticulate::repl_python()
import numpy as np
reticulate::repl_python()
import numpy as np
reticulate::repl_python()
import numpy as np
