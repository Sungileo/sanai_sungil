ggmap::register_google(key = "AIzaSyA7H7oNSWsslZFrFEel2DU0TDm_GT3mJ84")
tashu_2020 %>% str()
tashu_station %>% str()
names(tashu_station) <- c("번호", "대여소명", "거치대", "주소")
names(tashu_2020) <- c("대여스테이션", "대여일시", "반납스테이션", "반납일시", "이동거리")
ggmap::register_google(key = "AIzaSyA7H7oNSWsslZFrFEel2DU0TDm_GT3mJ84")
tashu_station <- ggmap::mutate_geocode(data = tashu_station, location = `주소`, source = 'google')
dj_map <- get_map("daejeon",zoom=12)
ggmap(dj_map) + geom_point(data = tashu_station,
aes(x=lon,y=lat),
size=3,
alpha=0.7)
ggmap(dj_map) + geom_point(data = tashu_station,
aes(x=lon,y=lat),
size=2,
alpha=0.7)
tashu_2020 <- tashu_2020 %>% mutate(대여년월일 = substr(tashu_2020$대여일시,1,8))
options(scipen = 100)
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tashu_top1_day <- tashu_top1_day %>% filter(대여스테이션 != 262 | 반납스테이션 != 262)
tashu_top1_day %>% dim()
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tashu_top1_day <- tashu_top1_day %>% filter(대여스테이션 != 262 | 반납스테이션 != 262)
tashu_top1_day %>% dim()
borrow_count <- tashu_top1_day %>%
group_by(대여스테이션) %>%
summarize(cnt = n()) %>%
na.omit()
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tashu_top1_day <- tashu_top1_day %>% filter(대여스테이션 != 262 | 반납스테이션 != 262)
tashu_top1_day %>% dim()
borrow_count <- tashu_top1_day %>%
group_by(대여스테이션) %>%
summarize(cnt = n()) %>%
na.omit()
names(borrow_count) <- c("번호", "cnt")
borrow_count <- borrow_count %>% full_join(tashu_station,by = "번호") %>% filter(번호 != 262)
borrow_count[is.na(borrow_count)] <- 0
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tashu_top1_day <- tashu_top1_day %>% filter(대여스테이션 != 262 | 반납스테이션 != 262)
tashu_top1_day %>% dim()
borrow_count <- tashu_top1_day %>%
group_by(대여스테이션) %>%
summarize(cnt = n()) %>%
na.omit()
names(borrow_count) <- c("번호", "cnt")
borrow_count <- borrow_count %>% full_join(tashu_station,by = "번호") %>% filter(번호 != 262)
borrow_count[is.na(borrow_count)] <- 0
tashu_sf <- st_as_sf(borrow_count,coords = c("lon","lat"))
st_crs(tashu_sf) <- 4326
tashu_sf <- tashu_sf %>% filter(대여소명 != "읍내동우편취급국")
tashu_sf %>% head()
ggmap(dj_map) +
coord_sf(crs = st_crs(4326))+
geom_sf(data = tashu_sf,aes(size = cnt,alpha = 0.7),inherit.aes = FALSE)
daejeon_area %>% st_crs()
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
d2 <- spTransform(daejeon_area, to_crs)
daejeon_area_sf <- st_as_sf(d2)
###투영
daejeon_area_sf <- st_as_sf(d2)
##b
daejeon_area_sf <- daejeon_area_sf %>% st_make_valid()
daejeon_area_sf %>% plot()
daejeon_area_sf <- st_as_sf(d2)
daejeon_area_sf <- daejeon_area_sf %>% st_make_valid()
daejeon_area_sf %>% plot()
dae2 <- daejeon_area_sf["EMD_NM"]
st_crs(dae2) <- 4326
geom_joined <- dae2 %>% st_join(tashu_sf,join = st_intersects)
geom_joined[is.na(geom_joined)] <- 0
dj_map2 <- get_map("daejeon", zoom=11)
ggmap(dj_map2) +
coord_sf(crs = st_crs(4326))+
geom_sf(data=geom_joined,aes(fill=cnt,alpha = 0.9),inherit.aes = FALSE)+
scale_fill_continuous(name = "count",
labels = c(c(0,5,10,15) %>% paste()),
breaks = c(0,5,10,15),
limits = c(0,20))
library(tidyverse)
library(sf)
library(ggmap)
Sys.getlocale()
rm(list=ls())
library(rgdal)
tashu_station = read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/tasu_station.csv") ## github을 통해 utf8로 변환
tashu_2020 = read.csv("C:/Sungil_LAB/data_geom_final/data/tasu_2020.csv",encoding = "cp949")
daejeon_area = readOGR("C:/Sungil_LAB/data_geom_final/data/LSMD_ADM_SECT_UMD_30.shp",encoding = "euc-kr")
tashu_2020 %>% str()
tashu_station %>% str()
names(tashu_station) <- c("번호", "대여소명", "거치대", "주소")
names(tashu_2020) <- c("대여스테이션", "대여일시", "반납스테이션", "반납일시", "이동거리")
ggmap::register_google(key = "AIzaSyA7H7oNSWsslZFrFEel2DU0TDm_GT3mJ84")
ggmap::register_google(key = "your API")
tashu_station <- ggmap::mutate_geocode(data = tashu_station, location = `주소`, source = 'google')
ggmap::register_google(key = "AIzaSyA7H7oNSWsslZFrFEel2DU0TDm_GT3mJ84")
tashu_station <- ggmap::mutate_geocode(data = tashu_station, location = `주소`, source = 'google')
dj_map <- get_map("daejeon",zoom=12)
ggmap(dj_map) + geom_point(data = tashu_station,
aes(x=lon,y=lat),
size=2,
alpha=0.7)
options(scipen = 100)
tashu_2020 <- tashu_2020 %>% mutate(대여년월일 = substr(tashu_2020$대여일시,1,8))
tbl_1 <- data.frame(tashu_2020$대여년월일 %>% table()) %>% arrange(-Freq) #20200913
top1_day <- c(20200913)
tashu_top1_day <- tashu_2020 %>% filter(대여년월일==top1_day)
tashu_top1_day %>% dim()
tashu_top1_day <- tashu_top1_day %>% filter(대여스테이션 != 262 | 반납스테이션 != 262)
tashu_top1_day %>% dim()
borrow_count <- tashu_top1_day %>%
group_by(대여스테이션) %>%
summarize(cnt = n()) %>%
na.omit()
names(borrow_count) <- c("번호", "cnt")
borrow_count <- borrow_count %>% full_join(tashu_station,by = "번호") %>% filter(번호 != 262)
borrow_count[is.na(borrow_count)] <- 0
tashu_sf <- st_as_sf(borrow_count,coords = c("lon","lat"))
st_crs(tashu_sf) <- 4326
tashu_sf <- tashu_sf %>% filter(대여소명 != "읍내동우편취급국")
tashu_sf %>% head()
ggmap(dj_map) +
coord_sf(crs = st_crs(4326))+
geom_sf(data = tashu_sf,aes(size = cnt,alpha = 0.7),inherit.aes = FALSE)
daejeon_area %>% st_crs()
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
d2 <- spTransform(daejeon_area, to_crs)
daejeon_area_sf <- st_as_sf(d2)
daejeon_area_sf <- st_as_sf(d2)
daejeon_area_sf <- daejeon_area_sf %>% st_make_valid()
daejeon_area_sf %>% plot()
dae2 <- daejeon_area_sf["EMD_NM"]
st_crs(dae2) <- 4326
geom_joined <- dae2 %>% st_join(tashu_sf,join = st_intersects)
geom_joined[is.na(geom_joined)] <- 0
dj_map2 <- get_map("daejeon", zoom=11)
ggmap(dj_map2) +
coord_sf(crs = st_crs(4326))+
geom_sf(data=geom_joined,aes(fill=cnt,alpha = 0.9),inherit.aes = FALSE)+
scale_fill_continuous(name = "count",
labels = c(c(0,5,10,15) %>% paste()),
breaks = c(0,5,10,15),
limits = c(0,20))
rm(list = ls())
library(sf)
library(tidyverse)
library(rgdal)
library(plotly)
library(ggtext)
library(tmap)
data_sp <- readOGR("C:/trainsets_2/LSMD_ADM_SECT_UMD_/LSMD_ADM_SECT_UMD_44.shp",encoding = "euc-kr")
data_sf = st_as_sf(data_sp)
data_sf %>% head()
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
library(forcats)
library(tidyr)
data_raw <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv")
data_raw %>% dim()
data_raw %>% head()
data_raw %>% summary()
data_use <- data_raw %>% select(-1)
data_use %>% head()
ggplot(data_use, aes(x=displ, y=hwy)) +
geom_point()
data <- read_excel("~/Sungil_Park/linear_model_dataset_R.xlsx")
rm(list = ls())
library(readxl)
library(tidyverse)
library(car)
library(corrplot)
library(plotly)
library(olsrr)
library(ggrepel)
data <- read_excel("~/Sungil_Park/linear_model_dataset_R.xlsx")
data <- read_excel("~/Sungil_LAB/linear_model_dataset_R.xlsx")
data <- read_excel("~/Sungil_LAB/linear_model_dataset.xlsx")
data <- data %>% select(-c(Latitude,Longitude))
names(data) <- c("year_built","floor","station_m","pop","dong_area","foreign_ratio","school_m","market_m","price_per_pyeong")
View(data)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3)
subplot(a,b,c,d,e,f,g,h,i,nrows = 3, ncols=1)
subplot(a,b,c,d,e,f,g,h,i,nrows = 3, ncols=3)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3, ncols=3)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3, ncols=4)
subplot(a,b,c,d,e,f,g,h,i,nrows = 3)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3)
install.packages("knittr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
#update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("rmarkdown")
#update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
daejeon_bus <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/daejeon_bus_2.csv",sep = "|")
st_2 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/station-info_4.txt",sep = "|")
st_2 <- st_2 %>% select(BUS_NODE_ID,BUS_NODE_NM)
names(st_2)[1] <- "BUS_STTN_ID"
st_3 <- daejeon_bus %>% select(HH_ID,BUS_ROUTE_ID,BUS_STTN_ID,GETON_CNT,GETOFF_CNT,TRANSF_PSNGR_CNT)
data_2 <- st_3 %>% left_join(st_2,by = "BUS_STTN_ID")
data_3 <- data_2 %>% filter(BUS_NODE_NM %in% c("한남대학교","한남로삼거리","한숲아파트","한남대북문","대전신학대학교"))
reticulate::repl_python()
library(tidyverse)
library(knitr)
library(plotly)
library(readxl)
library(scales)
mtcars <- mtcars
mtcars %>% head()
vehicles <- c("Four Cylinders","Six Cylinders","Eight Cylinders")
cylinders <- mtcars %>% group_by(cyl) %>% summarize(cnt = n())
veh_cyl <- tibble(vehicles, cylinders$cnt)
plot_ly(data = veh_cyl, x = vehicles, y = cylinders$cnt, type = "bar",
text = cylinders, textposition = "auto") %>%
layout(title = "Number of Vehicles in mtcars with 4, 6, and 8 Cylinders",
titlefont = list(size = 28, color = "orange", family = "Calibri"),
yaxis = list(title = "Number of Vehicles",
font = list(color = "black", family = "Arial", size = 26),
tickfont = list(color = "black", family = "Arial", size = 20)),
xaxis = list(title = "Number of Cylinders",
titlefont = list(color = "red", family = "Times New Roman", size = 22),
tickfont = list(color = "green", family = "Cambria", size = 18)))%>%
layout(margin = list(
l = 10,
r = 10,
b = 0,
t = 40))
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
library(nycflights13)
dep.delay.by.day <- flights %>%
group_by(day) %>%
summarise (mean_dep_delay=mean(dep_delay,na.rm=T))
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
title = list(size=28, color="orange", family= "Calibri"))
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list("Numberof Vehicles per cylinders",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list("Numberof Vehicles per cylinders",size=28, color="orange", family= "Calibri"))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = list(title="Numberof Vehicles per cylinders",size=28, color="orange", family= "Calibri"))
font
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
library(nycflights13)
dep.delay.by.day <- flights %>%
group_by(day) %>%
summarise (mean_dep_delay=mean(dep_delay,na.rm=T))
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
library(gapminder)
df <- gapminder
# No animation
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
reticulate::repl_python()
install.packages("mapdeck")
library(sf)
library(raster)
library(spData)
library(spDataLarge)
install.packages("mapdeck")
library(sf)
library(raster)
library(spData)
library(tmap)
library(mapview)
install.packages("spatialwidget")
install.packages("gifski")
library(sf)
library(raster)
library(spData)
library(tmap)
library(mapview)
library(sf)
library(raster)
library(spData)
library(tmap)
library(mapview)
library(tidyverse)
library(grid)
library(gifski)
#|warning: False
library(sf)
library(raster)
library(spData)
library(tmap)
library(mapview)
library(tidyverse)
library(grid)
library(gifski)
#vignette(package = "sf")
world %>% head()
names(world)
plot(world)
library(sp)
world_sp = as(world, Class = "Spatial")
world_sf = st_as_sf(world_sp)
plot(world["continent"])
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
st_point(c(5, 2, 3, 1)) %>% plot()
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
st_multipoint(multipoint_matrix) %>% plot()
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
st_linestring(linestring_matrix) %>% plot()
polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
st_polygon(polygon_list) %>% plot()
polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list) %>% plot()
multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
st_multilinestring((multilinestring_list)) %>% plot()
multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
st_multipolygon(multipolygon_list) %>% plot()
gemetrycollection_list = list(st_multipoint(multipoint_matrix),
st_linestring(linestring_matrix))
st_geometrycollection(gemetrycollection_list) %>% plot()
point1 = st_point(c(5, 2))
point2 = st_point(c(1, 3))
points_sfc = st_sfc(point1, point2)
points_sfc %>% plot()
polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
polygon1 = st_polygon(polygon_list1)
polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
polygon2 = st_polygon(polygon_list2)
polygon_sfc = st_sfc(polygon1, polygon2)
polygon_sfc %>% plot()
multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
multilinestring1 = st_multilinestring((multilinestring_list1))
multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)),
rbind(c(1, 7), c(3, 8)))
multilinestring2 = st_multilinestring((multilinestring_list2))
multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
st_crs(points_sfc)
points_sfc_wgs = st_sfc(point1, point2, crs = 4326)
st_crs(points_sfc_wgs)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
lnd_sf
#install.packages("rgdal")
library(rgdal)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
my_raster = raster(nrows = 8, ncols = 8, res = 0.5,
xmn = -2.0, xmx = 2.0, ymn = -2.0, ymx = 2.0, vals = 1:64)
nlayers(my_raster)
## plotting
plot(my_raster)
raster_on_disk = raster(r_brick, layer = 1)
library(spDataLarge)
library(spDataLarge)
#install.packages("rgdal")
library(rgdal)
library(spDataLarge)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
new_raster
plot(new_raster)
install.packages('mapdeck')
