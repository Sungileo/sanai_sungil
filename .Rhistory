nz_centroid  <-  st_centroid(nz)
seine_centroid <-  st_centroid(seine)
nz_pos <- st_point_on_surface(nz)
seine_pos <- st_point_on_surface(seine)
plot(st_geometry(nz))
plot(nz_centroid ,add=T, col="black")
plot(nz_pos ,add=T, col="red")
plot(st_geometry(seine))
plot(seine_centroid ,add=T, col="black")
plot(seine_pos ,add=T, col="red")
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km, col=adjustcolor(1:3, alpha = 0.2),add=T)
plot(seine,col="black")
plot(seine_buff_50km, col=c(col1,col2,col3),add=T)
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km, col=adjustcolor(1:3, alpha = 0.2),add=T)
# Create buffer zones
seine_buff_5km <- st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <- st_buffer(seine, dist = 20000)
# Plot the "seine" object and both buffer zones
plot(st_geometry(seine_buff_50km), col = "blue", lwd = 2)
plot(st_geometry(seine_buff_5km), col = adjustcolor("blue", alpha = 0.2), add = TRUE)
plot(st_geometry(seine), col = "black", add = TRUE)
# Plot the "seine" object and both buffer zones
plot(st_geometry(seine_buff_50km), col = "blue", lwd = 2)
plot(st_geometry(seine_buff_5km), col = adjustcolor("blue", alpha = 0.2), add = TRUE)
plot(seine_buff_5km,add=T)
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km,add=T)
plot(seine_buff_5km,add=T)
plot(seine,col="black")
plot(seine_buff_5km,add=T)
plot(seine,col="black")
plot(seine_buff_50km,add=T)
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km,add=T)
plot(seine,col="black")
plot(seine_buff_50km,add=T)
nz_sfc  <-  st_geometry(nz)
nz_shift <-  nz_sfc + c(0, 100000)
plot(nz_sfc)
plot(nz_shift,add=T)
plot(nz_shift,add=T,color = "red")
nz_sfc  <-  st_geometry(nz)
nz_shift <-  nz_sfc + c(0, 100000)
plot(nz_sfc)
plot(nz_shift,add=T,color = "red")
nz_sfc  <-  st_geometry(nz)
nz_shift <-  nz_sfc + c(0, 100000)
plot(nz_sfc)
plot(nz_shift,add=T,fill = "red")
nz_sfc  <-  st_geometry(nz)
nz_shift <-  nz_sfc + c(0, 100000)
plot(nz_sfc)
plot(nz_shift,add=T,color = "red")
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale, add=T)
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 5 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale, add=T)
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 2 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale, add=T)
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale, add=T)
rotation  <-  function(a){
r = a * pi / 180 #degrees to radians
matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2)
}
nz_rotate <-  (nz_sfc - nz_centroid_sfc) * rotation(30) + nz_centroid_sfc
plot(nz_sfc)
plot(nz_rotate, add=T, col="red")
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km,add=T)
plot(seine,col="black")
plot(seine_buff_50km,add=T)
plot(seine_buff_5km,col = "red",add=T)
plot(seine,col="black")
plot(seine_buff_5km,col = "red",add=T)
seine_buff_5km  <-  st_buffer(seine, joinStyle = "ROUND", dist = 5000)
seine_buff_50km <-  st_buffer(seine, dist = 20000)
plot(seine,col="black")
plot(seine_buff_5km,col = "red",add=T)
plot(seine,col="black")
plot(seine_buff_50km,col = "red",add=T)
nz_sfc  <-  st_geometry(nz)
nz_shift <-  nz_sfc + c(0, 100000)
plot(nz_sfc)
plot(nz_shift,add=T,col = "red")
plot(nz_scale,col = "red"", add=T)
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale,col = "red", add=T)
nz_centroid_sfc <-  st_centroid(nz_sfc)
nz_scale  <-  (nz_sfc - nz_centroid_sfc) * 0.5 + nz_centroid_sfc
plot(nz_sfc)
plot(nz_scale,col = "red", add=T)
rotation  <-  function(a){
r = a * pi / 180 #degrees to radians
matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2)
}
nz_rotate <-  (nz_sfc - nz_centroid_sfc) * rotation(30) + nz_centroid_sfc
plot(nz_sfc)
plot(nz_rotate, add=T, col="red")
b  <-  st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points
b <-  st_buffer(b, dist = 1) # convert points to circles
plot(b, border = "grey")
text(x = c(-0.5, 1.5), y = 1, labels = c("x", "y"), cex = 3) # add text
x  <-  b[1]
y <-  b[2]
x_and_y <-  st_intersection(x, y)
plot(b, border = "grey")
plot(x_and_y, col = "lightgrey", border = "grey", add = TRUE)
x_dif_y <-  st_difference(x,y)
plot(b, border = "grey")
plot(x_dif_y, col = "lightgrey", border = "grey", add = TRUE) # intersecting area
x_union_y <-  st_union(x,y)
plot(b, border = "grey")
plot(x_union_y, col = "lightgrey", border = "grey", add = TRUE) # intersecting area
x_sdif_y <-  st_sym_difference(x,y)
plot(b, border = "grey")
plot(x_sdif_y, col = "lightgrey", border = "grey", add = TRUE)
x_dif_y <-  st_difference(x,y)
plot(b, border = "grey")
plot(x_dif_y, col = "lightgrey", border = "grey", add = TRUE)
y_dif_x <-  st_difference(y,x)
plot(b, border = "grey")
plot(y_dif_x, col = "lightgrey", border = "grey", add = TRUE)
x_union_y <-  st_union(x,y)
plot(b, border = "grey")
plot(x_union_y, col = "lightgrey", border = "grey", add = TRUE)
x_sdif_y <-  st_sym_difference(x,y)
plot(b, border = "grey")
plot(x_sdif_y, col = "lightgrey", border = "grey", add = TRUE)
x  <-  b[1]
y <-  b[2]
x_and_y <-  st_intersection(x, y)
plot(b, border = "grey")
plot(x_and_y, col = "lightgrey", border = "grey", add = TRUE)
x_dif_y <-  st_difference(x,y)
plot(b, border = "grey")
plot(x_dif_y, col = "lightgrey", border = "grey", add = TRUE)
y_dif_x <-  st_difference(y,x)
plot(b, border = "grey")
plot(y_dif_x, col = "lightgrey", border = "grey", add = TRUE)
x_union_y <-  st_union(x,y)
plot(b, border = "grey")
plot(x_union_y, col = "lightgrey", border = "grey", add = TRUE)
x_sdif_y <-  st_sym_difference(x,y)
plot(b, border = "grey")
plot(x_sdif_y, col = "lightgrey", border = "grey", add = TRUE)
# Chunk 1
library(tidyverse)
library(knitr)
library(plotly)
library(readxl)
library(scales)
# Chunk 2
mtcars <- mtcars
mtcars %>% head()
# Chunk 3
vehicles <- c("Four Cylinders","Six Cylinders","Eight Cylinders")
cylinders <- mtcars %>% group_by(cyl) %>% summarize(cnt = n())
veh_cyl <- tibble(vehicles, cylinders$cnt)
plot_ly(data = veh_cyl, x = vehicles, y = cylinders$cnt, type = "bar",
text = cylinders, textposition = "auto") %>%
layout(title = "Number of Vehicles in mtcars with 4, 6, and 8 Cylinders",
titlefont = list(size = 28, color = "orange", family = "Calibri"),
yaxis = list(title = "Number of Vehicles",
font = list(color = "black", family = "Arial", size = 26),
tickfont = list(color = "black", family = "Arial", size = 20)),
xaxis = list(title = "Number of Cylinders",
titlefont = list(color = "red", family = "Times New Roman", size = 22),
tickfont = list(color = "green", family = "Cambria", size = 18)))%>%
layout(margin = list(
l = 10,
r = 10,
b = 0,
t = 40))
# Chunk 4
veh <- mtcars %>%
group_by(cyl) %>%
summarize(cnt =n()) %>%
mutate(cyl = factor(cyl))
plot_ly(data = veh,x=~cyl,y=~cnt,type="bar",text = ~cyl,textposition = "auto") %>%
layout(title = "Numberof Vehicles per cylinders",
titlefont = list(size=28, color="orange", family= "Calibri"))
# Chunk 5
library(nycflights13)
dep.delay.by.day <- flights %>%
group_by(day) %>%
summarise (mean_dep_delay=mean(dep_delay,na.rm=T))
plot_ly( data = dep.delay.by.day,
x = ~day,
y =~mean_dep_delay) %>%
add_trace(type = "scatter" ,mode = "lines+markers")
# Chunk 6
library(gapminder)
df <- gapminder
# No animation
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
# Chunk 7
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
# Chunk 8
p1 <- diamonds %>% ggplot(aes(x = cut, fill = clarity))+
geom_bar(position = "dodge")
ggplotly(p1)
# Chunk 9
range
# Chunk 10
axx <- list(nticks = 4,
range = c(-25,75))
axy <- list(nticks = 4,
range = c(-25,75))
axz <- list(nticks = 4,
range = c(0,50))
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x,
y = ~y,
z = ~z,
type = 'mesh3d')
fig <- fig %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
# Chunk 11
library(sf)
cheonan <- readRDS("C:/cheonan_geo.rds")
fig_2 <- plot_ly(cheonan)
fig_2
cheonan <- st_sf(cheonan)
fig_2 <- plot_ly(cheonan)
fig_2
axx <- list(nticks = 4,
range = c(-25,75))
axy <- list(nticks = 4,
range = c(-25,75))
axz <- list(nticks = 4,
range = c(0,50))
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x,
y = ~y,
z = ~z,
type = 'mesh3d')
fig <- fig %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
fill = ~''
) %>% layout(
xaxis = list(type = "log"))
fig
View(df)
### Subsetting(부분집합) and clipping
- 클리핑 오브젝트는 지오메트리를 변경할 수 있지만 오브젝트의 부분 집합을 지정할 수도 있으며 클리핑/하위 설정 오브젝트와 교차하는 피쳐만 반환할 수도 있음
bb = st_bbox(st_union(x, y))
bb = st_bbox(st_union(x, y))
b  <-  st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points
b <-  st_buffer(b, dist = 1) # convert points to circles
plot(b, border = "grey")
text(x = c(-0.5, 1.5), y = 1, labels = c("x", "y"), cex = 3) # add text
x  <-  b[1]
y <-  b[2]
x_and_y <-  st_intersection(x, y)
plot(b, border = "grey")
plot(x_and_y, col = "lightgrey", border = "grey", add = TRUE)
x_dif_y <-  st_difference(x,y)
plot(b, border = "grey")
plot(x_dif_y, col = "lightgrey", border = "grey", add = TRUE)
y_dif_x <-  st_difference(y,x)
plot(b, border = "grey")
plot(y_dif_x, col = "lightgrey", border = "grey", add = TRUE)
x_union_y <-  st_union(x,y)
plot(b, border = "grey")
plot(x_union_y, col = "lightgrey", border = "grey", add = TRUE)
x_sdif_y <-  st_sym_difference(x,y)
plot(b, border = "grey")
plot(x_sdif_y, col = "lightgrey", border = "grey", add = TRUE)
bb = st_bbox(st_union(x, y))
box = st_as_sfc(bb)
set.seed(2017)
p = st_sample(x = box, size = 10)
x_and_y = st_intersection(x, y)
plot(b, border = "grey")
plot(p,add=T)
#1번째방법
p_xy1 <-  p[x_and_y]
plot(p_xy1,add=T,col="red")
#1번째방법
p_xy1 <-  p[x_and_y]
plot(p_xy1,add=T,col="red")
#1번째방법
p_xy1 <-  p[x_and_y]
plot(b, border = "grey")
plot(p_xy1,add=T,col="red")
#2번째방법
p_xy2 <-  st_intersection(p, x_and_y)
plot(p_xy2,add=T,col="blue")
#3번째방법
sel_p_xy <-  st_intersects(p, x, sparse = FALSE)[, 1] &
st_intersects(p, y, sparse = FALSE)[, 1]
p_xy3 <-  p[sel_p_xy]
plot(p_xy3,add=T,col="green")
#1번째방법
p_xy1 <-  p[x_and_y]
plot(b, border = "grey")
plot(p,add=T)
plot(p_xy1,add=T,col="red")
#2번째방법
p_xy2 <-  st_intersection(p, x_and_y)
plot(p_xy2,add=T,col="blue")
#3번째방법
sel_p_xy <-  st_intersects(p, x, sparse = FALSE)[, 1] &
st_intersects(p, y, sparse = FALSE)[, 1]
p_xy3 <-  p[sel_p_xy]
plot(p_xy3,add=T,col="green")
#| warning: false
#| message: false
rm(list = ls())
library(sf)
library(tidyverse)
library(rgdal)
library(plotly)
library(ggtext)
library(tmap)
data_sp <- readOGR("C:/trainsets_2/LSMD_ADM_SECT_UMD_충남/LSMD_ADM_SECT_UMD_44.shp",encoding = "euc-kr")
data_sf = st_as_sf(data_sp)
data_sf %>% head()
data_sf %>% ggplot(aes(fill = COL_ADM_SE))+
geom_sf()+
theme_minimal()+
labs(title = "충청남도")
cheonan <- data_sf %>%
filter(COL_ADM_SE=="44130")
cheonan_seobuk <- cheonan %>%
filter(substr(EMD_CD,1,5)=="44133")
cheonan_dongnam <- cheonan %>%
filter(substr(EMD_CD,1,5)=="44131")
cheonan %>% ggplot(aes(fill=substr(EMD_CD,1,5)))+
geom_sf()+
theme_minimal()+
labs(title = "천안시 (구별)")+
scale_fill_discrete(name = "구",
labels = c("동남구","서북구"))
chsb <- cheonan_seobuk %>% ggplot(aes(fill=EMD_NM))+
geom_sf()+
geom_sf_text(mapping = aes(label = EMD_NM))+
labs(title = "천안시 서북구 (읍면동)")+
theme_minimal()+
scale_fill_discrete(name = "읍면동")
chsb %>% ggplotly()
chdn <- cheonan_dongnam %>% ggplot(aes(fill=EMD_NM))+
geom_sf()+
geom_sf_text(mapping = aes(label = EMD_NM))+
labs(title = "천안시 동남구 (읍면동)")+
theme_minimal()+
scale_fill_discrete(name = "읍면동")
chdn %>% ggplotly()
data <- read.csv("C:/trainsets_2/GEOCOMPS.csv")
data_sf <- data %>% st_as_sf(coords = c("Longitude","Latitude"))
st_crs(data_sf) <- 4737
st_crs(data_sf)
cheonan <- cheonan %>%
filter(EMD_NM!="광덕면")
gn <- ggplot()+
geom_sf(data = cheonan,fill=NA)+
geom_sf(data = data_sf,mapping = aes(color = 건축년도))+
scale_color_gradient(low = "blue", high = "red")+
theme_minimal()
gn %>% ggplotly()
data_nm_raw <- read.csv("C:/Users/sungi/Documents/linear_model_dataset_R.csv")
data_nm_raw <- data_nm_raw %>% mutate(평단가 = 거래금액/전용면적)
data_nm <- data_nm_raw %>%
group_by(아파트) %>%
summarize(평균거래액 = mean(평단가) %>% as.integer(),
Latitude = mean(Latitude),
Longitude = mean(Longitude)) %>%
mutate(정보 = paste(아파트,평균거래액,sep = ", 평단가 :"))
data_nm_sf <- data_nm %>% st_as_sf(coords = c("Longitude","Latitude"))
st_crs(data_nm_sf) <- 4737
cheonan <- cheonan %>%
filter(EMD_NM!="광덕면")
gn <- ggplot()+
geom_sf(data = cheonan,color = "black")+
geom_sf(data = data_nm_sf,aes(fill = 정보))+
theme_minimal()+
theme(legend.position = "none")
gn %>% ggplotly()
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
tm_shape(cheonan["EMD_NM"])+
tm_polygons(col="white",alpha = 0.3)+
tm_shape(data_nm_sf["정보"])+
tm_symbols(shape = 2, col = "red", size = 0.05)
View(data)
data <- read.csv("C:/trainsets_2/GEOCOMPS.csv")
data_sf <- data %>%
mutate(평단가 = (거래금액/전용면적) %>% as.integer()) %>%
st_as_sf(coords = c("Longitude","Latitude"))
st_crs(data_sf) <- 4737
st_crs(data_sf)
cheonan <- cheonan %>%
filter(EMD_NM!="광덕면")
gn <- ggplot()+
geom_sf(data = cheonan,fill=NA)+
geom_sf(data = data_sf,mapping = aes(color = 건축년도))+
scale_color_gradient(low = "blue", high = "red")+
theme_minimal()
gn %>% ggplotly()
gn <- ggplot()+
geom_sf(data = cheonan,fill=NA)+
geom_sf(data = data_sf,mapping = aes(color = 평단가))+
scale_color_gradient(low = "blue", high = "red")+
theme_minimal()
gn %>% ggplotly()
#| warning: false
#| message: false
library(readxl)
library(tidyverse)
library(car)
library(corrplot)
library(plotly)
data <- read_excel("C:/linear_model_dataset_R.xlsx")
data <- data %>% select(-c(Latitude,Longitude))
names(data) <- c("year_built","floor","station_m","pop","dong_area","foreign_ratio","school_m","market_m","price_per_pyeong")
data %>% head()
a <- plot_ly(y=data$year_built,type = "box",name = "건축년도")
b <- plot_ly(y=data$floor,type = "box",name = "층")
c <- plot_ly(y=data$station_m,type = "box",name = "전철역 거리")
d <- plot_ly(y=data$pop,type = "box",name = "법정동 인구수")
e <- plot_ly(y=data$dong_area,type = "box",name = "법정동 크기")
f <- plot_ly(y=data$foreign_ratio,type = "box",name = "법정동 외국인 비율")
g <- plot_ly(y=data$school_m,type = "box",name = "초등학교 거리")
h <- plot_ly(y=data$market_m,type = "box",name = "대형마트 거리")
i <- plot_ly(y=data$price_per_pyeong,type = "box",name = "평당 가격")
subplot(a,b,c,d,e,f,g,h,i,nrows = 3)
data %>%
filter(school_m < 1135) %>%
filter(market_m < 3156) %>%
filter(foreign_ratio < 0.11) %>%
filter(floor < 29) %>%
filter(station_m < 4366) %>%
filter(dong_area < 33.02)
data_cor <- cor(data)
data_cor
corrplot(data_cor,
method = "shade",
addCoef.col="black",
tl.col = "black")
model <- lm(price_per_pyeong ~ year_built+floor+station_m+pop+dong_area+foreign_ratio+school_m + market_m, data = data)
summary(model)
plot(model)
model_2 <- step(model,direction = "backward")
model_2 %>% summary
plot(model_2)
