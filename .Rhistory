resid <- resid(model_2)
library(MASS)
stdres(model_2)
hist(resid)
qqnorm(resid)
qqline(resid)
fitted(model_2)
plot(seq(1:length(fitted(model_2))),stdres(model_2))
stdres(model_2) %>% shapiro.test()
hist(stdres(model_2))
plot(mtcars$wt,resid)
fitted(model_2)
qqline(resid)
qqnorm(resid)
qqnorm(resid)
qqline(resid)
hist(resid)
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_violin(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
library(forcats)
library(tidyr)
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_violin(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
library(ggridges)
data(lincoln_weather)
lincoln_weather %>% sapply (class)
lincoln_df <- lincoln_weather %>%
mutate(month_short = fct_recode(
Month,
Jan = "January",
Feb = "February",
Mar = "March",
Apr = "April",
May = "May",
Jun = "June",
Jul = "July",
Aug = "August",
Sep = "September",
Oct = "October",
Nov = "November",
Dec = "December")) %>%
mutate (month_short = fct_rev (month_short))
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_boxplot(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_violin(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
lincoln_df %>% ggplot(aes(x = month_short,y=`Mean Temperature [F]`))+
geom_violin(color = "transparent",fill = "grey90")+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
ggplot(lincoln_df, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "mean temperature (°F)",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete (name= NULL) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
movie_length <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/movie_lengths.csv")
View(movie_length)
movie_length %>% ggplot(aes(x = length, y=year, group=year))+
geom_density_ridges()
movie_length %>% ggplot(aes(x = length, y=year, group=year))+
geom_density_ridges(scale = 10, size = 0.25, rel_min_height = 0.03)
movie_length %>% ggplot(aes(x = length, y=year, group=year))+
geom_density_ridges(scale = 10,
size = 0.25,
rel_min_height = 0.03,
fill="grey50")
### Figure 9.12 - data
all_house_88_113 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/all_house_88_113.csv")
### Figure 9.12
all_house_88_113 %>% ggplot(aes(x = dim_1,
y = year1,
group = interaction(party_code, factor(year1)),
fill = interaction (party_code, factor (year1))))+
geom_density_ridges (scale = 5, size = 0.25, rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "DW-NOMINATE score",
limits = c(-.8, 1.3),
breaks = seq(-1, 1, 0.25)) +
scale_y_reverse(name = "year",
expand = c(0, 0),
breaks = c(seq(2013, 1963, -10))) +
scale_fill_cyclical(
breaks = c("100.1963", "200.1963"),
labels = c(`100.1963` = "Democrats", `200.1963` = "Republicans"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide "legend") +
### Figure 9.12
all_house_88_113 %>% ggplot(aes(x = dim_1,
y = year1,
group = interaction(party_code, factor(year1)),
fill = interaction (party_code, factor (year1))))+
geom_density_ridges (scale = 5, size = 0.25, rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "DW-NOMINATE score",
limits = c(-.8, 1.3),
breaks = seq(-1, 1, 0.25)) +
scale_y_reverse(name = "year",
expand = c(0, 0),
breaks = c(seq(2013, 1963, -10))) +
scale_fill_cyclical(
breaks = c("100.1963", "200.1963"),
labels = c(`100.1963` = "Democrats", `200.1963` = "Republicans"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill "white"))
### Figure 9.12
all_house_88_113 %>% ggplot(aes(x = dim_1,
y = year1,
group = interaction(party_code, factor(year1)),
fill = interaction (party_code, factor (year1))))+
geom_density_ridges (scale = 5, size = 0.25, rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "DW-NOMINATE score",
limits = c(-.8, 1.3),
breaks = seq(-1, 1, 0.25)) +
scale_y_reverse(name = "year",
expand = c(0, 0),
breaks = c(seq(2013, 1963, -10))) +
scale_fill_cyclical(
breaks = c("100.1963", "200.1963"),
labels = c(`100.1963` = "Democrats", `200.1963` = "Republicans"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill = "white"))
### Figure 9.11
movie_lengths %>% ggplot(aes(x = length, y = year, group = year)) +
geom_density_ridges (scale = 10, size = 0.25, rel_min_height = 0.03,
fill = "grey85", na.rm = TRUE) +
scale_x_continuous (limits = c(0, 200), expand = c(0, 0), name = "length (minutes)") +
scale_y_reverse(
breaks = c(2000, 1980, 1960, 1940, 1920),
limits = c(2005, 1903), expand = c(0, 0)) +
theme_light() +
theme (
panel.border = element_blank(),
plot.margin = margin (3, 14, 3, 1.5))
movie_length <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/movie_lengths.csv")
### Figure 9.11
movie_lengths %>% ggplot(aes(x = length, y = year, group = year)) +
geom_density_ridges (scale = 10, size = 0.25, rel_min_height = 0.03,
fill = "grey85", na.rm = TRUE) +
scale_x_continuous (limits = c(0, 200), expand = c(0, 0), name = "length (minutes)") +
scale_y_reverse(
breaks = c(2000, 1980, 1960, 1940, 1920),
limits = c(2005, 1903), expand = c(0, 0)) +
theme_light() +
theme (
panel.border = element_blank(),
plot.margin = margin (3, 14, 3, 1.5))
### Figure 9.11
movie_length %>% ggplot(aes(x = length, y = year, group = year)) +
geom_density_ridges (scale = 10, size = 0.25, rel_min_height = 0.03,
fill = "grey85", na.rm = TRUE) +
scale_x_continuous (limits = c(0, 200), expand = c(0, 0), name = "length (minutes)") +
scale_y_reverse(
breaks = c(2000, 1980, 1960, 1940, 1920),
limits = c(2005, 1903), expand = c(0, 0)) +
theme_light() +
theme (
panel.border = element_blank(),
plot.margin = margin (3, 14, 3, 1.5))
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
View(air)
air$일시 <- lubridate::ymd(air$일시)
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
air$일시 <- lubridate::ymd(air$일시)
air$월 <- lubridate::month(air$일시,label = T)
air %>% head()
air %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
air %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj <- air %>% filter(지점명=="대전")
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(color="transparent",fill = "grey90")+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
air$일시 <- lubridate::ymd(air$일시)
air$월 <- lubridate::month(air$일시,label = T)
air %>% head()
air_dj <- air %>% filter(지점명=="대전")
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(color="transparent",fill = "grey90")+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "mean temperature (°F)",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete (name= NULL) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete (name= NULL) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월 %>% fct_rev())) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월 %>% fct_rev())) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete(name = "월")+
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj_jj <- air %>% filter(지점명 %in% c("대전","제주"))
View(air_dj_jj)
View(all_house_88_113)
air_dj_jj %>% ggplot(aes(x = `평균기온..C.`,
y = 월,
group = interaction(지점명, factor(월)),
fill = interaction (지점명, factor(월))))+
geom_density_ridges (rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "평균기온") +
scale_y_discrete(name = "월") +
scale_fill_cyclical(
breaks = c("대전.1", "제주.1"),
labels = c(`대전.1` = "대전", `제주.1` = "제주"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill = "white"))
air_dj_jj %>% ggplot(aes(x = `평균기온..C.`,
y = 월 %>% fct_rev(),
group = interaction(지점명, factor(월)),
fill = interaction (지점명, factor(월))))+
geom_density_ridges (rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "평균기온") +
scale_y_discrete(name = "월") +
scale_fill_cyclical(
breaks = c("대전.1", "제주.1"),
labels = c(`대전.1` = "대전", `제주.1` = "제주"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill = "white"))
library(sf)
library(raster)
library(spData)
library(spDataLarge)
library(tmap)
library(mapview)
library(tidyverse)
library(grid)
tmap_mode("view") #interactive mode가 on상태임
map_nz
map_nz <- tm_shape(nz)+
tm_polygons()
tmap_mode("view") #interactive mode가 on상태임
map_nz <- tm_shape(nz)+
tm_polygons()
map_nz
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
install.packages("gifski")
library(gifski)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
urb_anim  <-  tm_shape(world) + tm_polygons() +
tm_shape(urban_agglomerations) + tm_dots(size = "population_millions") +
tm_facets(along = "year", free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_anim
library(mapdeck)
install.packages("mapdeck")
library(mapdeck)
set_token("pk.eyJ1Ijoic3VuZ2lsZW8iLCJhIjoiY2xoYTRwbXEzMGR6eTNkbXBoZnluNXdyYSJ9.Id1fKIbhtvA9Mrnyo_1JQA")
crash_data = read.csv("https://git.io/geocompr-mapdeck")
crash_data = na.omit(crash_data)
ms = mapdeck_style("dark")
mapdeck(style = ms, pitch = 45, location = c(0, 52), zoom = 4) %>%
add_grid(data = crash_data, lat = "lat", lon = "lng", cell_size = 1000,
elevation_scale = 50, layer_id = "grid_layer",
colour_range = viridisLite::plasma(6))
reticulate::repl_python()
import pandas as pd
import pydeck
UK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'
pd.read_csv(UK_ACCIDENTS_DATA).head()
layer = pydeck.Layer(
'HexagonLayer',
UK_ACCIDENTS_DATA,
get_position='[lng,lat]',
auto_highlight=True,
elevation_scale=50,
pickable=True,
elevation_range=[0, 3000],
extruded=True,
coverage=1)
# Set the viewport location
view_state = pydeck.ViewState(
longitude=-1.415,
latitude=52.2323,
zoom=6,
min_zoom=5,
max_zoom=15,
pitch=40.5,
bearing=-27.36)
# Combined all of it and render a viewport
r = pydeck.Deck(layers=[layer], initial_view_state=view_state)
r.to_html("map.html")
quit
View(crash_data)
rm(list = ls())
reticulate::repl_python()
import pandas as pd
import pydeck
UK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'
pd.read_csv(UK_ACCIDENTS_DATA).head()
layer = pydeck.Layer(
'HexagonLayer',
UK_ACCIDENTS_DATA,
get_position='[lng,lat]',
auto_highlight=True,
elevation_scale=50,
pickable=True,
elevation_range=[0, 3000],
extruded=True,
coverage=1)
# Set the viewport location
view_state = pydeck.ViewState(
longitude=-1.415,
latitude=52.2323,
zoom=6,
min_zoom=5,
max_zoom=15,
pitch=40.5,
bearing=-27.36)
# Combined all of it and render a viewport
r = pydeck.Deck(layers=[layer], initial_view_state=view_state)
r.to_html("map.html")
