data_2013 <- file_2013 %>%
filter(X2013년03월_총인구수>0) %>%
select(행정구역,X2013년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2013년03월_총인구수 = gsub(",","",X2013년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2013년03월_총인구수))
View(file_2013)
View(data_2013)
reticulate::repl_python()
X_train.head()
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
quit
data_2023 <- file_2023 %>%
filter(X2023년03월_총인구수>0) %>%
select(행정구역,X2023년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2023년03월_총인구수)) %>% View()
kor_census <- data_2013 %>%
merge(data_2023,by = "행정구역_코드", all.x=T) %>%
mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>%
select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>%
filter(substr(행정구역.x,1,2) %in% c("서울","대전","대구","부산")) %>%
arrange(desc(성장률))
data_2023 <- file_2023 %>%
filter(X2023년03월_총인구수>0) %>%
select(행정구역,X2023년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2023년03월_총인구수))
data_2013 <- file_2013 %>%
filter(X2013년03월_총인구수>0) %>%
select(행정구역,X2013년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2013년03월_총인구수 = gsub(",","",X2013년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2013년03월_총인구수))
kor_census <- data_2013 %>%
merge(data_2023,by = "행정구역_코드", all.x=T) %>%
mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>%
select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>%
filter(substr(행정구역.x,1,2) %in% c("서울","대전","대구","부산")) %>%
arrange(desc(성장률))
names(kor_census) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")
kor_census$시도 = sapply(kor_census$행정구역,
function(x) strsplit(x, " ")[[1]][1])
kor_census$시도 = factor(kor_census$시도,
levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))
View(kor_census)
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
ggplot(kor_census,aes(x = reorder(행정구역, 성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
ggplot(kor_census,aes(x = reorder(행정구역, 성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
ggplot(kor_census,aes(x = reorder(행정구역, 성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip
ggplot(kor_census,aes(x = reorder(행정구역, 성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
ggplot(kor_census,aes(x = 행정구역,y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
ggplot(kor_census,aes(x = 행정구역 %>% reorder(성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
ggplot(kor_census,aes(x = reorder(행정구역,성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
View(kor_census)
#install.packages("geojsonsf")
library(geojsonsf)
library(sf)
kor_sido <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIDO.json")
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
kor_map <- kor_sigu
kor_map$행정구역_코드 <- paste(kor_map$SIG_CD,"00000",sep="")
kor_census_2 <- data_2013 %>%
merge(data_2023,by = "행정구역_코드", all.x=T) %>%
mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>%
select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>%
arrange(desc(성장률))
names(kor_census_2) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")
kor_map <- kor_map %>% left_join(kor_census_2, by="행정구역_코드")
View(kor_census_2)
kor_map %>% ggplot(aes(fill=성장률))+
geom_sf()+
scale_fill_continuous_diverging(
name = "인구성장률",
palette = "BLue-Red",
limits = c(-0.4,2.4))+
theme_minimal()+
theme(legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.85,0.2))
reticulate::repl_python()
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
View(build_and_compile_model)
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
EPOCHS = 10
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,
epochs=EPOCHS)
View(history)
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
View(hist)
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(16, activation='relu'),
layers.Dense(16, activation='relu'),
layers.Dense(16, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
EPOCHS = 100
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,
epochs=EPOCHS)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 10
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 1000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 100
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
View(hist)
def plot_history(history):
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
```{python}
plot_history(history)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 300
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
plot_history(history)
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 500
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
View(hist)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 5000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 50
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 500
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
plot_history(history)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 2000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
plot_history(history)
View(history)
View(hist)
reticulate::repl_python()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
penguins = sns.load_dataset("penguins")          # data 불러오기
penguins = penguins.dropna()
penguins.head()
penguins.info()
penguins.groupby('species').mean()
#!pip install tensorflow
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
penguins_cat = pd.get_dummies(penguins,columns=['species','island','sex'])
penguins_cat.head()
train_set = penguins_cat.sample(frac=0.8, random_state=9)
test_set = penguins_cat.drop(train_set.index)
len(train_set),len(test_set)
X_train = train_set.drop(['body_mass_g'],axis = 1)
y_train = train_set['body_mass_g']
X_test = test_set.drop(['body_mass_g'],axis = 1)
y_test = test_set['body_mass_g']
X_train.head()
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
with np.printoptions(precision=2, suppress=True):
print('First example:', first)
print()
print('Normalized:', normalizer(first).numpy())
layers.Dense(8, activation='relu'),
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(64, activation='relu'),
layers.Dense(32, activation='relu'),
layers.Dense(16, activation='relu'),
layers.Dense(8, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
EPOCHS = 1000
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 1000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)
history = model.fit(X_train,
y_train, epochs=EPOCHS,
validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])
plot_history(history)
model = build_and_compile_model(normalizer)
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)
history = model.fit(X_train,
y_train, epochs=EPOCHS,
validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])
plot_history(history)
