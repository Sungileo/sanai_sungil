label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
View(hist)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 5000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(64, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 50
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 500
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
plot_history(history)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 2000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
plot_history(history)
View(history)
View(hist)
reticulate::repl_python()
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
penguins = sns.load_dataset("penguins")          # data 불러오기
penguins = penguins.dropna()
penguins.head()
penguins.info()
penguins.groupby('species').mean()
#!pip install tensorflow
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
penguins_cat = pd.get_dummies(penguins,columns=['species','island','sex'])
penguins_cat.head()
train_set = penguins_cat.sample(frac=0.8, random_state=9)
test_set = penguins_cat.drop(train_set.index)
len(train_set),len(test_set)
X_train = train_set.drop(['body_mass_g'],axis = 1)
y_train = train_set['body_mass_g']
X_test = test_set.drop(['body_mass_g'],axis = 1)
y_test = test_set['body_mass_g']
X_train.head()
normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(X_train))
print(normalizer.mean.numpy())
first = np.array(X_train[:1])
with np.printoptions(precision=2, suppress=True):
print('First example:', first)
print()
print('Normalized:', normalizer(first).numpy())
layers.Dense(8, activation='relu'),
def build_and_compile_model(norm):
model = keras.Sequential([
norm,
layers.Dense(64, activation='relu'),
layers.Dense(32, activation='relu'),
layers.Dense(16, activation='relu'),
layers.Dense(8, activation='relu'),
layers.Dense(1)
])
model.compile(loss='mean_absolute_error',
optimizer=tf.keras.optimizers.Adam(0.001),
metrics = ['mae','mse'])
return model
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
dnn_model = build_and_compile_model(normalizer)
dnn_model.summary()
EPOCHS = 1000
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
EPOCHS = 1000
history = dnn_model.fit(
X_train,
y_train,
validation_split=0.2,
verbose=0,epochs=EPOCHS,callbacks=[PrintDot()])
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()
def plot_history(history):
plt.cla()
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
plt.plot()
plt.xlabel('Epoch')
plt.ylabel('Mean Square Error')
plt.plot(hist['epoch'], hist['mse'],
label='Train Error')
plt.plot(hist['epoch'], hist['val_mse'],
label = 'Val Error')
#plt.ylim([0,3000])
plt.legend()
plt.show()
plot_history(history)
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)
history = model.fit(X_train,
y_train, epochs=EPOCHS,
validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])
plot_history(history)
model = build_and_compile_model(normalizer)
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)
history = model.fit(X_train,
y_train, epochs=EPOCHS,
validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])
plot_history(history)
rm(list = ls())
library(ggplot2)
library(dplyr)
library(ggrepel)
library(cowplot)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
library(ggrepel)
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
data <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor_census_2013_2023.csv",encoding = "utf-8")
data <- data %>% mutate(인구증감 = 총인구수_2023-총인구수_2013)
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "") %>% as.numeric()
use_map <- use_map %>% merge(data,by = "행정구역_코드")
use_map %>% ggplot(aes(fill = 인구증감))+
geom_sf()+
coord_sf(datum = NA)+
scale_fill_continuous_diverging(
name = "인구증감",
palette = "BLue-Red",
na.value = "grey40",
mid=0,
rev = T,
limits = c(-4,4)*100000,
labels = format(seq(-4,4,2) * 1e+5, big.mark = ",",scientific = FALSE))+
theme_minimal()+
theme(legend.position = c(0.85,0.2))
set.seed(100)
df <- data.frame(p = runif(1000)) %>%
mutate(idx = 1:n())
df <- data.frame(p = runif(1000)) %>%
mutate(idx = 1:n(),
p_log10 = -log10(p))
set.seed(100)
df <- data.frame(p = runif(1000)) %>%
mutate(idx = 1:n(),
p_log10 = -log10(p))
View(df)
df <- df %>%
arrange(p) %>%
mutate(idx_2 = 1:n(),
label = ifelse(idx_2<=3,p,""))
View(df)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
color = "darkred") +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
color = "darkred",
linewidth = 2) +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
color = "darkred",
linewidth = 1.2) +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
color = "darkred",
linewidth = 1) +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
color = "darkred",
linewidth = 0.8) +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
ggplot(df, aes(x=idx, y=p_log10)) +
geom_point(color = "darkblue") +
geom_hline(yintercept = -log10(0.05),
linetype = 2,
linewidth = 0.8,
color = "darkred") +
scale_y_continuous(name = expression(-log[10](italic(p)))) +
scale_x_continuous(name = "",
breaks = NULL) +
theme_minimal()+
geom_text_repel(aes(label = label),
min.segment.length = 0,
max.overlaps = 100)
library(sf)
library(raster)
library(spData)
library(spDataLarge)
vignette(package = "sf") # see which vignettes are available
vignette("sf1")
vignette(package = "sf")
world
world %>% head()
plot(world)
names(world)
world %>% View()
ggplot(world,aes(x = pop))+
geom_sf()
ggplot(world,aes(x = pop))+
geom_sf(na.rm = T)
plot(world)
library(sp)
world_sp = as(world, Class = "Spatial")
View(world_sp)
world_sf = st_as_sf(world_sp)
plot(world])
plot(world)
plot(world["continent"])
#|wattr-warning: False
```
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia) #아시아 국가 합치기
plot(asia)
plot(world["pop"], reset = FALSE) #reset = FLASE이면 지도 요소를 더 추가할 수 있는 모드로 플롯을 유지
plot(asia, add = TRUE, col = "red")
plot(asia, add = TRUE, col = "red")
plot(world["pop"], reset = FALSE) #reset = FLASE이면 지도 요소를 더 추가할 수 있는 모드로 플롯을 유지
plot(asia, add = TRUE, col = "red")
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE) #reset = FLASE이면 지도 요소를 더 추가할 수 있는 모드로 플롯을 유지
plot(asia, add = TRUE, col = "red")
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000 #pop변수에 제곱근을 취하고 1000으로 나누어서 지도 시각화를 위해 크기를 맞춤
world_cents = st_centroid(world, of_largest = TRUE) #다각형(국가별) 중앙점 계산
plot(st_geometry(world_cents), add = TRUE, cex = cex)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
india = world[world$name_long == "India"]
india = world[world$name_long == "India"]
india = world[world$name_long == "India",]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
india = world[world$name_long == "India",]
india = world %>% filter(name_long=="india")
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
india = world %>% filter(name_long=="india")
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
india = world[world["name_long"] == "india"]
india = world[world["name_long"] == "india", ]
india = world[world$name_long == "india", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
india = world[world$name_long == "india", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
india = world[world$name_long == "india", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
india = world[world$name_long == "india", ]
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0.1, 0.1, 0.1, 0.1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
st_point(c(5, 2, 3, 1))
a <- st_point(c(5, 2, 3, 1))
plot(a)
a <- st_point(c(5, 2, 3, 1))
plot(a)
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
b <- st_linestring(linestring_matrix)
plot(b)
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
b <- st_multipoint(multipoint_matrix)
plot(b)
a <- st_point(c(5, 2, 3, 1))
plot(a)
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
b <- st_multipoint(multipoint_matrix)
plot(b)
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
c <- st_linestring(linestring_matrix)
plot(c)
polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
st_polygon(polygon_list)
d <- st_polygon(polygon_list)
plot(d)
plot(st_polygon(polygon_list))
st_polygon(polygon_list) %>% plot()
st_linestring(linestring_matrix) %>% plot()
st_multipoint(multipoint_matrix) %>% plot()
st_point(c(5, 2, 3, 1)) %>% plot()
st_point(c(5, 2, 3, 1)) %>% plot()
st_polygon(polygon_with_hole_list) %>% plot()
polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list) %>% plot()
multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
st_multilinestring((multilinestring_list)) %>% plot()
st_multipolygon(multipolygon_list) %>% plot()
multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
st_multipolygon(multipolygon_list) %>% plot()
gemetrycollection_list = list(st_multipoint(multipoint_matrix),
st_linestring(linestring_matrix))
st_geometrycollection(gemetrycollection_list) %>% plot()
point1 = st_point(c(5, 2))
point2 = st_point(c(1, 3))
points_sfc = st_sfc(point1, point2)
points_sfc %>% plot()
polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
polygon1 = st_polygon(polygon_list1)
polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
polygon2 = st_polygon(polygon_list2)
polygon_sfc = st_sfc(polygon1, polygon2)
polygon_sfc %>% plot()
View(polygon_sfc)
multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
multilinestring1 = st_multilinestring((multilinestring_list1))
multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)),
rbind(c(1, 7), c(3, 8)))
multilinestring2 = st_multilinestring((multilinestring_list2))
multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
point_multilinestring_sfc = st_sfc(point1, multilinestring1)
point_multilinestring_sfc %>% plot()
st_crs(points_sfc)
points_sfc_wgs = st_sfc(point1, point2, crs = 4326)
st_crs(points_sfc_wgs)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
View(lnd_sf)
class(lnd_sf)
lnd_sf
library(rgdal)
install.packages("rgdal")
#install.packages("rgdal")
library(rgdal)
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
new_raster = raster(raster_filepath)
new_raster
plot(new_raster)
my_raster = raster(nrows = 8, ncols = 8, res = 0.5,
xmn = -2.0, xmx = 2.0, ymn = -2.0, ymx = 2.0, vals = 1:64)
my_raster
## plotting
plot(my_raster, main = "my raster (64 cells = 8 rows * 8 cols)")
## plotting
plot(my_raster)
nlayer(my_raster)
nlayer(my_raster)
nlayers(my_raster)
## plotting
plot(my_raster)
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
r_brick = brick(multi_raster_file)
r_brick
nlayers(r_brick)
plot(r_brick)
nlayers(r_brick)
plot(r_brick)
raster_on_disk = raster(r_brick, layer = 1)
raster_in_memory = raster(xmn = 301905, xmx = 335745,
ymn = 4111245, ymx = 4154085,
res = 30)
values(raster_in_memory) = sample(seq_len(ncell(raster_in_memory)))
crs(raster_in_memory) = crs(raster_on_disk) #같은 좌표 입력
r_stack = stack(raster_in_memory, raster_on_disk)
r_stack
plot(r_stack)
reticulate::repl_python()
a = ([1,2,3],[4,5,6],[7,8])
a
a.flatten()
i
a = ([1,2,3],[4,5,6],[7,8])
for i in a:
i
a = ([1,2,3],[4,5,6],[7,8])
for i in a:
for x in i:
x
a = ([1,2,3],[4,5,6],[7,8])
b = []
for i in a:
for x in i:
b.append(x)
a = ([1,2,3],[4,5,6],[7,8])
b = []
for i in a:
for x in i:
b.append(x)
b
