scale_x_continuous (limits = c(0, 200), expand = c(0, 0), name = "length (minutes)") +
scale_y_reverse(
breaks = c(2000, 1980, 1960, 1940, 1920),
limits = c(2005, 1903), expand = c(0, 0)) +
theme_light() +
theme (
panel.border = element_blank(),
plot.margin = margin (3, 14, 3, 1.5))
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
View(air)
air$일시 <- lubridate::ymd(air$일시)
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
air$일시 <- lubridate::ymd(air$일시)
air$월 <- lubridate::month(air$일시,label = T)
air %>% head()
air %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("month")+
ylab("Mean Temperature [F]")+
theme_classic()
air %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj <- air %>% filter(지점명=="대전")
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(color="transparent",fill = "grey90")+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets_2/main/OBS_ASOS_DD_20230322080932.csv")
air$일시 <- lubridate::ymd(air$일시)
air$월 <- lubridate::month(air$일시,label = T)
air %>% head()
air_dj <- air %>% filter(지점명=="대전")
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_boxplot(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(fill = "grey90")+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = 월,y=`평균기온..C.`))+
geom_violin(color="transparent",fill = "grey90")+
geom_point(position = position_jitter(width = .15,height = 0,seed = 320),size=1)+
xlab("월")+
ylab("평균기온")+
theme_classic()
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "mean temperature (°F)",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete (name= NULL) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete (name= NULL) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월)) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월 %>% fct_rev())) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj %>% ggplot(aes(x = `평균기온..C.`, y = 월 %>% fct_rev())) +
geom_density_ridges (
scale = 3,
rel_min_height = 0.01,
bandwidth = 3.4,
fill="skyblue",
color="white") +
scale_x_continuous (
name = "평균기온",
expand = c(0, 0), breaks = c(0, 25, 50, 75)) +
scale_y_discrete(name = "월")+
theme_minimal() +
theme (
axis.text.y = element_text(vjust = 0),
plot.margin = margin (3, 7, 3, 1.5))
air_dj_jj <- air %>% filter(지점명 %in% c("대전","제주"))
View(air_dj_jj)
View(all_house_88_113)
air_dj_jj %>% ggplot(aes(x = `평균기온..C.`,
y = 월,
group = interaction(지점명, factor(월)),
fill = interaction (지점명, factor(월))))+
geom_density_ridges (rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "평균기온") +
scale_y_discrete(name = "월") +
scale_fill_cyclical(
breaks = c("대전.1", "제주.1"),
labels = c(`대전.1` = "대전", `제주.1` = "제주"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill = "white"))
air_dj_jj %>% ggplot(aes(x = `평균기온..C.`,
y = 월 %>% fct_rev(),
group = interaction(지점명, factor(월)),
fill = interaction (지점명, factor(월))))+
geom_density_ridges (rel_min_height = 0.01,
alpha=0.9, color = "white") +
scale_x_continuous (name = "평균기온") +
scale_y_discrete(name = "월") +
scale_fill_cyclical(
breaks = c("대전.1", "제주.1"),
labels = c(`대전.1` = "대전", `제주.1` = "제주"),
values = c("#4040ff", "#ff4040", "#6060ff", "#ff6060"),
name = NULL,
guide = "legend") +
theme_light() +
theme (panel.border = element_blank(),
axis.text.y = element_text(vjust = 0),
legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.direction = "horizontal",
legend.background = element_rect (fill = "white"))
library(sf)
library(raster)
library(spData)
library(spDataLarge)
library(tmap)
library(mapview)
library(tidyverse)
library(grid)
tmap_mode("view") #interactive mode가 on상태임
map_nz
map_nz <- tm_shape(nz)+
tm_polygons()
tmap_mode("view") #interactive mode가 on상태임
map_nz <- tm_shape(nz)+
tm_polygons()
map_nz
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
install.packages("gifski")
library(gifski)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_1970_2030  <-  urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
urb_anim  <-  tm_shape(world) + tm_polygons() +
tm_shape(urban_agglomerations) + tm_dots(size = "population_millions") +
tm_facets(along = "year", free.coords = FALSE)
tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 25)
urb_anim
library(mapdeck)
install.packages("mapdeck")
library(mapdeck)
set_token("pk.eyJ1Ijoic3VuZ2lsZW8iLCJhIjoiY2xoYTRwbXEzMGR6eTNkbXBoZnluNXdyYSJ9.Id1fKIbhtvA9Mrnyo_1JQA")
crash_data = read.csv("https://git.io/geocompr-mapdeck")
crash_data = na.omit(crash_data)
ms = mapdeck_style("dark")
mapdeck(style = ms, pitch = 45, location = c(0, 52), zoom = 4) %>%
add_grid(data = crash_data, lat = "lat", lon = "lng", cell_size = 1000,
elevation_scale = 50, layer_id = "grid_layer",
colour_range = viridisLite::plasma(6))
reticulate::repl_python()
import pandas as pd
import pydeck
UK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'
pd.read_csv(UK_ACCIDENTS_DATA).head()
layer = pydeck.Layer(
'HexagonLayer',
UK_ACCIDENTS_DATA,
get_position='[lng,lat]',
auto_highlight=True,
elevation_scale=50,
pickable=True,
elevation_range=[0, 3000],
extruded=True,
coverage=1)
# Set the viewport location
view_state = pydeck.ViewState(
longitude=-1.415,
latitude=52.2323,
zoom=6,
min_zoom=5,
max_zoom=15,
pitch=40.5,
bearing=-27.36)
# Combined all of it and render a viewport
r = pydeck.Deck(layers=[layer], initial_view_state=view_state)
r.to_html("map.html")
quit
View(crash_data)
rm(list = ls())
reticulate::repl_python()
import pandas as pd
import pydeck
UK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'
pd.read_csv(UK_ACCIDENTS_DATA).head()
layer = pydeck.Layer(
'HexagonLayer',
UK_ACCIDENTS_DATA,
get_position='[lng,lat]',
auto_highlight=True,
elevation_scale=50,
pickable=True,
elevation_range=[0, 3000],
extruded=True,
coverage=1)
# Set the viewport location
view_state = pydeck.ViewState(
longitude=-1.415,
latitude=52.2323,
zoom=6,
min_zoom=5,
max_zoom=15,
pitch=40.5,
bearing=-27.36)
# Combined all of it and render a viewport
r = pydeck.Deck(layers=[layer], initial_view_state=view_state)
r.to_html("map.html")
rm(list = ls())
library(ggplot2)
library(dplyr)
library(colorspace)
library(stringr)
library(geojsonsf)
library(sf)
kor_sigu <- geojson_sf("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor/KOR_SIGU.json")
kor_202202 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202202_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9.csv")
kor_202202 %>% head()
kor_202202 %>% sapply(class)
kor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format()
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "")
use_map <- use_map %>% merge(kor_202202,by = "행정구역_코드", all.x=T)
use_map %>% ggplot(aes(fill=총인구수))+
geom_sf(color = "grey90")+
coord_sf(datum = NA)+
scale_fill_distiller(
name = "인구수",
palette = "Blues", type = "seq", na.value = "grey60",
direction = 1,
breaks = seq(0,10,2) * 1e+5,
labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
theme_minimal()+
theme(
legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.85,0.2)
)
daejeon_map <-  use_map %>% filter(행정구역 %>% substr(1,5) == "대전광역시")
daejeon_map %>% ggplot(aes(fill=총인구수))+
geom_sf(color = "grey90")+
coord_sf(datum = NA)+
scale_fill_distiller(
name = "인구수",
palette = "Blues", type = "seq", na.value = "grey60",
direction = 1,
breaks = seq(0,10,2) * 1e+5,
labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
theme_minimal()+
theme(
legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.95,0.2)
)
use_map %>% ggplot(aes(fill = 남여_비율))+
geom_sf()+
scale_fill_continuous_diverging(
name = "남자/여자",
palette = "BLue-Red",
mid=1,
limits = 1 + c(-1,+1)*0.35,
rev = T)+
theme_minimal()+
theme(
legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.85,0.2)
)
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "")
data_pop <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202303_202303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "utf-8")
data_pop %>% head()
data_202303 <- data_pop %>%
filter(X2023년03월_총인구수>0) %>%
select(행정구역,X2023년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric()) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2023년03월_총인구수))
data_202303 %>% head()
use_map <- use_map %>% merge(data_202303,by = "행정구역_코드", all.x=T)
use_map %>% ggplot(aes(fill=X2023년03월_총인구수))+
geom_sf(color = "grey90")+
coord_sf(datum = NA)+
scale_fill_distiller(
name = "2023년 3월 인구수",
palette = "Blues", type = "seq", na.value = "grey60",
direction = 1,
breaks = seq(0,10,2) * 1e+5,
labels = format(seq(0,10,2) * 1e+5, big.mark = ",",scientific = FALSE))+
theme_minimal()+
theme(
legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.85,0.2))+
labs(title = "2023년 3월")
file_2023 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/202303_202303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "utf-8")
file_2013 <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/201303_201303_%EC%A3%BC%EB%AF%BC%EB%93%B1%EB%A1%9D%EC%9D%B8%EA%B5%AC%EB%B0%8F%EC%84%B8%EB%8C%80%ED%98%84%ED%99%A9_%EC%9B%94%EA%B0%84.csv",encoding = "UTF-8")
data_2023 <- file_2023 %>%
filter(X2023년03월_총인구수>0) %>%
select(행정구역,X2023년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2023년03월_총인구수 = gsub(",","",X2023년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2023년03월_총인구수))
data_2013 <- file_2013 %>%
filter(X2013년03월_총인구수>0) %>%
select(행정구역,X2013년03월_총인구수) %>%
mutate(행정구역_코드 = str_sub(행정구역,-11,-2),
X2013년03월_총인구수 = gsub(",","",X2013년03월_총인구수) %>% as.numeric(),
행정구역 =  sapply(행정구역, function(x) strsplit(x, "(", fixed=T)[[1]][1]),
행정구역 = sapply(행정구역, function(x) gsub("( *)$", "", x) %>% paste())) %>%
filter(substr(행정구역_코드,3,4)!="00") %>%
arrange(desc(X2013년03월_총인구수))
kor_census <- data_2013 %>%
merge(data_2023,by = "행정구역_코드", all.x=T) %>%
mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>%
select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>%
filter(substr(행정구역.x,1,2) %in% c("서울","대전","대구","부산")) %>%
arrange(desc(성장률))
names(kor_census) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")
kor_census$시도 = sapply(kor_census$행정구역,
function(x) strsplit(x, " ")[[1]][1])
kor_census$시도 = factor(kor_census$시도,
levels = c("서울특별시","대전광역시","대구광역시","부산광역시"))
region_colors <- c("#E69F00","#56B4E9","#009E73","#F0E442")
ggplot(kor_census,aes(x = reorder(행정구역,성장률),y= 성장률, fill = 시도))+
geom_col()+
scale_y_continuous(name = "인구성장률",
expand = c(0,0),
labels = scales::percent_format(scale = 100))+
scale_fill_manual(values = region_colors)+
coord_flip()+
theme_light()+
theme(panel.border = element_blank(),
panel.grid.major.y = element_blank())+
theme(axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.length = unit(0,"pt"),
axis.text.y = element_text(size = 8),legend.position = c(.78,.28),legend.background = element_rect(fill = "#FFFFFFB0"))
kor_map <- kor_sigu
kor_map$행정구역_코드 <- paste(kor_map$SIG_CD,"00000",sep="")
kor_census_2 <- data_2013 %>%
merge(data_2023,by = "행정구역_코드", all.x=T) %>%
mutate(성장률 = (X2023년03월_총인구수 - X2013년03월_총인구수) / X2013년03월_총인구수) %>%
select(행정구역.x,X2013년03월_총인구수,X2023년03월_총인구수, 성장률, 행정구역_코드) %>%
arrange(desc(성장률))
names(kor_census_2) <- c("행정구역", "X2013인구수","X2023인구수","성장률","행정구역_코드")
kor_map <- kor_map %>% left_join(kor_census_2, by="행정구역_코드")
kor_map %>% ggplot(aes(fill=성장률))+
geom_sf()+
scale_fill_continuous_diverging(
name = "인구성장률",
palette = "BLue-Red",
limits = c(-0.4,2.4))+
theme_minimal()+
theme(legend.title.align = 0.5,
legend.text.align = 1.0,
legend.position = c(0.85,0.2))
data <- read.csv("https://raw.githubusercontent.com/Sungileo/trainsets/main/kor_census_2013_2023.csv",encoding = "utf-8")
data <- data %>% mutate(인구증감 = 총인구수_2023-총인구수_2013)
use_map <- kor_sigu
use_map$행정구역_코드 <- paste(use_map$SIG_CD,"00000",sep = "") %>% as.numeric()
use_map <- use_map %>% merge(data,by = "행정구역_코드")
use_map %>% ggplot(aes(fill = 인구증감))+
geom_sf()+
coord_sf(datum = NA)+
scale_fill_continuous_diverging(
name = "인구증감",
palette = "BLue-Red",
na.value = "grey40",
mid=0,
rev = T,
limits = c(-4,4)*100000,
labels = format(seq(-4,4,2) * 1e+5, big.mark = ",",scientific = FALSE))+
theme_minimal()+
theme(legend.position = c(0.85,0.2))
library(dplyr)
library(mapdeck)
set_token("pk.eyJ1Ijoic3VuZ2lsZW8iLCJhIjoiY2xoYTRwbXEzMGR6eTNkbXBoZnluNXdyYSJ9.Id1fKIbhtvA9Mrnyo_1JQA")
crash_data = read.csv("https://git.io/geocompr-mapdeck")
crash_data = na.omit(crash_data)
ms = mapdeck_style("dark")
mapdeck(style = ms,
pitch = 45,
location = c(0, 52),
zoom = 4) %>%
add_grid(data = crash_data,
lat = "lat",
lon = "lng",
cell_size = 1000,
elevation_scale = 50,
layer_id = "grid_layer",
colour_range = viridisLite::plasma(6))
mapdeck(style = mapdeck_style("dark"),
pitch = 45,
location = c(0, 52),
zoom = 4) %>%
add_hexagon(data = crash_data,
lat = "lat",
lon = "lng",
elevation_scale = 100,
layer_id = "hex_layer",
colour_range = viridisLite::plasma(6))
mapdeck(style = "mapbox://styles/sungileo/clhtwpzyw00rl01rhfoiafw6q",
pitch = 45,
location = c(0, 52),
zoom = 4)%>%
add_heatmap(data = crash_data,
lat = "lat",
lon = "lng",
colour_range = colourvalues::colour_values(1:6, palette = "inferno"))
