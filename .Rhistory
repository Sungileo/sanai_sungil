import warnings
import warnings
warnings.filterwarnings("ignore")
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import sklearn
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import sklearn
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
train = pd.read_csv("~/DL_final_proj/data_1/taxi_data_train.csv")
test = pd.read_csv("~/DL_final_proj/data_1/taxi_data_test.csv")
train['승차시간'] = pd.to_datetime(train["승차시간"], format='%Y-%m-%d %H:%M:%S')
train["YEAR"] = train["승차시간"].dt.year
train["MONTH"] = train["승차시간"].dt.month
train["DATE"] = train["승차시간"].dt.day
train["DAY_OF_WEEK"] = train["승차시간"].dt.day_name()
train["HOUR"] = train["승차시간"].dt.hour
train["MINUTE"] = train["승차시간"].dt.minute
train["SEC"] = train["승차시간"].dt.second
train = train.drop(["승차시간"],axis = 1)
train.info()
train_set, test_set = train_test_split(train, test_size=0.2, random_state=2023)
X_train = train_set.drop(["통행시간"],axis=1)
y_train = train_set["통행시간"]
X_test = test_set.drop(["통행시간"],axis=1)
y_test = test_set["통행시간"]
X_train = pd.concat([X_train,pd.get_dummies(X_train["DAY_OF_WEEK"])],axis = 1)
X_train = X_train.drop(["DAY_OF_WEEK"],axis = 1)
X_test = pd.concat([X_test,pd.get_dummies(X_test["DAY_OF_WEEK"])],axis = 1)
X_test = X_test.drop(["DAY_OF_WEEK"],axis = 1)
X_train.shape, X_test.shape
tf.keras.backend.clear_session()
tf.random.set_seed(42)
normalization_layer = tf.keras.layers.Normalization()
layer1 = tf.keras.layers.Dense(30, activation="relu")
layer2 = tf.keras.layers.Dense(30, activation="relu")
layer3 = tf.keras.layers.Dense(30, activation="relu")
layer4 = tf.keras.layers.Dense(30, activation="relu")
output_layer = tf.keras.layers.Dense(1)
input_ = tf.keras.layers.Input(shape=X_train.shape[1:])
normalized = normalization_layer(input_)
hidden1 = layer1(normalized)
hidden2 = layer2(hidden1)
hidden3 = layer3(hidden2)
hidden4 = layer4(hidden3)
output = output_layer(hidden4)
model = tf.keras.Model(inputs=[input_], outputs=[output])
model.summary()
optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)
model.compile(loss="mse", optimizer=optimizer, metrics=["RootMeanSquaredError"])
normalization_layer.adapt(X_train)
early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=20)
class PrintDot(keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs):
if epoch % 100 == 0: print('')
print('.', end='')
history = model.fit(X_train, y_train, epochs=3,
callbacks=[early_stopping_cb,PrintDot()])
reticulate::repl_python()
